[
  {
    "answer": "True",
    "df_func": "df.loc[df['finalWorth'].idxmax()]['selfMade'] == True",
    "question": "Is the person with the highest net worth self-made?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "boolean",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['country'].value_counts().index[0] == 'United States'",
    "question": "Is the city with the most billionaires in the United States?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "boolean",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df.loc[df['age'].idxmax()]['philanthropyScore'] == 5)",
    "question": "Does the oldest billionaire have a philanthropy score of 5?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "boolean",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "19.0",
    "df_func": "df['age'].min()",
    "question": "What is the age of the youngest billionaire?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "number",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "343",
    "df_func": "df[df['category'] == 'Technology'].shape[0]",
    "question": "How many billionaires are there from the 'Technology' category?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "number",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "583600",
    "df_func": "df[df['category'] == 'Automotive']['finalWorth'].sum()",
    "question": "What's the total worth of billionaires in the 'Automotive' category?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "number",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "25",
    "df_func": "len(df[df['philanthropyScore']>3])",
    "question": "How many billionaires have a philanthropy score above 3?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "number",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Automotive",
    "df_func": "df.loc[df['finalWorth'].idxmax()]['category']",
    "question": "Which category does the richest billionaire belong to?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "category",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "United States",
    "df_func": "df.loc[df['age'].idxmax()]['country']",
    "question": "What's the country of origin of the oldest billionaire?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "category",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "M",
    "df_func": "df.loc[df['philanthropyScore'].idxmax()]['gender']",
    "question": "What's the gender of the billionaire with the highest philanthropy score?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "category",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "drugstores",
    "df_func": "df.loc[df['age'].idxmin()]['source']",
    "question": "What's the source of wealth for the youngest billionaire?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "category",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['United States', 'China', 'India']",
    "df_func": "df['country'].value_counts().head(3).index.tolist()",
    "question": "List the top 3 countries with the most billionaires.",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "list[category]",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['real estate', 'investments', 'pharmaceuticals', 'diversified', 'software']",
    "df_func": "df['source'].value_counts().head(5).index.tolist()",
    "question": "List the top 5 sources of wealth for billionaires.",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "list[category]",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Logistics', 'Sports', 'Gambling & Casinos']",
    "df_func": "df['category'].value_counts().index[-3:].tolist()",
    "question": "List the bottom 3 categories with the fewest billionaires.",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "list[category]",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[3, 10, 14, 16, 18]",
    "df_func": "df.loc[df['selfMade'] == False].head(5)['rank'].tolist()",
    "question": "List the top 5 ranks of billionaires who are not self-made.",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "list[number]",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[48.0, 83.0, 83.0]",
    "df_func": "df[df['philanthropyScore'] == 5].sort_values(by='age', ascending=True)['age'].head(3).tolist()",
    "question": "List the bottom 3 ages of billionaires who have a philanthropy score of 5.",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "list[number]",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[171000, 129000, 111000, 107000, 106000, 91400]",
    "df_func": "df[df['category'] == 'Technology'].sort_values(by='finalWorth', ascending=False).head(6)['finalWorth'].tolist()",
    "question": "List the top 6 final worth values of billionaires in the 'Technology' category.",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "list[number]",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[219000, 44800]",
    "df_func": "df[df['category'] == 'Automotive'].sort_values(by='finalWorth', ascending=False).head(2)['finalWorth'].tolist()",
    "question": "List the top 2 final worth values of billionaires in the 'Automotive' category.",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "list[number]",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Fare'] > 500).any()",
    "question": "Were there any passengers who paid a fare of more than $500?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "boolean",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Name'].nunique() == len(df)",
    "question": "Is every passenger's name unique?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "boolean",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[(df['Survived'] == 1) & (df['Pclass'] == 3) & (df['Sex'] == 'female')].shape[0] > 0)",
    "question": "Were there any female passengers in the 3rd class who survived?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "boolean",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "3",
    "df_func": "df['Pclass'].nunique()",
    "question": "How many unique passenger classes are present in the dataset?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "number",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "80.0",
    "df_func": "df['Age'].max()",
    "question": "What's the maximum age of the passengers?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "number",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "604",
    "df_func": "df[df['Siblings_Spouses Aboard'] == 0].shape[0]",
    "question": "How many passengers boarded without any siblings or spouses?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "number",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "1",
    "df_func": "df.groupby('Pclass')['Survived'].sum().idxmax()",
    "question": "Which passenger class has the highest number of survivors?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "category",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "female",
    "df_func": "df.loc[df['Survived'] == 1, 'Sex'].mode().values[0]",
    "question": "What's the most common gender among the survivors?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "category",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "0-50",
    "df_func": "df[df['Survived']==1]['Fare'].apply(lambda x: '0-50' if x<=50 else '50-100' if x<=100 else '100-150' if x<=150 else '150+').value_counts().idxmax()",
    "question": "Among those who survived, which fare range was the most common: (0-50, 50-100, 100-150, 150+)?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "category",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "18-30",
    "df_func": "df['Age'].apply(lambda x: '0-18' if x<18 else '18-30' if x<30 else '30-50' if x<50 else '50+').mode()[0]",
    "question": "What's the most common age range among passengers: (0-18, 18-30, 30-50, 50+)?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "category",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "[1, 2, 3]",
    "df_func": "df.groupby('Pclass')['Survived'].mean().sort_values(ascending=False).head(3).index.tolist()",
    "question": "Name the top 3 passenger classes by survival rate.",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "list[category]",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "['female', 'male']",
    "df_func": "df.groupby('Sex')['Fare'].mean().sort_values(ascending=False).head(2).index.tolist()",
    "question": "What are the top 2 genders by average fare paid?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "list[category]",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['What is your age? 👶🏻👵🏻'].mean() > 30",
    "question": "Is the average age of the respondents above 30?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "boolean",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['What is your civil status? 💍'].value_counts()['Single'] > df['What is your civil status? 💍'].value_counts()['Married'])",
    "question": "Are there more single individuals than married ones in the dataset?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "boolean",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df[df.columns[8]].mean() > 170",
    "question": "Do the majority of respondents have a height greater than 170 cm?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "boolean",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "13",
    "df_func": "df['What\\'s your nationality?'].nunique()",
    "question": "How many unique nationalities are present in the dataset?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "number",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "56332.81720430108",
    "df_func": "df['Gross annual salary (in euros) 💸'].astype(float).mean()",
    "question": "What is the average gross annual salary?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "number",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Master",
    "df_func": "df['What is the maximum level of studies you have achieved? 🎓'].mode()[0]",
    "question": "What is the most common level of studies achieved?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "category",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Very thin",
    "df_func": "df['What is your body complexity? 🏋️'].value_counts().idxmin()",
    "question": "Which body complexity has the least number of respondents?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "category",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Brown",
    "df_func": "df['What is your eye color? 👁️'].mode().values[0]",
    "question": "What's the most frequent eye color?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "category",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Heterosexual",
    "df_func": "df['What\\'s your sexual orientation?'].value_counts().idxmax()",
    "question": "Which sexual orientation has the highest representation?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "category",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Single', 'Married', 'In a Relationship', 'In a Relationship Cohabiting', 'Divorced']",
    "df_func": "df['What is your civil status? 💍'].value_counts().index[:5].tolist()",
    "question": "Name the top 5 civil statuses represented in the dataset.",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "list[category]",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Red', 'Other', 'White', 'Blue']",
    "df_func": "df['What is your hair color? 👩🦰👱🏽'].value_counts().tail(4).index.tolist()",
    "question": "What are the 4 least common hair colors?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "list[category]",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[500000.0, 360000.0, 300000.0, 300000.0]",
    "df_func": "df['Gross annual salary (in euros) 💸'].nlargest(4).tolist()",
    "question": "What are the top 4 maximum gross annual salaries?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "list[number]",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[2, 2, 2]",
    "df_func": "df['Happiness scale'].nsmallest(3).tolist()",
    "question": "Name the bottom 3 values for the happiness scale.",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "list[number]",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[65, 62, 60, 60, 59]",
    "df_func": "df['What is your age? 👶🏻👵🏻'].nlargest(5).tolist()",
    "question": "What are the 5 highest ages present in the dataset?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "list[number]",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['trip_distance'] > 30).any()",
    "question": "Are there any trips with a total distance greater than 30 miles?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "boolean",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['total_amount'] > 100).any()",
    "question": "Were there any trips that cost more than $100 in total?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "boolean",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['passenger_count'] > 6).any()",
    "question": "Is there any trip with more than 6 passengers?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "boolean",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "75.25",
    "df_func": "df['fare_amount'].max()",
    "question": "What is the maximum fare amount charged for a trip?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "number",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "96",
    "df_func": "df['PULocationID'].nunique()",
    "question": "How many unique pickup locations are in the dataset?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "number",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "1",
    "df_func": "df['payment_type'].mode()[0]",
    "question": "Which payment type is the most common in the dataset?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "category",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "2",
    "df_func": "df['VendorID'].value_counts().index[0]",
    "question": "Which vendor has the most trips recorded?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "category",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "236",
    "df_func": "df['DOLocationID'].mode().iloc[0]",
    "question": "What is the most common drop-off location?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "category",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[161, 237, 236]",
    "df_func": "df['PULocationID'].value_counts().head(3).index.tolist()",
    "question": "Which are the top 3 most frequent pickup locations?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "list[category]",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[1, 2, 5, 4]",
    "df_func": "df['RatecodeID'].value_counts().index[:4].tolist()",
    "question": "Name the 4 most common rate codes used.",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "list[category]",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "['N', 'Y']",
    "df_func": "df['store_and_fwd_flag'].value_counts().index[:2].tolist()",
    "question": "list the 2 most frequent store and forward flags.",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "list[category]",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[1, 2, 4, 3]",
    "df_func": "df['payment_type'].value_counts().index.tolist()[:4]",
    "question": "Identify the top 4 payment types used by frequency",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "list[category]",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[0, 0, 0, 0]",
    "df_func": "sorted(df['tolls_amount'].tolist(), reverse=True)[:4]",
    "question": "Report the 4 highest toll amounts paid.",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "list[number]",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[19.83, 19.74, 19.68]",
    "df_func": "df.nlargest(3, 'trip_distance')['trip_distance'].tolist()",
    "question": "list the top 3 longest trip distances",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "list[number]",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[75.25, 74.4, 73.0, 73.0, 73.0, 73.0]",
    "df_func": "df['fare_amount'].nlargest(6).tolist()",
    "question": "Report the 6 highest fare amounts charged.",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "list[number]",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'BROOKLYN' in df['borough'].tolist()",
    "question": "Are there any complaints made in Brooklyn?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "boolean",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "('Dog' in df['descriptor'].values)",
    "question": "Do any complaints have 'Dog' as a descriptor?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "boolean",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['month_name'].eq('April').any()",
    "question": "Were there any complaints raised in April?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "boolean",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "23110",
    "df_func": "df[df['borough'] == 'QUEENS'].shape[0]",
    "question": "How many complaints have been made in Queens?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "number",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "14811",
    "df_func": "df.loc[df['hour'] == 0, 'descriptor'].shape[0]",
    "question": "How many complaints were raised at midnight?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "number",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "1131",
    "df_func": "df['descriptor'].nunique()",
    "question": "How many unique descriptors are present in the dataset?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "number",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "BROOKLYN",
    "df_func": "df['borough'].value_counts().idxmax()",
    "question": "Which borough has the most complaints?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "category",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "July",
    "df_func": "df['month_name'].value_counts().idxmax()",
    "question": "Which month sees the highest number of complaints?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "category",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Sunday",
    "df_func": "df.groupby('weekday_name').size().idxmin()",
    "question": "Which weekday has the least complaints?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "category",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "ACS",
    "df_func": "df['agency'].value_counts().idxmin()",
    "question": "Which agency is least frequently handling complaints?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "category",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Noise - Residential', 'HEAT/HOT WATER', 'Illegal Parking', 'Blocked Driveway', 'Street Condition']",
    "df_func": "df['complaint_type'].value_counts().index[:5].tolist()",
    "question": "List the top 5 most frequent complaint types.",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "list[category]",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Tuesday', 'Monday']",
    "df_func": "df['weekday_name'].value_counts().head(2).index.tolist()",
    "question": "Mention the 2 most common weekdays for complaints.",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "list[category]",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['neighbourhood_cleansed'].nunique()==1",
    "question": "Are all properties in the dataset located in the same neighbourhood?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "boolean",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['reviews_per_month'].gt(5).all()",
    "question": "Are all reviews_per_month values greater than 5?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "boolean",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['room_type'].isnull().any()",
    "question": "Are there any listings without a specified room type?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "boolean",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "22.0",
    "df_func": "df['bedrooms'].max()",
    "question": "What is the maximum number of bedrooms a property has in this dataset?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "number",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Westminster",
    "df_func": "df['neighbourhood_cleansed'].value_counts().idxmax()",
    "question": "Which neighbourhood has the most listings?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "category",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Entire home/apt",
    "df_func": "df['room_type'].value_counts().index[0]",
    "question": "What is the most common room type in the listings?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "category",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Entire rental unit",
    "df_func": "df['property_type'].value_counts().index[0]",
    "question": "What property type has the most listings?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "category",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Westminster', 'Tower Hamlets', 'Hackney']",
    "df_func": "df['neighbourhood_cleansed'].value_counts().head(3).index.tolist()",
    "question": "List the top 3 neighbourhoods with the most listings.",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "list[category]",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Entire rental unit', 'Private room in rental unit', 'Private room in home', 'Entire condo']",
    "df_func": "df['property_type'].value_counts().head(4).index.tolist()",
    "question": "Which are the top 4 most common property types?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "list[category]",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Entire home/apt', 'Private room']",
    "df_func": "df['room_type'].value_counts().index[:2].tolist()",
    "question": "Which are the 2 most preferred room types?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "list[category]",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[5.0, 5.0, 5.0]",
    "df_func": "df['review_scores_location'].nlargest(3).tolist()",
    "question": "What are the top 3 highest review scores for location?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "list[number]",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[1.0, 2.0, 3.0, 4.0]",
    "df_func": "df['bedrooms'].value_counts().head(4).index.tolist()",
    "question": "What are the 4 most common number of bedrooms in properties?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "list[number]",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]",
    "df_func": "df.nsmallest(6,'review_scores_communication')['review_scores_communication'].tolist()",
    "question": "List the 6 lowest review scores for communication.",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "list[number]",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Overall<gx:number>'] > df['Potential<gx:number>']).any()",
    "question": "Are there players who have a greater overall score than their potential score?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "boolean",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "683",
    "df_func": "df['Club<gx:category>'].nunique()",
    "question": "How many unique clubs are there in the dataset?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "number",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "105500000",
    "df_func": "df['Value_€<gx:currency>'].max()",
    "question": "What is the highest value (in €) of a player in the dataset?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "number",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "414",
    "df_func": "df[df['Position<gx:category>'] == 'ST'].shape[0]",
    "question": "How many players have the position 'ST'?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "number",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "England",
    "df_func": "df['Nationality<gx:category>'].mode().values[0]",
    "question": "What is the most common nationality in the dataset?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "category",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Right",
    "df_func": "df['Preferred Foot<gx:category>'].mode().iloc[0]",
    "question": "What is the most common preferred foot amongst players?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "category",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "SUB",
    "df_func": "df['Position<gx:category>'].mode().iloc[0]",
    "question": "What is the most common position of players in the dataset?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "category",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Liverpool', 'Manchester City', 'Real Madrid']",
    "df_func": "df.groupby('Club<gx:category>')['Value_€<gx:currency>'].sum().sort_values(ascending=False).head(3).index.tolist()",
    "question": "Which are the top 3 clubs in terms of the total value (in €) of their players?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "list[category]",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[93, 92, 91]",
    "df_func": "df['Overall<gx:number>'].nlargest(3).tolist()",
    "question": "What are the top 3 overall scores in the dataset?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "list[number]",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[48, 48, 49, 50, 50]",
    "df_func": "df['Potential<gx:number>'].nsmallest(5).tolist()",
    "question": "What are the bottom 5 potential scores in the dataset?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "list[number]",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[105500000, 90000000, 87000000, 80000000]",
    "df_func": "df['Value_€<gx:currency>'].sort_values(ascending=False).head(4).tolist()",
    "question": "What are the top 4 values (in €) of players in the dataset?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "list[number]",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[560000, 370000]",
    "df_func": "df['Wage_€<gx:currency>'].nlargest(2).tolist()",
    "question": "What are the top 2 wages (in €) of players in the dataset?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "list[number]",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['yr'].min() >= 2001) and (df['yr'].max() <= 2100)",
    "question": "All tornadoes in the dataset occurred in the 21st century.",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "boolean",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "53",
    "df_func": "df['st'].nunique()",
    "question": "How many unique states are represented in the dataset?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "number",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "5",
    "df_func": "df['mag'].max()",
    "question": "What is the highest magnitude of tornado recorded in the dataset?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "number",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "234.7",
    "df_func": "df['len'].max()",
    "question": "What is the longest length of a tornado path in the dataset?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "number",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "1740",
    "df_func": "df['inj'].max()",
    "question": "What is the maximum number of injuries caused by a single tornado?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "number",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "TX",
    "df_func": "df['st'].value_counts().idxmax()",
    "question": "Which state has experienced the most tornadoes?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "category",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "5",
    "df_func": "df['mo'].mode().iloc[0]",
    "question": "In which month do most tornadoes occur?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "category",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[1740, 1500, 1228]",
    "df_func": "df.nlargest(3, 'inj')['inj'].tolist()",
    "question": "What are the top 3 number of injuries caused by tornadoes in the dataset?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "list[number]",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[5, 5, 5, 5, 5]",
    "df_func": "df['mag'].nlargest(5).tolist()",
    "question": "What are the top 5 magnitudes of tornadoes in the dataset?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "list[number]",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[234.7, 217.8, 202.5, 202.1]",
    "df_func": "df['len'].nlargest(4).tolist()",
    "question": "What are the top 4 path lengths of tornadoes in the dataset?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "list[number]",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[158, 116, 114, 94, 80, 72]",
    "df_func": "df['fat'].nlargest(6).tolist()",
    "question": "What are the top 6 number of fatalities caused by tornadoes in the dataset?",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "list[number]",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['TMIN'].min() > 32",
    "question": "All recorded temperatures are above freezing point.",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "boolean",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['TMAX'] <= 32).any() == False",
    "question": "There were no days when the maximum temperature was below freezing point.",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "boolean",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "8.28",
    "df_func": "df['PRCP'].max()",
    "question": "What is the highest recorded precipitation in inches?",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "number",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "-15.0",
    "df_func": "df['TMIN'].min()",
    "question": "What is the lowest minimum temperature recorded?",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "number",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "106.0",
    "df_func": "df['TMAX'].max()",
    "question": "What is the highest maximum temperature recorded?",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "number",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "26.0",
    "df_func": "df['SNWD'].max()",
    "question": "What is the deepest recorded snow depth in inches?",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "number",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[8.28, 7.57, 7.4]",
    "df_func": "df['PRCP'].nlargest(3).tolist()",
    "question": "What are the 3 highest recorded precipitation events in inches?",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "list[number]",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[-15.0, -13.0, -8.0, -7.0, -7.0]",
    "df_func": "df['TMIN'].nsmallest(5).tolist()",
    "question": "What are the 5 lowest minimum temperatures recorded?",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "list[number]",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[106.0, 104.0, 104.0, 104.0]",
    "df_func": "df['TMAX'].nlargest(4).tolist()",
    "question": "What are the 4 highest maximum temperatures recorded?",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "list[number]",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Clothing ID'].nunique() > 20",
    "question": "Are there more than 20 unique clothing items in the dataset?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "boolean",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Age'].mean() > 50",
    "question": "Is the age of the reviewers above 50 years on average?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "boolean",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Department Name'].nunique() == 1",
    "question": "Do all reviews come from the same department?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "boolean",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Recommended IND'].all()",
    "question": "Are all products recommended?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "boolean",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "43.198543813335604",
    "df_func": "df['Age'].mean()",
    "question": "What is the average age of the reviewers?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "number",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "122",
    "df_func": "df['Positive Feedback Count'].max()",
    "question": "What's the highest number of positive feedback received for a review?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "number",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "5",
    "df_func": "df['Rating'].value_counts().index[0]",
    "question": "What is the most common rating given by reviewers?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "number",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "1206",
    "df_func": "df['Clothing ID'].nunique()",
    "question": "How many unique clothing items are there in the dataset?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "number",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Tops",
    "df_func": "df['Department Name'].value_counts().index[0]",
    "question": "Which department has the most reviews?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "category",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Dresses",
    "df_func": "df['Class Name'].mode().iloc[0]",
    "question": "Which class of clothing is most commonly reviewed?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "category",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "General",
    "df_func": "df['Division Name'].value_counts().idxmax()",
    "question": "Which division is most commonly mentioned in the reviews?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "category",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "1078",
    "df_func": "df['Clothing ID'].value_counts().idxmax()",
    "question": "What is the most frequently reviewed clothing item? If you find a tie answer with row order.",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "category",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Tops', 'Dresses', 'Bottoms', 'Intimate']",
    "df_func": "df['Department Name'].value_counts().head(4).index.tolist()",
    "question": "Which are the 4 most reviewed categories in Department Name?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "list[category]",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Dresses', 'Knits']",
    "df_func": "df['Class Name'].value_counts().index[:2].tolist()",
    "question": "Which are the top 2 most reviewed categories in Class Name?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "list[category]",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['General', 'General Petite']",
    "df_func": "df['Division Name'].value_counts().head(2).index.tolist()",
    "question": "Which are the 2 most reviewed categories in Division Name?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "list[category]",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[0, 1, 2, 3]",
    "df_func": "df['Positive Feedback Count'].value_counts().head(4).index.tolist()",
    "question": "What are the 4 most common Positive Feedback Counts of reviewers?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "list[number]",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[1078, 862]",
    "df_func": "df['Clothing ID'].value_counts().head(2).index.tolist()",
    "question": "What are the 2 most common clothing IDs in the reviews? If you find a tie answer in row order.",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "list[number]",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Incident Year'].idxmax()]['Filed Online'] == 'Yes'",
    "question": "Was the highest reported incident in the year 2023 filed online?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "boolean",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df[(df['Incident Day of Week'] == 'Monday')].shape[0] == df[(df['Incident Day of Week'] == 'Monday') & (df['Resolution'] == 'NONE')].shape[0]",
    "question": "Are all incidents reported on Mondays resolved?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "boolean",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df.loc[(df['Police District'] == 'Central') & (df['Supervisor District'] == '5')].shape[0] > 0)",
    "question": "Do any incidents reported in Police District 'Central' fall in Supervisor District 5?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "boolean",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df.duplicated(subset=['Latitude', 'Longitude'], keep=False).any())",
    "question": "Are there any incidents that occurred at the same latitude and longitude more than once?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "boolean",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "49",
    "df_func": "df['Incident Category'].nunique()",
    "question": "How many unique types of incident categories are there in the dataset?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "number",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "11",
    "df_func": "df['Police District'].nunique()",
    "question": "How many different police districts are there in the dataset?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "number",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Larceny Theft",
    "df_func": "df['Incident Category'].mode().iloc[0]",
    "question": "What is the most common incident category?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "category",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Friday",
    "df_func": "df['Incident Day of Week'].value_counts().idxmax()",
    "question": "Which day of the week has the highest number of incidents?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "category",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Open or Active",
    "df_func": "df['Resolution'].mode().values[0]",
    "question": "What is the most common resolution for incidents reported online?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "category",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Central",
    "df_func": "df['Police District'].value_counts().idxmax()",
    "question": "What is the Police District with the most incidents?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "category",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[2018, 2019, 2022, 2021]",
    "df_func": "df['Incident Year'].value_counts().index[:4].tolist()",
    "question": "List the years with the top 4 highest incident counts.",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "list[number]",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[2018, 2019]",
    "df_func": "df['Incident Year'].value_counts().index[:2].tolist()",
    "question": "What are the 2 years with the highest incident counts.",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "list[number]",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['RestingBP'].gt(200).any()",
    "question": "Does any patient have a resting blood pressure above 200?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "boolean",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['HeartDisease'].isin([0]).any()",
    "question": "Are there patients without heart disease?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "boolean",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['RestingECG'] == 'Normal').all()",
    "question": "Does everyone have normal resting electrocardiographic results?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "boolean",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "77",
    "df_func": "df['Age'].max()",
    "question": "What is the maximum age of patients in the dataset?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "number",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "0",
    "df_func": "df['RestingBP'].min()",
    "question": "What is the minimum resting blood pressure among the patients?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "number",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "198.7995642701525",
    "df_func": "df['Cholesterol'].mean()",
    "question": "What is the average cholesterol level in the dataset?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "number",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "25.4603341382503",
    "df_func": "df['MaxHR'].std()",
    "question": "What is the standard deviation of maximum heart rate among the patients?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "number",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "ASY",
    "df_func": "df['ChestPainType'].value_counts().idxmax()",
    "question": "What is the most common chest pain type among patients?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "category",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "ST",
    "df_func": "df['RestingECG'].value_counts().idxmin()",
    "question": "What is the least common resting electrocardiographic result?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "category",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Flat",
    "df_func": "df.loc[df['HeartDisease'] == 1, 'ST_Slope'].mode().values[0]",
    "question": "What is the most common ST slope among patients with heart disease?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "category",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['ASY', 'NAP', 'ATA']",
    "df_func": "df['ChestPainType'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 most common chest pain types?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "list[category]",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[77, 77, 76, 76, 75]",
    "df_func": "df['Age'].sort_values(ascending=False).head(5).tolist()",
    "question": "What are the ages of the 5 oldest patients in the dataset?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "list[number]",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[0, 0, 0, 0, 0, 0]",
    "df_func": "df['Cholesterol'].nsmallest(6).tolist()",
    "question": "What are the 6 lowest cholesterol levels in the dataset?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "list[number]",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Designer'].ne('Werner Stengel').all()",
    "question": "Are all roller coasters in the dataset designed by 'Werner Stengel' removed?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "boolean",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "not df['G-force'].isnull().any()",
    "question": "Does every roller coaster have a G-force value?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "boolean",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "149.1",
    "df_func": "df['speed_mph'].max()",
    "question": "What is the maximum speed (in mph) for roller coasters in the dataset?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "number",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "47",
    "df_func": "df.loc[df['year_introduced'] == 2000].shape[0]",
    "question": "How many roller coasters were introduced in the year 2000?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "number",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "3.8240055248618785",
    "df_func": "df['Gforce_clean'].mean()",
    "question": "What is the average G-force across all roller coasters in the dataset?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "number",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "0",
    "df_func": "df[df['Designer'] == 'Edwin Madeupname'].shape[0]",
    "question": "What is the total number of roller coasters designed by 'Edwin Madeupname' in the dataset?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "number",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Intamin",
    "df_func": "df.loc[df['speed_mph'].idxmax()]['Manufacturer']",
    "question": "Which manufacturer has built the fastest roller coaster?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "category",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Wood",
    "df_func": "df.loc[df['opening_date_clean'].idxmin()]['Type_Main']",
    "question": "What type of the roller coaster is the oldest in the dataset?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "category",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Alton Towers",
    "df_func": "df.loc[df['Inversions'].idxmax()]['Location']",
    "question": "What is the location of the roller coaster with the highest number of inversions?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "category",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[149.1, 128.0, 120.0]",
    "df_func": "df['speed_mph'].nlargest(3).tolist()",
    "question": "What are the top 3 speeds (in mph) of roller coasters in the dataset?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "list[number]",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[377.3, 367.5, 318.2, 306.1]",
    "df_func": "df['height_ft'].nlargest(4).tolist()",
    "question": "What are the heights (in ft) of the top 4 tallest roller coasters?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "list[number]",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['bedrooms'] == 5).any()",
    "question": "Is there a rental property with exactly 5 bedrooms?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "boolean",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['accommodates'] > 10).any()",
    "question": "Are there any rental properties that can accommodate more than 10 guests?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "boolean",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['review_scores_rating'].eq(100).any()",
    "question": "Is there a rental property that has received a perfect review score?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "boolean",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "20776",
    "df_func": "df.shape[0]",
    "question": "How many rental properties are there in the dataset?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "number",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "18.0",
    "df_func": "df['bedrooms'].max()",
    "question": "What is the maximum number of bedrooms in a property?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "number",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "870",
    "df_func": "df['number_of_reviews'].max()",
    "question": "What is the maximum number of reviews a property has received?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "number",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "within an hour",
    "df_func": "df.loc[df['bedrooms'].idxmax()]['host_response_time']",
    "question": "What is the host response time for the property with the highest number of bedrooms?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "category",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "Entire rental unit",
    "df_func": "df.loc[df['number_of_reviews'].idxmax()]['property_type']",
    "question": "What is the property type of the listing with the most reviews?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "category",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "['previous scrape', 'city scrape']",
    "df_func": "df['source'].value_counts().nsmallest(2).index.tolist()",
    "question": "What are the 2 least common scraping sources?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "list[category]",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "[870, 822]",
    "df_func": "sorted([int(x) for x in df['number_of_reviews']], reverse=True)[:2]",
    "question": "What are the 2 numbers of reviews received by the 2 most reviewed properties?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "list[number]",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "[16, 16, 16, 16, 16]",
    "df_func": "df.nlargest(5,'accommodates')['accommodates'].tolist()",
    "question": "What are the 5 numbers of guests accommodated by the properties that can accommodate the most guests?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "list[number]",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Fruits' in df['GROUP'].tolist()",
    "question": "Is there a food item with 'Fruits' as its group?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "boolean",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "('Nuts' in df['SUB GROUP'].values)",
    "question": "Are there food items with 'Nuts' as their sub group?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "boolean",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Tilia argentea' in df['SCIENTIFIC NAME'].values",
    "question": "Is there a food item with scientific name 'Tilia argentea'?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "boolean",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Angelica' in df['FOOD NAME'].values",
    "question": "Is 'Angelica' listed as a food name in the dataset?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "boolean",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "906",
    "df_func": "df['FOOD NAME'].nunique()",
    "question": "How many food items are there in the dataset?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "number",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "24",
    "df_func": "df['GROUP'].nunique()",
    "question": "How many unique food groups are there in the dataset?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "number",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "123",
    "df_func": "df['SUB GROUP'].nunique()",
    "question": "How many unique sub groups are there in the dataset?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "number",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "906",
    "df_func": "df['FOOD NAME'].nunique()",
    "question": "How many unique food items are there in the dataset?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "number",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Fruits",
    "df_func": "df.loc[df['FOOD NAME'] == 'Kiwi', 'GROUP'].values[0]",
    "question": "What is the group of the food named 'Kiwi'?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "category",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Herbs",
    "df_func": "df.loc[df['SCIENTIFIC NAME'] == 'Tilia argentea', 'SUB GROUP'].iloc[0]",
    "question": "What is the sub group of the food with scientific name 'Tilia argentea'?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "category",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Pinus edulis",
    "df_func": "df.loc[df['FOOD NAME'] == 'Colorado pinyon', 'SCIENTIFIC NAME'].iloc[0]",
    "question": "What is the scientific name of the food named 'Colorado pinyon'?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "category",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Silver linden",
    "df_func": "df.loc[df['SCIENTIFIC NAME'] == 'Tilia argentea', 'FOOD NAME'].iloc[0]",
    "question": "What is the food name of the item with scientific name 'Tilia argentea'?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "category",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Aquatic foods', 'Vegetables', 'Fruits']",
    "df_func": "df['GROUP'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 most common food groups?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "list[category]",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Teas', 'Eggs', 'Baby foods', 'Unclassified', 'Herbs and spices']",
    "df_func": "df['GROUP'].value_counts().index[-5:].tolist()",
    "question": "What are the 5 least common food groups?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "list[category]",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Fishes', 'Herbs', 'Berries', 'Tropical fruits', 'Nuts']",
    "df_func": "df['SUB GROUP'].value_counts().head(5).index.tolist()",
    "question": "What are the 5 most common sub groups?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "list[category]",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[1, 1]",
    "df_func": "df['GROUP'].value_counts().nsmallest(2).tolist()",
    "question": "What are the number of appearances of the 2 least common groups?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "list[number]",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[166, 130, 130]",
    "df_func": "df['GROUP'].value_counts().nlargest(3).tolist()",
    "question": "What are the number of appearances of the 3 most common groups?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "list[number]",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[6.0, 13.0, 10.0]",
    "df_func": "df['GROUP'].apply(len).value_counts().head(3).index.tolist()",
    "question": "What are the three most common group name lengths?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "list[number]",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Large Business' in df['Occupation'].tolist()",
    "question": "Is there a customer with 'Large Business' as their occupation?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "boolean",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'King' in df['ProductPitched'].tolist()",
    "question": "Are there customers with 'King' as their pitched product?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "boolean",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'VP' in df['Designation'].values",
    "question": "Is there a customer with designation 'VP'?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "boolean",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Unmarried' in df['MaritalStatus'].unique()",
    "question": "Is 'Unmarried' listed as a marital status in the dataset?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "boolean",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "4888",
    "df_func": "df['CustomerID'].nunique()",
    "question": "How many customers are there in the dataset?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "number",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "4",
    "df_func": "df['Occupation'].nunique()",
    "question": "How many unique occupations are there in the dataset?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "number",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "5",
    "df_func": "df['Designation'].nunique()",
    "question": "How many unique designations are there in the dataset?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "number",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "4",
    "df_func": "df['MaritalStatus'].nunique()",
    "question": "How many unique marital statuses are there in the dataset?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "number",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Salaried",
    "df_func": "df.loc[df['CustomerID']==200000, 'Occupation'].values[0]",
    "question": "What is the occupation of the customer with ID 200000?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "category",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Deluxe",
    "df_func": "df.loc[df['CustomerID'] == 200001, 'ProductPitched'].iloc[0]",
    "question": "What is the product pitched to the customer with ID 200001?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "category",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Executive",
    "df_func": "df.loc[df['CustomerID'] == 200002, 'Designation'].values[0]",
    "question": "What is the designation of the customer with ID 200002?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "category",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Divorced",
    "df_func": "df.loc[df['CustomerID'] == 200003, 'MaritalStatus'].values[0]",
    "question": "What is the marital status of the customer with ID 200003?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "category",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Salaried', 'Small Business', 'Large Business']",
    "df_func": "df['Occupation'].value_counts().head(3).index.tolist()",
    "question": "What are the 3 most common occupations?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "list[category]",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Basic', 'Deluxe']",
    "df_func": "df['ProductPitched'].value_counts().index[:2].tolist()",
    "question": "What are the top 2 most common pitched products?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "list[category]",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Salaried', 'Small Business', 'Large Business', 'Free Lancer']",
    "df_func": "df['Occupation'].value_counts().index[-4:].tolist()",
    "question": "What are the 4 least common occupations?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "list[category]",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[18.0, 18.0, 18.0, 18.0]",
    "df_func": "df.sort_values(by='Age')['Age'].head(4).tolist()",
    "question": "What are the ages of the 4 youngest customers?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "list[number]",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[9.0, 7.0, 8.0, 6.0]",
    "df_func": "df['DurationOfPitch'].value_counts().head(4).index.tolist()",
    "question": "What are the 4 most common duration of pitch?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "list[number]",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['weekday_name'].isin(['Saturday', 'Sunday'])).any()",
    "question": "Is there any entry posted on a weekend?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "boolean",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "1516",
    "df_func": "df[df['partofday']=='morning'].shape[0]",
    "question": "How many entries were posted in the morning?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "number",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "6015",
    "df_func": "df['score'].max()",
    "question": "What's the highest score received by an entry?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "number",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "339.2486205432937",
    "df_func": "df['descendants'].mean()",
    "question": "On average, how many descendants does an entry have?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "number",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "2301",
    "df_func": "df[df['season']=='Autumn'].shape[0]",
    "question": "How many entries are in the Autumn season?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "number",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Tuesday",
    "df_func": "df['weekday_name'].value_counts().idxmax()",
    "question": "Which day of the week has the most entries?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "category",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "en",
    "df_func": "df['title_gx_lang'].value_counts().index[0]",
    "question": "What is the predominant language used in titles?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "category",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Spring",
    "df_func": "df.loc[df['score'].idxmax()]['season']",
    "question": "In which season was the entry with the highest score posted?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "category",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "afternoon",
    "df_func": "df['partofday'].mode().iloc[0]",
    "question": "On which part of the day are most entries posted?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "category",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['year, work, new', 'google, web, firefox, open', 'apple, linux, rust, iphone', 'facebook, twitter, die, account']",
    "df_func": "df['Clusters II'].value_counts().head(4).index.tolist()",
    "question": "List the top 4 most frequent terms in the \"Clusters II\" column.",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "list[category]",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['December', 'July']",
    "df_func": "df['month_name'].value_counts().index[-2:].tolist()",
    "question": "Name the 2 month names which appear less in the dataset.",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "list[category]",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Tuesday', 'Wednesday', 'Thursday']",
    "df_func": "df['weekday_name'].value_counts().index[:3].tolist()",
    "question": "Identify the top 3 weekdays based on entry frequency.",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "list[category]",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Spring', 'Winter', 'Autumn', 'Summer']",
    "df_func": "df['season'].value_counts().index[-4:].tolist()",
    "question": "Provide the bottom 4 seasons in terms of entry count.",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "list[category]",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[6015, 5771, 4338]",
    "df_func": "df['score'].nlargest(3).tolist()",
    "question": "List the top 3 scores in the dataset.",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "list[number]",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[1.0, 2.0, 2.0, 2.0, 2.0]",
    "df_func": "df['title_gx_text_length'].nsmallest(5).tolist()",
    "question": "Name the bottom 5 title text lengths.",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "list[number]",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[4576.0, 3678.0, 3676.0, 3463.0]",
    "df_func": "df['descendants'].nlargest(4).tolist()",
    "question": "Identify the top 4 numbers of descendants.",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "list[number]",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[501, 501, 501, 501, 501, 501]",
    "df_func": "df['score'].nsmallest(6).tolist()",
    "question": "Provide the bottom 6 scores in the dataset.",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "list[number]",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Number of Projects'] > 7).any()",
    "question": "Are there any employees with more than 7 projects?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "boolean",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Satisfaction Level'].gt(0.5).all()",
    "question": "Are all satisfaction levels above 0.5?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "boolean",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "10",
    "df_func": "df['Department'].nunique()",
    "question": "How many unique departments are there?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "number",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "10",
    "df_func": "df['Years in the Company'].max()",
    "question": "What's the maximum number of years an employee has been in the company?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "number",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "sales",
    "df_func": "df['Department'].value_counts().idxmax()",
    "question": "Which department has the highest number of employees?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "category",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "low",
    "df_func": "df['salary'].value_counts().idxmax()",
    "question": "What's the most common salary level among employees?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "category",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "2017",
    "df_func": "df['Date Hired'].dt.year.value_counts().idxmax()",
    "question": "Which year had the highest number of employees hired?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "category",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['sales', 'technical', 'support', 'IT']",
    "df_func": "df['Department'].value_counts().head(4).index.tolist()",
    "question": "Name the top 4 departments with the most employees.",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "list[category]",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['accounting', 'hr', 'technical']",
    "df_func": "df.groupby('Department')['Satisfaction Level'].mean().nsmallest(3).index.tolist()",
    "question": "Identify the 3 departments with the lowest average satisfaction levels.",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "list[category]",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['hr', 'marketing']",
    "df_func": "df.groupby(\"Department\")[\"Average Monthly Hours\"].mean().nsmallest(2).index.tolist()",
    "question": "What are the 2 departments with the lowest average monthly hours worked?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "list[category]",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Destroyed' in df['Aircaft_Damage_Type'].unique()",
    "question": "Did any incident result in the total destruction of the aircraft?",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "boolean",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "3523",
    "df_func": "df['Aircaft_Model'].nunique()",
    "question": "How many unique aircraft models are in the dataset?",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "number",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Junkers Ju-52/3m",
    "df_func": "df['Aircaft_Model'].value_counts().idxmax()",
    "question": "Which aircraft model was involved in the most incidents?",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "category",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "En route (ENR)",
    "df_func": "df['Aircraft_Phase'].value_counts().index[0]",
    "question": "What is the most common phase of aircraft during incidents?",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "category",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Info-Unavailable', 'Result - Runway excursion', 'Result - Damaged on the ground']",
    "df_func": "df['Incident_Cause(es)'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 most common causes of incidents?",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "list[category]",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['USAAF', 'USAF']",
    "df_func": "df['Aircaft_Operator'].value_counts().index[:2].tolist()",
    "question": "Name the 2 most frequently occurring aircraft operators in the dataset.",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "list[category]",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Damaged beyond repair', 'Substantial']",
    "df_func": "df['Aircaft_Damage_Type'].value_counts().index[:2].tolist()",
    "question": "What are the top 2 most common types of aircraft damage?",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "list[category]",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Precio'].max() > 1000000",
    "question": "Are there any properties with a price over 1,000,000?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "boolean",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Habitaciones'].max() > 10",
    "question": "Any property with more than 10 bedrooms?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "boolean",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Baños'] == 0).any()",
    "question": "Are there properties with zero bathrooms?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "boolean",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Duración'] > 100).any()",
    "question": "Has any property been listed for more than 100 days?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "boolean",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "26026",
    "df_func": "df.shape[0]",
    "question": "What's the total number of properties listed?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "number",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "Piso",
    "df_func": "df['Tipo'].value_counts().idxmax()",
    "question": "What's the most common type of property listed?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "category",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "housell",
    "df_func": "df['Anunciante'].value_counts().index[0]",
    "question": "Which advertiser has listed the most properties?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "category",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "IF5563-FINCA VALLE LOZOYA",
    "df_func": "df.loc[df['Superficie'].idxmax()]['Referencia']",
    "question": "Which property has the largest surface area?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "category",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['Piso', 'Chalet', 'Apartamento', 'Chalet adosado', 'Chalet unifamiliar']",
    "df_func": "df['Tipo'].value_counts().index[:5].tolist()",
    "question": "What are the five types of properties more frequently listed?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "list[category]",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['Piso', 'Chalet']",
    "df_func": "df['Tipo'].value_counts().index[:2].tolist()",
    "question": "What are the 2 types of properties which are listed more frequently?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "list[category]",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['Madrid Capital', 'Torrejón de Ardoz']",
    "df_func": "df['Localidad'].value_counts().head(2).index.tolist()",
    "question": "What are the 2 most common localities for properties listed?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "list[category]",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['Centro', 'Salamanca']",
    "df_func": "df['Distrito'].value_counts().head(2).index.tolist()",
    "question": "What are the 2 most common districts for properties listed?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "list[category]",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "[20, 20, 20, 20, 20, 20]",
    "df_func": "df['Habitaciones'].nlargest(6).tolist()",
    "question": "What are the 6 highest numbers of bedrooms in properties listed?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "list[number]",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df[df['MonthlyCharges'] > 80].shape[0] > 2000",
    "question": "Are there more than 2000 customers with a monthly charge higher than $80?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "boolean",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['InternetService'] == 'No').any()",
    "question": "Are there any customers with no internet service?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "boolean",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "7043",
    "df_func": "df['customerID'].nunique()",
    "question": "How many unique customers are there in the dataset?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "number",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "118.75",
    "df_func": "df['MonthlyCharges'].max()",
    "question": "What's the highest monthly charge?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "number",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "7043",
    "df_func": "df.shape[0]",
    "question": "What's the total number of customers?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "number",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "72",
    "df_func": "df['tenure'].max()",
    "question": "What's the longest tenure?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "number",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Electronic check",
    "df_func": "df['PaymentMethod'].mode().values[0]",
    "question": "What's the most common payment method?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "category",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Month-to-month",
    "df_func": "df['Contract'].mode().iloc[0]",
    "question": "What's the most common contract type?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "category",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "2889-FPWRM",
    "df_func": "df.loc[df['TotalCharges'].idxmax()]['customerID']",
    "question": "Which customer has the highest total charge?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "category",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "7569-NMZYQ",
    "df_func": "df.loc[df['MonthlyCharges'].idxmax()]['customerID']",
    "question": "Which customer has the highest monthly charge?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "category",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Fiber optic', 'DSL', 'No']",
    "df_func": "df['InternetService'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 most common internet services?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "list[category]",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)']",
    "df_func": "df['PaymentMethod'].value_counts().head(4).index.tolist()",
    "question": "Name the 4 most common payment methods.",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "list[category]",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Month-to-month', 'Two year']",
    "df_func": "df['Contract'].value_counts().index[:2].tolist()",
    "question": "What are the 2 most common types of contract?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "list[category]",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['No', 'Yes']",
    "df_func": "df['MultipleLines'].value_counts().head(2).index.tolist()",
    "question": "What are the 2 most common services for which customers have multiple lines?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "list[category]",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[8684.8, 8672.45, 8670.1, 8594.4, 8564.75]",
    "df_func": "df['TotalCharges'].nlargest(5).tolist()",
    "question": "What are the 5 highest total charges?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "list[number]",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[118.75, 118.65, 118.6, 118.6]",
    "df_func": "sorted(df['MonthlyCharges'], reverse=True)[:4]",
    "question": "What are the 4 highest monthly charges?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "list[number]",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[72, 72, 72, 72, 72, 72]",
    "df_func": "sorted(df['tenure'], reverse=True)[:6]",
    "question": "What are the 6 longest tenures?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "list[number]",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['review_scores_rating'] == 100).any()",
    "question": "Is there a listing with a review score rating of 100?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "boolean",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['host_total_listings_count'] > 10).any()",
    "question": "Are there any hosts who have listed more than 10 properties?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "boolean",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['minimum_nights'] >= 365).any()",
    "question": "Is there a listing that requires a minimum of 365 nights?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "boolean",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "26765",
    "df_func": "df['host_id'].nunique()",
    "question": "How many unique hosts are there in the dataset?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "number",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "2739.0",
    "df_func": "df['host_total_listings_count'].max()",
    "question": "What is the highest number of listings a single host has?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "number",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "1316",
    "df_func": "df['host_location'].nunique()",
    "question": "How many unique locations are listed by the hosts?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "number",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "New York, New York, United States",
    "df_func": "df['host_location'].value_counts().idxmax()",
    "question": "What is the most common host location?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "category",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "Walk to UN, Macy's & Empire State B",
    "df_func": "df.loc[df['bedrooms'].idxmax()]['name']",
    "question": "What is the name of the listing with the most bedrooms?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "category",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "Entire apartment",
    "df_func": "df['property_type'].mode().values[0]",
    "question": "What is the most common property type?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "category",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['New York, New York, United States', 'US', 'Brooklyn, New York, United States', 'Queens, New York, United States', 'Los Angeles, California, United States', 'Bronx, New York, United States']",
    "df_func": "df['host_location'].value_counts().head(6).index.tolist()",
    "question": "What are the top 6 unique host locations with the most listings?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "list[category]",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['New York, New York, United States', 'US']",
    "df_func": "df['host_location'].value_counts().index[:2].tolist()",
    "question": "What are the 2 unique host locations with the most listings?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "list[category]",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['Entire apartment', 'Private room in apartment']",
    "df_func": "df['property_type'].value_counts().index[:2].tolist()",
    "question": "What are the 2 most common types of properties?.",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "list[category]",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "[1, 1, 1, 1, 1]",
    "df_func": "df['minimum_nights'].nsmallest(5).tolist()",
    "question": "What are the 5 lowest number of minimum nights required?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "list[number]",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[(df['tmin'] < 0) & (df['prec'] == 0)]).shape[0] > 0",
    "question": "Was there a day when the minimum temperature was below zero and it didn't rain?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "boolean",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['sol'] > 10).any() and (df['tmax'] < 20).any()",
    "question": "Are there records where the solar radiation exceeds 10 but the maximum temperature was below 20?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "boolean",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "5500",
    "df_func": "df[df['tmax'] > 30].shape[0]",
    "question": "How many days had a maximum temperature above 30 degrees?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "number",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "32.2",
    "df_func": "df['racha'].max()",
    "question": "What's the highest wind speed ever recorded?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "number",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Friday",
    "df_func": "df.loc[df['tmax'].idxmax()]['weekday_name']",
    "question": "On which weekday did the highest temperature ever occur?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "category",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Summer",
    "df_func": "df.groupby('season')['sol'].mean().idxmax()",
    "question": "In which season do we find the highest average solar radiation?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "category",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "October",
    "df_func": "df.groupby('month_name')['velmedia'].mean().idxmin()",
    "question": "Which month had the lowest average wind speed?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "category",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['July', 'August', 'June']",
    "df_func": "df.groupby('month_name')['tmax'].mean().sort_values(ascending=False).head(3).index.tolist()",
    "question": "What are the top 3 months with the highest average maximum temperatures?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "list[category]",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Friday', 'Sunday', 'Saturday', 'Thursday', 'Wednesday']",
    "df_func": "df.groupby('weekday_name')['prec'].sum().sort_values(ascending=False).head(5).index.tolist()",
    "question": "Which are the 5 weekdays with the most rain, ranked from highest to lowest?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "list[category]",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Summer', 'Spring', 'Autumn', 'Winter']",
    "df_func": "df.groupby('season')['sol'].mean().sort_values(ascending=False).index.tolist()",
    "question": "List the 4 seasons ranked by average solar radiation, from highest to lowest.",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "list[category]",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['January', 'December']",
    "df_func": "df.groupby('month_name')['tmin'].mean().nsmallest(2).index.tolist()",
    "question": "Which 2 months recorded the lowest average minimum temperatures?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "list[category]",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[40.7, 40.6, 40.0, 40.0, 40.0]",
    "df_func": "df['tmax'].nlargest(5).tolist()",
    "question": "List the top 5 recorded maximum temperatures.",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "list[number]",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[0.0, 0.0, 0.0, 0.0]",
    "df_func": "df['velmedia'].nsmallest(4).tolist()",
    "question": "What are the 4 lowest wind speeds ever recorded?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "list[number]",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[209, 210, 208, 207, 211, 205]",
    "df_func": "df.groupby('dayofyear')['tmed'].mean().nlargest(6).index.tolist()",
    "question": "Which 6 days of the year (numbered from 1 to 365/366) had the highest average temperatures?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "list[number]",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['RETRINOIN_xRZI'] > 10000).any()",
    "question": "Are there records where the RETRINOIN_xRZI exceeds 10,000?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "boolean",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "((df['CONTROL'] == 'PRIVADO') & (df['MERCADO'] == 'NACIONAL')).any()",
    "question": "Do we have respondents who fall under both PRIVADO control and NACIONAL market?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "boolean",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['RETRINOIN_WwQk'] < 5000).any()",
    "question": "Are there records with RETRINOIN_WwQk less than 5,000?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "boolean",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "199496.34",
    "df_func": "df['RETRINOIN_ac1q'].max()",
    "question": "What's the highest value for RETRINOIN_ac1q in the dataset?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "number",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "73",
    "df_func": "df['umap_cluster'].nunique()",
    "question": "How many unique clusters are present in the 'umap_cluster' column?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "number",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "DE 40 A 49",
    "df_func": "df['ANOS2'].value_counts().idxmax()",
    "question": "Which 'ANOS2' category has the most number of respondents?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "category",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "COMUNIDAD DE MADRID",
    "df_func": "df.groupby('NUTS1')['RETRINOIN'].mean().idxmax()",
    "question": "In which 'NUTS1' region do we find the highest average RETRINOIN?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "category",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "UNIÓN EUROPEA",
    "df_func": "df['MERCADO'].value_counts().idxmin()",
    "question": "Which 'MERCADO' category is the least common in the dataset?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "category",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Cluster 1",
    "df_func": "df['umap_cluster'].value_counts().idxmax()",
    "question": "Which 'umap_cluster' is the most dominant in the dataset?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "category",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['ESTE', 'COMUNIDAD DE MADRID', 'NORESTE', 'SUR', 'CENTRO']",
    "df_func": "df['NUTS1'].value_counts().head(5).index.tolist()",
    "question": "List the top 5 'NUTS1' regions by frequency.",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "list[category]",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Cluster 71', 'Cluster 73']",
    "df_func": "df['umap_cluster'].value_counts().nsmallest(2).index.tolist()",
    "question": "Which 2 'umap_cluster' categories are the least represented?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "list[category]",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[4225998.36, 4153877.05, 4021902.63, 3903390.45, 2192967.2]",
    "df_func": "df['RETRINOIN'].nlargest(5).tolist()",
    "question": "List the top 5 recorded RETRINOIN values.",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "list[number]",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[-23714.217, -23706.5, -23698.271, -23697.166]",
    "df_func": "df['x'].nsmallest(4).tolist()",
    "question": "What are the 4 lowest x values in the dataset?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "list[number]",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[28352.02, 28313.926]",
    "df_func": "df['y'].nlargest(2).tolist()",
    "question": "What are the largest 2 y values in the dataset?.",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "list[number]",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'no code data science' in df['Keyword'].iloc[0]",
    "question": "Is the most visited URL related to 'no code data science'?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "boolean",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Competition'] == 'Low').any()",
    "question": "Does any URL have a competition level of 'Low'?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "boolean",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Avg. monthly searches'] > 1000).any()",
    "question": "Are there any URLs with an average monthly searches above 1000?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "boolean",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['Ranking'].idxmin()]['Avg. monthly searches'] == df['Avg. monthly searches'].max()",
    "question": "Is the URL with the lowest ranking also the one with the highest monthly searches?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "boolean",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "28",
    "df_func": "df['URLs'].nunique()",
    "question": "How many unique URLs are in the dataset?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "number",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "50",
    "df_func": "df['Avg. monthly searches'].min()",
    "question": "What is the minimum average monthly searches in the dataset?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "number",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "6",
    "df_func": "df['Keyword'].nunique()",
    "question": "How many unique keywords are present in the dataset?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "number",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "no code data science",
    "df_func": "df.loc[df['Avg. monthly searches'].idxmax()]['Keyword']",
    "question": "What keyword has the highest average monthly searches?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "category",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "no code data science",
    "df_func": "df.loc[df['Ranking'].idxmin()]['Keyword']",
    "question": "What keyword is associated with the URL with the lowest ranking?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "category",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[50, 50]",
    "df_func": "df.nsmallest(2, 'Avg. monthly searches')['Avg. monthly searches'].tolist()",
    "question": "Specify the bottom 2 average monthly searches for URLs with the highest rankings.",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "list[number]",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['quality'] == 10).any()",
    "question": "Is there any wine with a quality rating of 10?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "boolean",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['residual sugar'].max() > 15",
    "question": "Are there any wines with residual sugar above 15g/dm^3?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "boolean",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['alcohol'].idxmax()]['quality'] == df['quality'].max()",
    "question": "Is the highest alcohol content wine also the one with the highest quality rating?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "boolean",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['pH'] < 2.5).any()",
    "question": "Does any wine have a pH level below 2.5?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "boolean",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "6",
    "df_func": "df['quality'].nunique()",
    "question": "How many unique quality ratings are there in the dataset?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "number",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "15.9",
    "df_func": "df['fixed acidity'].max()",
    "question": "What is the maximum fixed acidity level found in the dataset?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "number",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "0.12",
    "df_func": "df['volatile acidity'].min()",
    "question": "What is the minimum volatile acidity level in the dataset?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "number",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "16",
    "df_func": "len(df[df['free sulfur dioxide'] > 50])",
    "question": "How many wines have free sulfur dioxide above 50 mg/dm^3?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "number",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Total'] > 1000).any()",
    "question": "Is there any purchase with a total cost above 1000?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "boolean",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Cash' in df['Payment'].values",
    "question": "Are there any customers who made a purchase using cash?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "boolean",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['Total'].idxmax()]['Customer type'] == 'Member'",
    "question": "Is the customer with the highest total purchase cost a 'Member'?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "boolean",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "3",
    "df_func": "df['Branch'].nunique()",
    "question": "How many unique branches are there in the dataset?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "number",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "10",
    "df_func": "df['Quantity'].max()",
    "question": "What is the maximum quantity of products bought in a single purchase?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "number",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "10.6785",
    "df_func": "df['Total'].min()",
    "question": "What is the minimum total cost of a purchase in the dataset?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "number",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "340",
    "df_func": "df[df['City'] == 'Yangon'].shape[0]",
    "question": "How many purchases were made in Yangon city?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "number",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Credit card",
    "df_func": "df.loc[df['Total'].idxmax()]['Payment']",
    "question": "What is the payment method used for the purchase with the highest total cost?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "category",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Fashion accessories",
    "df_func": "df.loc[df['Total'].idxmax()]['Product line']",
    "question": "What is the product line of the purchase with the highest total cost?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "category",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Member",
    "df_func": "df.loc[df['Total'].idxmin()]['Customer type']",
    "question": "What is the customer type of the purchase with the lowest total cost?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "category",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Female",
    "df_func": "df.loc[df['Total'].idxmax()]['Gender']",
    "question": "What is the gender of the customer with the highest total purchase cost?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "category",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Credit card', 'Credit card', 'Ewallet']",
    "df_func": "df.loc[df['Total'].nlargest(3).index]['Payment'].tolist()",
    "question": "List the payment methods of the top 3 purchases with the highest total cost.",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "list[category]",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Sports and travel', 'Fashion accessories']",
    "df_func": "df.nsmallest(2, 'Total')['Product line'].tolist()",
    "question": "Enumerate the product lines of the bottom 2 purchases with the lowest total cost.",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "list[category]",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Member', 'Normal', 'Member', 'Normal', 'Normal']",
    "df_func": "df.nlargest(5, 'Total')['Customer type'].tolist()",
    "question": "Which are the customer types of the top 5 purchases with the highest total cost?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "list[category]",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Male', 'Female', 'Female', 'Male']",
    "df_func": "df.nsmallest(4, 'Total').loc[:,'Gender'].tolist()",
    "question": "List the genders of the bottom 4 purchases with the lowest total cost.",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "list[category]",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[10, 10, 10, 10]",
    "df_func": "df.nlargest(4, 'Total')['Quantity'].tolist()",
    "question": "What are the quantities of products bought in the top 4 purchases with the highest total cost?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "list[number]",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[10.17, 12.09, 12.54]",
    "df_func": "df.nsmallest(3, 'Total')['Unit price'].tolist()",
    "question": "List the unit prices of the bottom 3 purchases with the lowest total cost.",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "list[number]",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[0.5085, 0.6045]",
    "df_func": "df.nsmallest(2, 'Total')['gross income'].tolist()",
    "question": "Provide the gross incomes of the bottom 2 purchases with the lowest total cost.",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "list[number]",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['Glucose'].idxmax()]['Outcome'] == 1",
    "question": "Does the person with the highest glucose level also have diabetes?",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "boolean",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "17",
    "df_func": "df['Pregnancies'].max()",
    "question": "What is the maximum number of pregnancies recorded in the dataset?",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "number",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "0",
    "df_func": "df['BloodPressure'].min()",
    "question": "What is the minimum blood pressure level recorded in the dataset?",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "number",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "31.992578124999998",
    "df_func": "df['BMI'].mean()",
    "question": "What is the average BMI recorded in the dataset?",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "number",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[1, 1, 1]",
    "df_func": "df.nlargest(3, 'Pregnancies')['Outcome'].tolist()",
    "question": "List the diabetes outcomes of the top 3 individuals with the highest number of pregnancies.",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "list[category]",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[0, 0, 0, 0]",
    "df_func": "df.sort_values('BloodPressure').head(4)['Outcome'].tolist()",
    "question": "List the diabetes outcomes of the bottom 4 individuals with the lowest blood pressure.",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "list[category]",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[189, 197]",
    "df_func": "df.nlargest(2, 'Insulin')['Glucose'].tolist()",
    "question": "Provide the glucose levels of the 2 individuals with the highest insulin levels.",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "list[number]",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "'United States Politics and Government' in df.loc[df['headline'].str.len().idxmax()]['keywords']",
    "question": "Does the article with the longest headline contain the keyword 'United States Politics and Government'?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "boolean",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "'2021-01-05' in df['date'].values",
    "question": "Is there any article published on '2021-01-05'?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "boolean",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "News",
    "df_func": "df.loc[df['headline'].str.len().idxmin()]['material_type']",
    "question": "What is the material type of the article with the shortest headline?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "category",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "News",
    "df_func": "df.loc[df['keywords'].str.len().idxmax()]['material_type']",
    "question": "What is the material type of the article with the most number of keywords?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "category",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['What programming language would you recommend an aspiring data scientist to learn first?'] == 'Python').all()",
    "question": "Do all participants recommend Python as the first programming language?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "boolean",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?'].str.contains('AWS').sum() > 1000",
    "question": "Are there more than 1000 participants who hope to become familiar with AWS in the next 2 years?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "boolean",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "14",
    "df_func": "df['Select the title most similar to your current role (or most recent title if retired)'].nunique()",
    "question": "How many unique job titles are represented in the dataset?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "number",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "1.5",
    "df_func": "df['(Average) For how many years have you used machine learning methods?'].median()",
    "question": "What's the median of the average number of years participants have used machine learning methods?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "number",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "United States of America",
    "df_func": "df.groupby('In which country do you currently reside?').size().sort_values(ascending=False).index[1]",
    "question": "Which country has the second highest number of participants?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "category",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Data Scientist",
    "df_func": "df['Select the title most similar to your current role (or most recent title if retired)'].mode().values[0]",
    "question": "Which title is the most common among participants?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "category",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['Data Scientist', 'Software Engineer', 'Other', 'Data Analyst']",
    "df_func": "df['Select the title most similar to your current role (or most recent title if retired)'].value_counts().index[:4].tolist()",
    "question": "list the top 4 most common job titles.",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "list[category]",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['25-29', '30-34', '22-24', '35-39']",
    "df_func": "df['What is your age (years)?'].value_counts().head(4).index.tolist()",
    "question": "Report the top 4 age ranges of participants by frequency",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "list[number]",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['0-49 employees', '10,000 or more employees', '1000-9,999 employees', '50-249 employees', '250-999 employees']",
    "df_func": "df['What is the size of the company where you are employed?'].value_counts().head(5).index.tolist()",
    "question": "Report the 5 most common sizes of the company where participants work.",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "list[category]",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df.loc[(df['country_code'] == 'GB') & (df['rating'] == 5)].shape[0] > df.loc[(df['country_code'] == 'US') & (df['rating'] == 5)].shape[0])",
    "question": "Are there more reviews with rating 5 from 'GB' than 'US'?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "boolean",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[(df['country_code'] == 'GB') & (df['Company'] == 'Wise'), 'rating'].mean() > 4",
    "question": "Is the average rating for 'Wise' in 'GB' above 4?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "boolean",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['country_code'].eq('AO').any()",
    "question": "Do any reviews originate from 'AO'?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "boolean",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['rating'] == 1).any()",
    "question": "Did any reviews receive a rating of 1?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "boolean",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "3840",
    "df_func": "df[df['Company'] == 'Wise'].shape[0]",
    "question": "What's the total number of reviews for 'Wise'?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "number",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "5",
    "df_func": "df['rating'].max()",
    "question": "What is the highest rating received?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "number",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "4.097755610972569",
    "df_func": "df['rating'].mean()",
    "question": "What's the average rating across all reviews?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "number",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Wise",
    "df_func": "df.loc[df['rating'] == 5, 'Company'].value_counts().index[0]",
    "question": "Which company received the most 5-star reviews?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "category",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "GB",
    "df_func": "df[df['Company'] == 'Wise'].groupby('country_code').size().idxmax()",
    "question": "From which country did 'Wise' receive the most reviews?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "category",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "CW",
    "df_func": "df['country_code'].value_counts().idxmin()",
    "question": "Which country had the lowest representation in the reviews?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "category",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['GB', 'US', 'ES']",
    "df_func": "df[df['Company'] == 'Wise'][df['rating'] == 5]['country_code'].value_counts().head(3).index.tolist()",
    "question": "Which are the top 3 countries with the most 5-star reviews for 'Wise'?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "list[category]",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Wise', 'N26']",
    "df_func": "df['Company'].unique().tolist()",
    "question": "Which are the 2 companies represented in the dataset?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "list[category]",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[5, 1, 4]",
    "df_func": "df['rating'].value_counts().nlargest(3).index.tolist()",
    "question": "What are the 3 most common ratings?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "list[number]",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "('PhD' in df['Education'].values)",
    "question": "Is there any customer with a PhD education level?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "boolean",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Marital_Status'] == 'Married').any()",
    "question": "Do we have any customers who are married?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "boolean",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Income'] > 100000).any()",
    "question": "Is there any customer with income higher than 100000?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "boolean",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['NumWebPurchases'] > 10).any()",
    "question": "Has any customer made more than 10 web purchases?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "boolean",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "2240",
    "df_func": "df['ID'].nunique()",
    "question": "How many customers do we have in the dataset?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "number",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "52247.25135379061",
    "df_func": "df['Income'].mean()",
    "question": "What's the average income of our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "number",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "27",
    "df_func": "df['NumWebPurchases'].max()",
    "question": "What's the maximum number of web purchases made by a customer?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "number",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "0",
    "df_func": "df['Recency'].min()",
    "question": "What's the minimum recency of purchase among the customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "number",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Graduation",
    "df_func": "df['Education'].mode().values[0]",
    "question": "What's the most common education level among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "category",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Married",
    "df_func": "df['Marital_Status'].mode().iloc[0]",
    "question": "What's the most common marital status among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "category",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "9432",
    "df_func": "df.loc[df['Income'].idxmax()]['ID']",
    "question": "Who is the customer with the highest income?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "category",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[9432, 1503, 1501]",
    "df_func": "df.nlargest(3, 'Income')['ID'].tolist()",
    "question": "Who are the 3 customers with the highest income?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "list[category]",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Graduation', 'PhD']",
    "df_func": "df['Education'].value_counts().index[:2].tolist()",
    "question": "What are the 2 most common education levels among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "list[category]",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Married', 'Together', 'Single']",
    "df_func": "df['Marital_Status'].value_counts().head(3).index.tolist()",
    "question": "What are the 3 most common marital statuses among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "list[category]",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[5255, 4619, 10311]",
    "df_func": "df.sort_values(by='NumWebPurchases', ascending=False).iloc[:3]['ID'].tolist()",
    "question": "Who are the 3 customers with the most web purchases?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "list[category]",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[666666.0, 162397.0, 160803.0]",
    "df_func": "df['Income'].nlargest(3).tolist()",
    "question": "What are the top 3 income values among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "list[number]",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[99, 99]",
    "df_func": "df['Recency'].nlargest(2).tolist()",
    "question": "What are the top 2 recency values among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "list[number]",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[1730.0, 2447.0, 3502.0]",
    "df_func": "df['Income'].nsmallest(3).tolist()",
    "question": "What are the bottom 3 income values among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "list[number]",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[0, 0]",
    "df_func": "df['Recency'].nsmallest(2).tolist()",
    "question": "What are the bottom 2 recency values among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "list[number]",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Average Monthly Hours'] > 100).any()",
    "question": "Is there any employee with more than 100 hours per month on average?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "boolean",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Satisfaction Level'] > 0.9).any()",
    "question": "Does any employee have a satisfaction level above 0.9?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "boolean",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "14999",
    "df_func": "len(df.index)",
    "question": "How many employees do we have in the dataset?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "number",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "0.64",
    "df_func": "df['Satisfaction Level'].median()",
    "question": "What's the median satisfaction level of our employees?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "number",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Together",
    "df_func": "df['Marital_Status'].mode().iloc[0]",
    "question": "What's the most common marital status among the employees?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "number",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['No', 'Yes']",
    "df_func": "df['Work Accident'].value_counts().head(2).index.tolist()",
    "question": "What are the top 2 most common Work Accident statuses among our employees?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "list[category]",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Together', 'Single', 'Married']",
    "df_func": "df['Marital_Status'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 most common marital statuses among our employees?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "list[category]",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[10, 10, 10]",
    "df_func": "df['Years in the Company'].nlargest(3).tolist()",
    "question": "What are the highest 3 years spent in the company? ",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "list[number]",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['sales', 'technical', 'support']",
    "df_func": "df[df['salary'] =='medium']['Department'].value_counts().head(3).index.tolist()",
    "question": "What are the 3 departments with more 'medium' salary levels?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "list[category]",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Ladder score'] > 7.5).any() and (df['Generosity'] > 0.2).any() and (df['Social support'] > 0.7).any()",
    "question": "Is there any country with a Ladder score above 7.5, a Generosity score above 0.2, and a Social support score above 0.7?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "boolean",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[(df['Regional indicator'] == 'Western Europe') & (df['Perceptions of corruption'] > 0.5) & (df['Ladder score'] > 7) & (df['Social support'] > 0.7)]).shape[0] > 0",
    "question": "Are there any countries in Western Europe with a Perceptions of corruption score above 0.5, a Ladder score above 7, and a Social support score above 0.7?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "boolean",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Social support'] < 0.5).any()",
    "question": "Is there any country with a Social support score below 0.5?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "boolean",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "7.222675085250001",
    "df_func": "df[(df['Regional indicator'] == 'Western Europe') & (df['Generosity'] > 0.2) & (df['Social support'] > 0.7)]['Ladder score'].mean()",
    "question": "What's the average Ladder score among the countries in Western Europe with a Generosity score above 0.2 and a Social support score above 0.7?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "number",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "0.7493706045",
    "df_func": "df[(df['Regional indicator'] == 'Sub-Saharan Africa') & (df['Ladder score'] < 5) & (df['Social support'] < 0.5)]['Perceptions of corruption'].mean()",
    "question": "What's the average Perceptions of corruption score among the countries in Sub-Saharan Africa with a Ladder score below 5 and a Social support score below 0.5?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "number",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "0.560663998",
    "df_func": "df['Generosity'].max()",
    "question": "What's the maximum Generosity score among the countries?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "number",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "0.319459856",
    "df_func": "df['Social support'].min()",
    "question": "What's the minimum Social support score among the countries?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "number",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Western Europe",
    "df_func": "df.loc[(df['Ladder score'] > 7) & (df['Generosity'] > 0.2), 'Regional indicator'].value_counts().idxmax()",
    "question": "Which region has the highest number of countries with a Ladder score above 7 and a Generosity score above 0.2?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "category",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Western Europe",
    "df_func": "df.loc[df['Generosity'] > 0.2, 'Regional indicator'].value_counts().idxmax()",
    "question": "Which region accounts for the most countries with a Generosity score above 0.2?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "category",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Western Europe",
    "df_func": "df.loc[df['Perceptions of corruption']<0.5]['Regional indicator'].mode().values[0]",
    "question": "In which region are the majority of countries with a Perceptions of corruption score below 0.5 located?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "category",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Western Europe",
    "df_func": "df.loc[df['Social support'] > 0.7]['Regional indicator'].value_counts().idxmax()",
    "question": "In which region can you find the majority of countries with a Social support score above 0.7?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "category",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Western Europe', 'Southeast Asia', 'Sub-Saharan Africa']",
    "df_func": "df[df['Generosity'] > 0.2].groupby('Regional indicator')['Country name'].count().sort_values(ascending=False).head(3).index.tolist()",
    "question": "What are the top 3 regions with the most countries with a Generosity score above 0.2?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "list[category]",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[7.504499912, 7.448900223, 7.164500237]",
    "df_func": "df[(df['Regional indicator'] == 'Western Europe') & (df['Generosity'] > 0.2) & (df['Social support'] > 0.7)].sort_values(by='Ladder score', ascending=False)['Ladder score'].head(3).tolist()",
    "question": "Identify the three highest Ladder scores from countries in Western Europe that have a Generosity score above 0.2 and a Social support score above 0.7.",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "list[number]",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[0.891806662, 0.861874342, 0.861330688]",
    "df_func": "df[df['Regional indicator'] == 'Sub-Saharan Africa'].sort_values(by='Perceptions of corruption', ascending=False)['Perceptions of corruption'].head(3).tolist()",
    "question": "What are the top 3 Perceptions of corruption scores among the countries in Sub-Saharan Africa?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "list[number]",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[0.263732493, 0.246944219, 0.214965805]",
    "df_func": "df.loc[df['Regional indicator'] == 'Western Europe', 'Generosity'].nlargest(3).tolist()",
    "question": "What are the top 3 Generosity scores among the countries in Western Europe?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "list[number]",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[0.910357833, 0.852532268, 0.846880972]",
    "df_func": "df.loc[df['Regional indicator'] == 'Sub-Saharan Africa', 'Social support'].nlargest(3).tolist()",
    "question": "What are the top 3 Social support scores among the countries in Sub-Saharan Africa?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "list[number]",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[5.514999866, 5.53550005, 5.910900116]",
    "df_func": "sorted(df[df['Regional indicator'] == 'Western Europe']['Ladder score'])[:3]",
    "question": "Which are the three lowest Ladder scores in Western Europe?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "list[number]",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[0.183541179, 0.606934547, 0.619799435]",
    "df_func": "df.loc[df['Regional indicator'] == 'Sub-Saharan Africa'].sort_values(by='Perceptions of corruption', ascending=True)['Perceptions of corruption'].head(3).tolist()",
    "question": "Which are the three lowest Perceptions of corruption scores in Sub-Saharan Africa?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "list[number]",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['Rank'].idxmin()]['Year'] == 1965",
    "question": "Is the song with the highest rank from 1965?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "boolean",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Rank'].idxmax()]['Artist'] == df.loc[df['Rank'].idxmin()]['Artist']",
    "question": "Is the artist of the song with the highest rank the same as the artist of the song with the lowest rank?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "boolean",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Lyrics'].isnull().any()",
    "question": "Are there songs without lyrics?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "boolean",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "100",
    "df_func": "df.loc[df['Year'] == 1965].shape[0]",
    "question": "How many songs were produced in 1965?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "number",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "1965",
    "df_func": "df.loc[df['Rank'].idxmin()]['Year']",
    "question": "In which year was the song with the highest rank produced?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "number",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "19",
    "df_func": "df.loc[df['Lyrics'].str.len().idxmax()]['Rank']",
    "question": "What's the rank of the song with the longest lyrics?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "number",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "2473",
    "df_func": "df['Artist'].nunique()",
    "question": "How many unique artists are there in the dataset?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "number",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "sam the sham and the pharaohs",
    "df_func": "df.loc[df['Rank'].idxmin()]['Artist']",
    "question": "Who is the artist of the song with the highest rank?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "category",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "the way you love me",
    "df_func": "df.loc[df['Lyrics'].str.count('love').idxmax()]['Song']",
    "question": "Which song's lyrics contain the word 'love' the most times?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "category",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "wooly bully",
    "df_func": "df.loc[df['Year'].idxmin()]['Song']",
    "question": "What is the title of the top song produced in the earliest year?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "category",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['uptown funk', 'thinking out loud', 'see you again', 'trap queen']",
    "df_func": "df[df['Year'] == df['Year'].max()].sort_values(by='Rank').head(4)['Song'].tolist()",
    "question": "What are the top 4 songs by rank produced in the most recent year?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "list[category]",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[1965, 1966, 1967, 1968]",
    "df_func": "df.nsmallest(4, 'Rank')['Year'].tolist()",
    "question": "What are the years of production of the bottom 4 ranked songs?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "list[number]",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Rank'] == df['Rank'].min()]['Artist'].iloc[0] == 'The Beatles' and df.loc[df['Rank'] == df['Rank'].min()]['Year'].iloc[0] == 1965",
    "question": "Is the song with the highest rank from 1965 by the Beatles?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "boolean",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "sam the sham and the pharaohs",
    "df_func": "df.loc[df['Year'] == 1965, 'Artist'].iloc[df.loc[df['Year'] == 1965, 'Rank'].idxmin()]",
    "question": "Which artist has the song with the highest rank in 1965?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "category",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['count'] > 20000).any()",
    "question": "Are there records where the 'count' exceeds 20,000?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "boolean",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Baldwin' in df['name_dest'].values",
    "question": "Are there destinations with the name 'Baldwin'?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "boolean",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['lat_dest'] > 60).any()",
    "question": "Are there records where the latitude of the destination is greater than 60?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "boolean",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "3219",
    "df_func": "df['dest'].nunique()",
    "question": "How many unique destinations are there in the dataset?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "number",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "67.7453798126951",
    "df_func": "df['count'].mean()",
    "question": "On average, how many times is each origin-destination pair reported?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "number",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "40580",
    "df_func": "df['count'].max()",
    "question": "What's the highest count value in the dataset?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "number",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "Fajardo",
    "df_func": "df.loc[df['lon_dest'].idxmax()]['name_dest']",
    "question": "Which destination has the highest longitude?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "category",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "[40580, 39899, 38430, 28524, 24452]",
    "df_func": "df['count'].nlargest(5).tolist()",
    "question": "List the highest 5 count values.",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "list[number]",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "[69.42718361, 69.42718361, 69.42718361]",
    "df_func": "df['lat_dest'].nlargest(3).tolist()",
    "question": "What are the 3 highest latitude values for destinations?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "list[number]",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "[-167.08526, -167.08526, -167.08526, -167.08526]",
    "df_func": "df['lon_origin'].nsmallest(4).tolist()",
    "question": "Rank the lowest 4 longitude values for origins.",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "list[number]",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "[6037, 36061, 48201, 6059, 6071, 6085]",
    "df_func": "df.groupby('dest')['count'].mean().nlargest(6).index.tolist()",
    "question": "Which 6 destination IDs have the highest average counts?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "list[number]",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['views'] > 1000000).any()",
    "question": "Are there talks with more than a million views?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "boolean",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Elon Musk' in df['speaker_1'].values",
    "question": "Is there a talk by 'Elon Musk'?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "boolean",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "3274",
    "df_func": "df['speaker_1'].nunique()",
    "question": "How many unique speakers are there in the dataset?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "number",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "2148005.5737827714",
    "df_func": "df['views'].mean()",
    "question": "What's the average number of views for the talks?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "number",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "3922",
    "df_func": "df['duration'].max()",
    "question": "What's the maximum duration of a talk (in seconds)?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "number",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "186",
    "df_func": "df[df['comments'] > 500].shape[0]",
    "question": "How many talks have more than 500 comments?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "number",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "TEDxPuget Sound",
    "df_func": "df.groupby('event')['views'].mean().idxmax()",
    "question": "Which event has the highest average views?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "category",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Richard Dawkins",
    "df_func": "df.loc[df['comments'].idxmax()]['speaker_1']",
    "question": "Which speaker's talk has the most comments?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "category",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Por qué necesitamos proteger el alta mar",
    "df_func": "df.loc[df['views'].idxmin()]['title']",
    "question": "Which talk's title has the least views?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "category",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Countdown",
    "df_func": "df.loc[df['duration'].idxmax()]['event']",
    "question": "In which event was the longest talk held?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "category",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['TEDxPuget Sound', 'TEDxHouston', 'TEDxFiDiWomen', 'TEDxUW']",
    "df_func": "df.groupby('event')['comments'].mean().sort_values(ascending=False).head(4).index.tolist()",
    "question": "Which are the top 4 events with the highest average number of comments?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "list[category]",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Alex Gendler', 'Iseult Gillespie', 'Emma Bryce']",
    "df_func": "df['speaker_1'].value_counts().sort_values(ascending=False).head(3).index.tolist()",
    "question": "List the top 3 most frequent speakers in the dataset. If two have the same count go by alphabetical order. ",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "list[category]",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['TEDxConcorde', 'Small Thing Big Idea', 'The TED Interview', 'TEDxConcordiaUPortland', 'The Way We Work']",
    "df_func": "df.groupby('event')['duration'].mean().nsmallest(5).index.tolist()",
    "question": "Which 5 events have the shortest average talk durations?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "list[category]",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['TED-Ed', 'TED2018']",
    "df_func": "df['event'].value_counts().head(2).index.tolist()",
    "question": "List 2 events with the most number of talks.",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "list[category]",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[65051954, 57074270, 56932551, 49730580]",
    "df_func": "df['views'].nlargest(4).tolist()",
    "question": "What are the top 4 most viewed talks' view counts?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "list[number]",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[60, 78, 78]",
    "df_func": "df['duration'].nsmallest(3).tolist()",
    "question": "List the 3 shortest talk durations in the dataset.",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "list[number]",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[6449.0, 4931.0, 3424.0, 3006.0, 2984.0]",
    "df_func": "df['comments'].nlargest(5).tolist()",
    "question": "What are the 5 highest number of comments?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "list[number]",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[0, 0, 0, 0, 0, 0]",
    "df_func": "df['views'].nsmallest(6).tolist()",
    "question": "List the view counts of the 6 least viewed talks.",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "list[number]",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['age'].idxmax()]['stroke'] == 1",
    "question": "Is it true that the oldest person in the dataset has a stroke?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "boolean",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df[df['smoking_status'] =='smokes']['hypertension'] == 1).all()",
    "question": "Do all smokers have hypertension?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "boolean",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['heart_disease'] == 1).eq(df['ever_married'] == 'Yes').all()",
    "question": "Are all people with heart diseases married?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "boolean",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.groupby('gender')['avg_glucose_level'].mean().iloc[0] > df.groupby('gender')['avg_glucose_level'].mean().iloc[1]",
    "question": "Is the average glucose level higher for males than females?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "boolean",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "249",
    "df_func": "df['stroke'].value_counts()[1]",
    "question": "How many people in the dataset have a stroke?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "number",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "47.09632446134347",
    "df_func": "df.loc[df['smoking_status'] =='smokes', 'age'].mean()",
    "question": "What is the average age of people who smoke?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "number",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "271.74",
    "df_func": "df['avg_glucose_level'].max()",
    "question": "What is the highest glucose level recorded in the dataset?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "number",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "5",
    "df_func": "df['work_type'].nunique()",
    "question": "How many unique 'work_type' categories are there in the dataset?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "number",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Private",
    "df_func": "df[df['stroke'] == 1]['work_type'].mode().values[0]",
    "question": "What is the most common work type among stroke patients?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "category",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Unknown",
    "df_func": "df.loc[df['age'].idxmin()]['smoking_status']",
    "question": "What is the smoking status of the youngest person in the dataset?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "category",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Rural",
    "df_func": "df.loc[df['bmi'].idxmax()]['Residence_type']",
    "question": "What is the residence type of the person with the highest BMI?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "category",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Female",
    "df_func": "df.loc[df['avg_glucose_level'].idxmin()]['gender']",
    "question": "What is the gender of the person with the lowest glucose level?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "category",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['Private', 'Self-employed', 'Govt_job']",
    "df_func": "df[df['heart_disease'] == 1]['work_type'].value_counts().index[:3].tolist()",
    "question": "What are the top 3 work types among people with heart diseases?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "list[category]",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['never smoked', 'formerly smoked', 'Unknown', 'smokes']",
    "df_func": "df.loc[df['stroke'] == 1,'smoking_status'].value_counts().head(5).index.tolist()",
    "question": "What are the 5 most common smoking statuses among people with a stroke?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "list[category]",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['Private', 'children']",
    "df_func": "df[df['ever_married'] == 'No']['work_type'].value_counts().index[:2].tolist()",
    "question": "What are the top 2 work types among people who have never married?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "list[category]",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[271.74, 254.63, 254.6, 252.72]",
    "df_func": "df[df['heart_disease'] == 1]['avg_glucose_level'].sort_values(ascending=False).head(4).tolist()",
    "question": "What are the top 4 glucose levels of people who have heart diseases?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "list[number]",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[82.0, 82.0, 82.0, 82.0, 82.0, 82.0]",
    "df_func": "df[df['ever_married'] == 'No']['age'].nlargest(6).tolist()",
    "question": "What are the 6 highest ages of people who have never married?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "list[number]",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['num_sentence'].max() > 10",
    "question": "Are there any reflections with more than 10 sentences?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "boolean",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[(df['country'] == 'USA') & (df['num_sentence'] > 5)]).empty == False",
    "question": "Is there a reflection from 'USA' with over 5 sentences?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "boolean",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'affection' in df['ground_truth_category'].values",
    "question": "Are there any reflections categorized as 'affection'?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "boolean",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "2",
    "df_func": "df['reflection_period'].nunique()",
    "question": "How many unique reflection periods are there?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "number",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "1.3407668971005122",
    "df_func": "df['num_sentence'].mean()",
    "question": "On average, how many sentences are there in the reflections?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "number",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "233.0",
    "df_func": "df['age'].max()",
    "question": "What's the highest age of an individual in the dataset?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "number",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "16729",
    "df_func": "df[df['country'] == 'IND'].shape[0]",
    "question": "How many reflections are from 'IND'?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "number",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "UKR",
    "df_func": "df.groupby('country')['num_sentence'].mean().idxmax()",
    "question": "Which country has the highest average number of sentences in their reflections?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "category",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "USA",
    "df_func": "df.loc[df['age'].idxmax()]['country']",
    "question": "From which country is the oldest individual who reflected?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "category",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "single",
    "df_func": "df['marital'].value_counts().idxmax()",
    "question": "Which marital status has the most reflections on 'bonding'?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "category",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['UKR', 'CRI', 'HKG']",
    "df_func": "df.groupby('country')['num_sentence'].mean().sort_values(ascending=False).head(3).index.tolist()",
    "question": "Which are the top 3 countries with the highest average number of sentences in their reflections?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "list[category]",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['affection', 'achievement', 'enjoy_the_moment', 'bonding']",
    "df_func": "df['predicted_category'].value_counts().head(4).index.tolist()",
    "question": "List the 4 most common predicted categories in the dataset.",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "list[category]",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['KAZ', 'ALB', 'LKA', 'MAR', 'SLV']",
    "df_func": "df.groupby('country')['age'].mean().nsmallest(5).index.tolist()",
    "question": "Which 5 countries have the youngest average age of reflectors?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "list[category]",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['m', 'f']",
    "df_func": "df['gender'].value_counts().head(2).index.tolist()",
    "question": "List 2 genders with the most number of reflections.",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "list[category]",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[1, 1, 1, 1]",
    "df_func": "df.nsmallest(4, 'num_sentence')['num_sentence'].tolist()",
    "question": "What are the lowest 4 number of sentences?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "list[number]",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[233.0, 233.0, 233.0]",
    "df_func": "df['age'].nlargest(3).tolist()",
    "question": "List the 3 highest ages in the dataset.",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "list[number]",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['met'].iloc[df['age'].idxmin()] == 1",
    "question": "Is it true that the youngest participant has met their match?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "boolean",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df.loc[df['match'] == 1,'samerace'].value_counts().index[0] == 1)",
    "question": "Do all people who got a match have the same race as their partner?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "boolean",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df[df['match']==1]['age'].mean() > df[df['match']==0]['age'].mean()",
    "question": "Is the average age of participants who got a match higher than those who didn't?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "boolean",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "26.390236506973924",
    "df_func": "df[df['samerace'] == 1]['age'].mean()",
    "question": "What is the average age of participants who have the same race as their partner?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "number",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "18.0",
    "df_func": "df['expected_num_matches'].max()",
    "question": "What is the highest number of matches expected by any participant in the dataset?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "number",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "5",
    "df_func": "df['race'].nunique()",
    "question": "How many unique 'race' categories are there in the dataset?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "number",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "european/caucasian-american",
    "df_func": "df.loc[df['match'] == 1, 'race'].mode().values[0]",
    "question": "What is the most common race among participants who got a match?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "category",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "male",
    "df_func": "df.loc[df['age'].idxmin()]['gender']",
    "question": "What is the gender of the youngest participant in the dataset?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "category",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "other",
    "df_func": "df.loc[df['expected_num_matches'].idxmax()]['race']",
    "question": "What is the race of the participant with the highest number of expected matches?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "category",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "5",
    "df_func": "df.loc[df['age'].idxmin()]['wave']",
    "question": "What is the wave of the participant with the youngest age?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "category",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['european/caucasian-american', 'asian/pacific islander/asian-american', 'black/african american', 'latino/hispanic american', 'other']",
    "df_func": "df[df['expected_num_matches'] > 5]['race'].value_counts().head(5).index.tolist()",
    "question": "What are the 5 most common races among people who expected more than 5 matches?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "list[category]",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "[15, 9, 21, 11]",
    "df_func": "df[df['samerace'] == 1].groupby(['wave'])['samerace'].count().sort_values(ascending=False).head(4).index.tolist()",
    "question": "What are the top 4 waves of people who have the same race as their partner?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "list[category]",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['female', 'male']",
    "df_func": "df[df['expected_num_matches'] == 0]['gender'].value_counts().index[:2].tolist()",
    "question": "What are the top 2 genders among people who expected no match?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "list[category]",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "[42.0, 42.0, 42.0, 42.0, 39.0]",
    "df_func": "df.loc[df['match'] == 1, 'age'].nlargest(5).tolist()",
    "question": "What are the top 5 ages of participants who got a match?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "list[number]",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "[55.0, 55.0, 55.0, 42.0]",
    "df_func": "df[df['samerace'] == 1]['age'].sort_values(ascending=False).head(4).tolist()",
    "question": "What are the top 4 ages of people who have the same race as their partner?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "list[number]",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "[18.0, 18.0, 18.0, 18.0, 18.0, 18.0]",
    "df_func": "df.loc[df['expected_num_matches']==0, 'age'].nsmallest(6).tolist()",
    "question": "What are the 6 youngest ages of participants who expected no match?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "list[number]",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['retweet_count'] > 10).any()",
    "question": "Are there any tweets with more than 10 retweets?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "boolean",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Late Flight' in df['negativereason_gold'].tolist()",
    "question": "Are there any tweets categorized with 'Late Flight' as the negative reason?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "boolean",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "85",
    "df_func": "df['user_timezone'].nunique()",
    "question": "How many unique user timezones are there in the dataset?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "number",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "0.9001688524590163",
    "df_func": "df['airline_sentiment_confidence'].mean()",
    "question": "On average, what is the sentiment confidence of the tweets?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "number",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "44",
    "df_func": "df['retweet_count'].max()",
    "question": "What's the maximum number of retweets a tweet has received?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "number",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "504",
    "df_func": "df[df['airline'] == 'Virgin America'].shape[0]",
    "question": "How many tweets are from 'Virgin America' airline?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "number",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "US Airways",
    "df_func": "df.groupby('airline')['airline_sentiment_confidence'].mean().idxmax()",
    "question": "Which airline has the highest average sentiment confidence?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "category",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Customer Service Issue",
    "df_func": "df[df['airline_sentiment'] == 'negative'][df['airline'] == 'American']['negativereason'].value_counts().index[0]",
    "question": "Which negative reason is most commonly associated with 'American' airline?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "category",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Eastern Time (US & Canada)",
    "df_func": "df.loc[df['airline_sentiment_confidence'].idxmax()]['user_timezone']",
    "question": "From which timezone is the tweet with the highest sentiment confidence?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "category",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "United",
    "df_func": "df.loc[df['airline_sentiment'] == 'negative'].groupby('airline').size().idxmax()",
    "question": "Which airline has the most tweets with negative sentiment?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "category",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['US Airways', 'American', 'United']",
    "df_func": "df.groupby('airline')['airline_sentiment_confidence'].mean().nlargest(3).index.tolist()",
    "question": "Which are the top 3 airlines with the highest average sentiment confidence?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "list[category]",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Eastern Time (US & Canada)', 'Central Time (US & Canada)', 'Pacific Time (US & Canada)']",
    "df_func": "df['user_timezone'].value_counts().head(3).index.tolist()",
    "question": "Which 3 user timezones have the most number of tweets?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "list[category]",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Virgin America', 'Delta']",
    "df_func": "df['airline'].value_counts().nsmallest(2).index.tolist()",
    "question": "List the 2 airlines with the least number of tweets in the dataset.",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "list[category]",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[44, 32, 31]",
    "df_func": "df['retweet_count'].nlargest(3).tolist()",
    "question": "List the 3 highest retweet counts in the dataset.",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "list[number]",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]",
    "df_func": "sorted(df['airline_sentiment_confidence'], reverse=True)[:6]",
    "question": "List the 6 highest sentiment confidence values.",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "list[number]",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['absences'].idxmax()]['address'] == 'R'",
    "question": "Is it true that the student with the highest number of absences is from a rural area?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "boolean",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['age'][(df['romantic'] == 'yes')]).min() > 17",
    "question": "Are all students who are in a romantic relationship older than 17?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "boolean",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['Dalc'] > 2, 'G3'].mean() < df.loc[df['Dalc'] <= 2, 'G3'].mean()",
    "question": "Is the average final grade (G3) of students who consume a lot of alcohol (Dalc > 2) lower than those who don't?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "boolean",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df[df['Pstatus'] == 'T']['freetime'] > 3).all()",
    "question": "Do all students who have both parents at home (Pstatus = 'T') have more than 3 free time after school (freetime > 3)?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "boolean",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "131",
    "df_func": "df[df['Medu'] > 3].shape[0]",
    "question": "How many students have their mother's education (Medu) level above 3?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "number",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "16.634666666666668",
    "df_func": "df.loc[df['higher'] == 'yes', 'age'].mean()",
    "question": "What is the average age of students who want to take higher education (higher = 'yes')?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "number",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "75",
    "df_func": "df['absences'].max()",
    "question": "What is the highest number of absences among students?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "number",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "2",
    "df_func": "df['school'].nunique()",
    "question": "How many unique schools are there in the dataset?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "number",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "other",
    "df_func": "df.loc[df['higher'] == 'yes', 'Mjob'].value_counts().index[0]",
    "question": "What is the most common mother's job among students who want to take higher education?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "category",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "M",
    "df_func": "df.loc[df['G3'].idxmax()]['sex']",
    "question": "What is the gender of the student with the highest final grade (G3)?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "category",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "GP",
    "df_func": "df.loc[df['absences'].idxmax()]['school']",
    "question": "What is the school of the student with the highest number of absences?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "category",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "GT3",
    "df_func": "df.loc[df['G3'].idxmax()]['famsize']",
    "question": "What is the family size of the student with the highest final grade (G3)?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "category",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['course', 'home', 'reputation']",
    "df_func": "df[df['higher'] == 'yes']['reason'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 reasons for choosing a school among students who want to take higher education?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "list[category]",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['other', 'services', 'teacher', 'health', 'at_home']",
    "df_func": "df[df['G3'] > 10]['Mjob'].value_counts().head(5).index.tolist()",
    "question": "What are the 5 most common mother's jobs among students with a final grade above 10?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "list[category]",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['GP', 'MS']",
    "df_func": "df.loc[df['absences'] > 10,'school'].value_counts().head(4).index.tolist()",
    "question": "What are the top 4 schools among students with absences above 10?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "list[category]",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[4, 5]",
    "df_func": "df.loc[df['G3'] < 10, 'famrel'].value_counts().index[:2].tolist()",
    "question": "What are the top 2 family relations among students with a final grade below 10?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "list[category]",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.sort_values('ApprovalFY').iloc[0]['UrbanRural'] == 1",
    "question": "Is it true that the oldest company (based on approval year) is from an urban (UrbanRural=1) area?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "boolean",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df[df['NoEmp'] > 10].UrbanRural.nunique() == 1 and df[df['NoEmp'] > 10].UrbanRural.iloc[0] == 1",
    "question": "Are all companies with more than 10 employees located in an urban (UrbanRural=1) area?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "boolean",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df[(df['default_amount'] > 250000) & (df['Sector']!= 'Food')].empty",
    "question": "Are all companies with a default amount greater than $250,000 in the food sector?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "boolean",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df[df['UrbanRural'] == 1]['RetainedJob'].mean() > df[df['UrbanRural'] == 0]['RetainedJob'].mean()",
    "question": "Is the average number of retained jobs higher for companies located in urban (UrbanRural=1) areas than those in rural (UrbanRural=0) areas?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "boolean",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "57340",
    "df_func": "df[df['FranchiseCode'] == 1].shape[0]",
    "question": "How many companies have a franchise code of 1?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "number",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "2010",
    "df_func": "df['ApprovalFY'].max()",
    "question": "What is the highest approval year in the dataset?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "number",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "20",
    "df_func": "df['Sector'].nunique()",
    "question": "How many unique sectors are there in the dataset?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "number",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Retail trade",
    "df_func": "df[df['FranchiseCode']==1]['Sector'].mode().values[0]",
    "question": "What is the most common sector among companies with a franchise code of 1?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "category",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "ME",
    "df_func": "df.loc[df['DisbursementGross'].idxmax()]['State']",
    "question": "What is the state of the company with the highest disbursement gross?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "category",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "COMMUNITY BANK & TRUST",
    "df_func": "df.loc[df['default_amount'].idxmax()]['Bank']",
    "question": "What is the bank for the company with the highest default amount?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "category",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Retail trade', 'Other services (except public administration)', 'Manufacturing']",
    "df_func": "df[df['FranchiseCode'] == 1].groupby('Sector').size().sort_values(ascending=False).head(3).index.tolist()",
    "question": "What are the top 3 sectors among companies with a franchise code of 1?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "list[category]",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['WELLS FARGO BANK NATL ASSOC', 'BANK OF AMERICA NATL ASSOC', 'U.S. BANK NATIONAL ASSOCIATION', 'JPMORGAN CHASE BANK NATL ASSOC', 'PNC BANK, NATIONAL ASSOCIATION']",
    "df_func": "df.loc[df['ApprovalFY'] < 2000]['Bank'].value_counts().head(5).index.tolist()",
    "question": "What are the 5 most common banks among companies with an approval year earlier than 2000?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "list[category]",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['CA', 'TX', 'FL', 'AZ']",
    "df_func": "df[df['DisbursementGross'] > 1000000].groupby('State')['State'].count().sort_values(ascending=False).head(4).index.tolist()",
    "question": "What are the top 4 states among companies with a disbursement gross greater than $1,000,000?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "list[category]",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Retail trade', 'Accommodation and food services']",
    "df_func": "df[df['default_amount'] > 500000].groupby('Sector').size().sort_values(ascending=False).head(2).index.tolist()",
    "question": "What are the top 2 sectors among companies with a default amount greater than $500,000?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "list[category]",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[2007, 2004, 2006, 2003]",
    "df_func": "df.loc[df['State'] == 'CA'].groupby('ApprovalFY')['SBA_Appv'].count().sort_values(ascending=False).head(4).index.tolist()",
    "question": "What are the top 4 approval years for companies in the state of CA?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "list[number]",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df[df['genre'].str.contains('Drama')].sort_values(by='year').iloc[0]['country'] == 'USA')",
    "question": "Is it true that the oldest movie (based on year) in the drama genre is from the USA?",
    "columns": [
      "imdb_title_id",
      "title",
      "original_title",
      "year",
      "date_published",
      "genre",
      "duration",
      "country",
      "language",
      "director",
      "writer",
      "production_company",
      "actors",
      "description",
      "avg_vote",
      "votes",
      "budget",
      "usa_gross_income",
      "worlwide_gross_income",
      "metascore",
      "reviews_from_users",
      "reviews_from_critics"
    ],
    "types": "boolean",
    "dataset": "044_IMDb",
    "column_types": [
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "object",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "language",
      "genre",
      "year",
      "votes",
      "duration",
      "metascore",
      "country"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df.loc[(df['language'] == 'English') & (df['country'] == 'USA')]['duration'].mean() > df.loc[(df['language'] == 'English') & (df['country']!= 'USA')]['duration'].mean())",
    "question": "Is the average duration of English language movies from the USA longer than those from non-USA countries?",
    "columns": [
      "imdb_title_id",
      "title",
      "original_title",
      "year",
      "date_published",
      "genre",
      "duration",
      "country",
      "language",
      "director",
      "writer",
      "production_company",
      "actors",
      "description",
      "avg_vote",
      "votes",
      "budget",
      "usa_gross_income",
      "worlwide_gross_income",
      "metascore",
      "reviews_from_users",
      "reviews_from_critics"
    ],
    "types": "boolean",
    "dataset": "044_IMDb",
    "column_types": [
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "object",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "language",
      "genre",
      "year",
      "votes",
      "duration",
      "metascore",
      "country"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "2020.0",
    "df_func": "df[(df['language'] == 'English') & (df['country'] == 'USA')]['year'].max()",
    "question": "What is the latest year for English language movies from the USA in the dataset?",
    "columns": [
      "imdb_title_id",
      "title",
      "original_title",
      "year",
      "date_published",
      "genre",
      "duration",
      "country",
      "language",
      "director",
      "writer",
      "production_company",
      "actors",
      "description",
      "avg_vote",
      "votes",
      "budget",
      "usa_gross_income",
      "worlwide_gross_income",
      "metascore",
      "reviews_from_users",
      "reviews_from_critics"
    ],
    "types": "number",
    "dataset": "044_IMDb",
    "column_types": [
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "object",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "language",
      "genre",
      "year",
      "votes",
      "duration",
      "metascore",
      "country"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "English",
    "df_func": "df[(df['country'] == 'USA') & (df['metascore'].notna())].sort_values(by='metascore', ascending=False)['language'].iloc[0]",
    "question": "What is the language of the movie from the USA with the highest metascore?",
    "columns": [
      "imdb_title_id",
      "title",
      "original_title",
      "year",
      "date_published",
      "genre",
      "duration",
      "country",
      "language",
      "director",
      "writer",
      "production_company",
      "actors",
      "description",
      "avg_vote",
      "votes",
      "budget",
      "usa_gross_income",
      "worlwide_gross_income",
      "metascore",
      "reviews_from_users",
      "reviews_from_critics"
    ],
    "types": "category",
    "dataset": "044_IMDb",
    "column_types": [
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "object",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "language",
      "genre",
      "year",
      "votes",
      "duration",
      "metascore",
      "country"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Drama",
    "df_func": "df[(df['language'] == 'English') & (df['country'] == 'USA') & (df['genre'] == df['genre'])].sort_values('votes', ascending=False).iloc[0]['genre']",
    "question": "What is the genre of the English language movie from the USA with the most votes?",
    "columns": [
      "imdb_title_id",
      "title",
      "original_title",
      "year",
      "date_published",
      "genre",
      "duration",
      "country",
      "language",
      "director",
      "writer",
      "production_company",
      "actors",
      "description",
      "avg_vote",
      "votes",
      "budget",
      "usa_gross_income",
      "worlwide_gross_income",
      "metascore",
      "reviews_from_users",
      "reviews_from_critics"
    ],
    "types": "category",
    "dataset": "044_IMDb",
    "column_types": [
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "object",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "language",
      "genre",
      "year",
      "votes",
      "duration",
      "metascore",
      "country"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['USA', 'UK', 'Canada', 'UK, USA', 'Australia']",
    "df_func": "df[(df['language'] == 'English') & (df['year'] < 2000)]['country'].value_counts().head(5).index.tolist()",
    "question": "What are the 5 most common countries among English language movies with a year earlier than 2000?",
    "columns": [
      "imdb_title_id",
      "title",
      "original_title",
      "year",
      "date_published",
      "genre",
      "duration",
      "country",
      "language",
      "director",
      "writer",
      "production_company",
      "actors",
      "description",
      "avg_vote",
      "votes",
      "budget",
      "usa_gross_income",
      "worlwide_gross_income",
      "metascore",
      "reviews_from_users",
      "reviews_from_critics"
    ],
    "types": "list[category]",
    "dataset": "044_IMDb",
    "column_types": [
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "object",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "language",
      "genre",
      "year",
      "votes",
      "duration",
      "metascore",
      "country"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['duration_ms'].idxmax()]['energy'] == df['energy'].max()",
    "question": "Does the song with the longest duration also have the highest energy?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "boolean",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['energy'].idxmax()]['popularity'] == df['popularity'].max()",
    "question": "Does the song with the highest energy also have the highest popularity?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "boolean",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "94",
    "df_func": "df['popularity'].max()",
    "question": "What's the maximum popularity score in the dataset?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "number",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "489",
    "df_func": "df['release_year'].value_counts().max()",
    "question": "How many songs were released in the year with the most releases?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "number",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Giveon']",
    "df_func": "df.loc[df['popularity'].idxmax()]['artists']",
    "question": "Who is the artist with the highest popularity score?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "category",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Monster Tunes Yearmix 2011 - Mixed by Mark Eteson",
    "df_func": "df.loc[df['duration_ms'].idxmax()]['name']",
    "question": "What's the name of the longest song?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "category",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Marathon (Mix Cut) - Simon O'Shine Mix",
    "df_func": "df.loc[df['energy'].idxmax()]['name']",
    "question": "What's the name of the song with the most energy?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "category",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Rhapsody on a Theme of Paganini, Op. 43: Introduction - Allegro vivace', 'Intro']",
    "df_func": "df.nsmallest(2, 'duration_ms')['name'].tolist()",
    "question": "What are the the 2 shortest songs in the dataset?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "list[category]",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[4792587.0, 4658245.0, 4585640.0]",
    "df_func": "df.nlargest(3, 'duration_ms')['duration_ms'].tolist()",
    "question": "What are the 3 longest song durations?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "list[number]",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[1.0, 1.0, 1.0]",
    "df_func": "df['energy'].sort_values(ascending=False).head(3).tolist()",
    "question": "What are the top 3 energy scores in the dataset?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "list[number]",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Weight'].idxmax()]['Sport'] in df['Sport'].value_counts().index[:1]",
    "question": "Does the athlete with the highest weight also participate in the sport with the most athletes?",
    "columns": [
      "ID",
      "Name",
      "Sex",
      "Age",
      "Height",
      "Weight",
      "Team",
      "NOC",
      "Games",
      "Year",
      "Season",
      "City",
      "Sport",
      "Event",
      "Medal"
    ],
    "types": "boolean",
    "dataset": "046_120",
    "column_types": [
      "uint32",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Height",
      "ID",
      "Age",
      "Team",
      "Weight",
      "Name",
      "Medal",
      "City",
      "Year",
      "Sport"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "25.556898357297374",
    "df_func": "df['Age'].mean()",
    "question": "What's the average age of athletes in the dataset?",
    "columns": [
      "ID",
      "Name",
      "Sex",
      "Age",
      "Height",
      "Weight",
      "Team",
      "NOC",
      "Games",
      "Year",
      "Season",
      "City",
      "Sport",
      "Event",
      "Medal"
    ],
    "types": "number",
    "dataset": "046_120",
    "column_types": [
      "uint32",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Height",
      "ID",
      "Age",
      "Team",
      "Weight",
      "Name",
      "Medal",
      "City",
      "Year",
      "Sport"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "214.0",
    "df_func": "df['Weight'].max()",
    "question": "What's the maximum weight of athletes in the dataset?",
    "columns": [
      "ID",
      "Name",
      "Sex",
      "Age",
      "Height",
      "Weight",
      "Team",
      "NOC",
      "Games",
      "Year",
      "Season",
      "City",
      "Sport",
      "Event",
      "Medal"
    ],
    "types": "number",
    "dataset": "046_120",
    "column_types": [
      "uint32",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Height",
      "ID",
      "Age",
      "Team",
      "Weight",
      "Name",
      "Medal",
      "City",
      "Year",
      "Sport"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Robert Tait McKenzie",
    "df_func": "df['Name'].value_counts().idxmax()",
    "question": "What's the name of the athlete who participated in the most number of games?",
    "columns": [
      "ID",
      "Name",
      "Sex",
      "Age",
      "Height",
      "Weight",
      "Team",
      "NOC",
      "Games",
      "Year",
      "Season",
      "City",
      "Sport",
      "Event",
      "Medal"
    ],
    "types": "category",
    "dataset": "046_120",
    "column_types": [
      "uint32",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Height",
      "ID",
      "Age",
      "Team",
      "Weight",
      "Name",
      "Medal",
      "City",
      "Year",
      "Sport"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[23.0, 24.0, 22.0, 25.0, 21.0]",
    "df_func": "df['Age'].value_counts().head(5).index.tolist()",
    "question": "What are the top five most common ages of athletes?",
    "columns": [
      "ID",
      "Name",
      "Sex",
      "Age",
      "Height",
      "Weight",
      "Team",
      "NOC",
      "Games",
      "Year",
      "Season",
      "City",
      "Sport",
      "Event",
      "Medal"
    ],
    "types": "list[number]",
    "dataset": "046_120",
    "column_types": [
      "uint32",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Height",
      "ID",
      "Age",
      "Team",
      "Weight",
      "Name",
      "Medal",
      "City",
      "Year",
      "Sport"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[1992, 1988, 2000, 1996]",
    "df_func": "df['Year'].value_counts().head(4).index.tolist()",
    "question": "What are the 4 most common years of participation?",
    "columns": [
      "ID",
      "Name",
      "Sex",
      "Age",
      "Height",
      "Weight",
      "Team",
      "NOC",
      "Games",
      "Year",
      "Season",
      "City",
      "Sport",
      "Event",
      "Medal"
    ],
    "types": "list[number]",
    "dataset": "046_120",
    "column_types": [
      "uint32",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Height",
      "ID",
      "Age",
      "Team",
      "Weight",
      "Name",
      "Medal",
      "City",
      "Year",
      "Sport"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[180.0, 170.0, 178.0]",
    "df_func": "df['Height'].value_counts().head(3).index.tolist()",
    "question": "What are the three most common heights of athletes?",
    "columns": [
      "ID",
      "Name",
      "Sex",
      "Age",
      "Height",
      "Weight",
      "Team",
      "NOC",
      "Games",
      "Year",
      "Season",
      "City",
      "Sport",
      "Event",
      "Medal"
    ],
    "types": "list[number]",
    "dataset": "046_120",
    "column_types": [
      "uint32",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Height",
      "ID",
      "Age",
      "Team",
      "Weight",
      "Name",
      "Medal",
      "City",
      "Year",
      "Sport"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['customer_age']<18).any()",
    "question": "Does the dataset contain customers who are under the age of 18?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "boolean",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['total_trans_amt'] == 0).any()",
    "question": "Are there any customers with a total transaction amount of zero?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "boolean",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['credit_limit'] > 50000).any()",
    "question": "Does the dataset include customers with a credit limit exceeding $50,000?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "boolean",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['months_inactive_12_mon'].max() > 12",
    "question": "Are there any customers in the dataset who are inactive for more than 12 months?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "boolean",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "34516.0",
    "df_func": "df['credit_limit'].max()",
    "question": "What is the highest credit limit in the dataset?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "number",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "18484",
    "df_func": "df['total_trans_amt'].max()",
    "question": "What is the maximum total transaction amount recorded?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "number",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "2517",
    "df_func": "df['total_revolving_bal'].max()",
    "question": "What is the largest total revolving balance in the dataset?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "number",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "73",
    "df_func": "df['customer_age'].max()",
    "question": "What is the highest customer age in the dataset?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "number",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Graduate",
    "df_func": "df['education_level'].mode().values[0]",
    "question": "What is the most common level of education among the customers?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "category",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Less than $40K",
    "df_func": "df['income_category'].value_counts().index[0]",
    "question": "What is the most common income category of the customers?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "category",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "F",
    "df_func": "df['gender'].mode().values[0]",
    "question": "Which gender is most represented among the customers?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "category",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "0",
    "df_func": "df['attrition_flag'].mode().iloc[0]",
    "question": "What is the most common attrition flag value?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "category",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Graduate', 'High School', 'Unknown']",
    "df_func": "df['education_level'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 most common education levels among the customers?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "list[category]",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Less than $40K', '$40K - $60K', '$80K - $120K', '$60K - $80K']",
    "df_func": "df['income_category'].value_counts().head(4).index.tolist()",
    "question": "Which are 4 most frequent income categories?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "list[category]",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Less than $40K', '$40K - $60K', '$80K - $120K']",
    "df_func": "df['income_category'].value_counts().head(3).index.tolist()",
    "question": "Which are the top 3 most frequent income categories?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "list[category]",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Less than $40K', '$40K - $60K']",
    "df_func": "df['income_category'].value_counts().index[:2].tolist()",
    "question": "Which are the two most frequent income categories?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "list[category]",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[73, 70, 68, 67, 67]",
    "df_func": "df.nlargest(5, 'customer_age')['customer_age'].tolist()",
    "question": "How old are the 5 oldest customers in the dataset?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "list[number]",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Location'].str.contains('New York, NY').any()",
    "question": "Are there any job positions available in 'New York, NY'?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "boolean",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Founded'] < 1900).any()",
    "question": "Are there any job listings from companies founded before 1900?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "boolean",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'python_yn' in df.columns",
    "question": "Are there any job listings that require Python skills?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "boolean",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Data Engineer' in df['Job Title'].values",
    "question": "Is there a job listing for a 'Data Engineer' role?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "boolean",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "264",
    "df_func": "df['Job Title'].nunique()",
    "question": "How many unique job titles are listed?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "number",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "46.591644204851754",
    "df_func": "df['age'].mean()",
    "question": "On average, how old are the companies that have job listings?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "number",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "5.0",
    "df_func": "df['Rating'].max()",
    "question": "What's the highest rating a company has received?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "number",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "15",
    "df_func": "len(df[df['Type of ownership'] == 'Government'])",
    "question": "How many job listings are there from 'Government' type of ownership?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "number",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "CA",
    "df_func": "df['job_state'].value_counts().idxmax()",
    "question": "Which state has the most number of job listings?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "category",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Insurance",
    "df_func": "df.loc[df['avg_salary'].idxmax()]['Sector']",
    "question": "From which sector is the job listing with the highest salary?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "category",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "1001 to 5000 employees",
    "df_func": "df['Size'].mode().iloc[0]",
    "question": "Which company size has the most job listings?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "category",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Information Technology', 'Biotech & Pharmaceuticals', 'Business Services']",
    "df_func": "df['Sector'].value_counts().index[:3].tolist()",
    "question": "Which are the top 3 sectors with the most job listings?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "list[category]",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Biotech & Pharmaceuticals', 'Insurance Carriers', 'Computer Hardware & Software', 'IT Services']",
    "df_func": "df['Industry'].value_counts().index.tolist()[:4]",
    "question": "List the 4 most common industries in the dataset.",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "list[category]",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[' CA', ' MA', ' NY', ' VA', ' IL']",
    "df_func": "df['job_state'].value_counts().head(5).index.tolist()",
    "question": "Which 5 states have the most number of job listings?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "list[category]",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[254.0, 232.5, 225.0, 205.0]",
    "df_func": "df.groupby('Job Title')['avg_salary'].mean().sort_values(ascending=False).head(4).tolist()",
    "question": "What are the top 4 average salaries for job titles in the dataset?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "list[number]",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[1744, 1781, 1781]",
    "df_func": "df.nlargest(3, 'age')['Founded'].tolist()",
    "question": "List the year the 3 oldest companies that have job listings were founded.",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "list[number]",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[5.0, 5.0, 5.0]",
    "df_func": "df['Rating'].nlargest(3).tolist()",
    "question": "Which are the highest 3 ratings given?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "list[number]",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['replies<gx:number>'] > df['retweets<gx:number>']).any()",
    "question": "Is there any tweet in the dataset that has more replies<gx:number> than retweets<gx:number>?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "not df['image_links<gx:list[url]>'].isnull().all()",
    "question": "Does the dataset contain any tweets that include image links?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "1",
    "df_func": "df['author_name<gx:category>'].nunique()",
    "question": "How many unique authors are present in the dataset?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "number",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "117386",
    "df_func": "df['retweets<gx:number>'].max()",
    "question": "What is the highest number of retweets<gx:number> a single tweet has received?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "number",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "5081.805590062112",
    "df_func": "df['favorites<gx:number>'].mean()",
    "question": "What is the average number of favorites per tweet?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "number",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "3220",
    "df_func": "df[df['user_verified<gx:boolean>'] == True].shape[0]",
    "question": "What's the total number of tweets from verified users?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "number",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "en",
    "df_func": "df['lang<gx:category>'].value_counts().index[0]",
    "question": "Which language is most commonly used in the tweets?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>",
    "df_func": "df['source<gx:text>'].value_counts().idxmax()",
    "question": "What is the most common source of tweets?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "original",
    "df_func": "df['type<gx:category>'].value_counts().idxmax()",
    "question": "Which type of tweet (e.g., original, retweet, quote) is most common in the dataset?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['G7', 'foreignoffice', 'UN', 'Conservatives', 'COP26']",
    "df_func": "df['mention_names<gx:list[category]>'].explode().value_counts().head(5).index.tolist()",
    "question": "What are the top five most frequently mentioned names in the tweets?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[category]",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['en', 'und', 'fr', 'es']",
    "df_func": "df['lang<gx:category>'].value_counts().index[:4].tolist()",
    "question": "List the top four most commonly used languages in the tweets.",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[category]",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[3543402, 3543402, 3543402]",
    "df_func": "df['user_followers_count<gx:number>'].nlargest(3).tolist()",
    "question": "What are the highest three numbers of followers count present in the dataset?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[number]",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[117386, 53527, 35698, 31449, 24824, 19982]",
    "df_func": "df['retweets<gx:number>'].nlargest(6).tolist()",
    "question": "List the top six numbers of retweets.",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[number]",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[2, 2, 3, 3, 4]",
    "df_func": "df['replies<gx:number>'].nsmallest(5).tolist()",
    "question": "What are the bottom five numbers of replies?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[number]",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['age'].idxmax()]['philanthropyScore'] == 5",
    "question": "Does the oldest billionaire have a philanthropy score of 5?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "boolean",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "M",
    "df_func": "df.loc[df['philanthropyScore'].idxmax()]['gender']",
    "question": "What's the gender of the billionaire with the highest philanthropy score?",
    "columns": [
      "rank",
      "personName",
      "age",
      "finalWorth",
      "category",
      "source",
      "country",
      "state",
      "city",
      "organization",
      "selfMade",
      "gender",
      "birthDate",
      "title",
      "philanthropyScore",
      "bio",
      "about"
    ],
    "types": "category",
    "dataset": "001_Forbes",
    "column_types": [
      "uint16",
      "category",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "bool",
      "category",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "object",
      "object"
    ],
    "lite_columns": [
      "selfMade",
      "finalWorth",
      "city",
      "title",
      "gender",
      "age",
      "rank",
      "philanthropyScore",
      "category",
      "source",
      "country"
    ],
    "lite_column_types": [
      "bool",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df[(df['Age'] < 18) & (df['Survived'] == 1)].shape[0] > 0",
    "question": "Did any children below the age of 18 survive?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "boolean",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Name'].nunique()==df.shape[0]",
    "question": "Is every passenger's name unique?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "boolean",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[(df['Sex']=='female') & (df['Pclass']==3) & (df['Survived']==1)].shape[0]>0)",
    "question": "Were there any female passengers in the 3rd class who survived?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "boolean",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "3",
    "df_func": "df['Pclass'].nunique()",
    "question": "How many unique passenger classes are present in the dataset?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "number",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "female",
    "df_func": "df.loc[df['Survived'] == 1]['Sex'].mode()[0]",
    "question": "What's the most common gender among the survivors?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "category",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "0-50",
    "df_func": "df[df['Survived']==1]['Fare'].apply(lambda x: '0-50' if x<=50 else ('50-100' if x<=100 else ('100-150' if x<=150 else '150+'))).mode().values[0]",
    "question": "Among those who survived, which fare range was the most common: (0-50, 50-100, 100-150, 150+)?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "category",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "18-30",
    "df_func": "df['Age'].apply(lambda x: '0-18' if x <= 18 else '18-30' if x <= 30 else '30-50' if x <= 50 else '50+').mode().iloc[0]",
    "question": "What's the most common age range among passengers: (0-18, 18-30, 30-50, 50+)?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "category",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "['female', 'male']",
    "df_func": "df.groupby('Sex')['Fare'].mean().sort_values(ascending=False).head(2).index.tolist()",
    "question": "What are the top 2 genders by average fare paid?",
    "columns": [
      "Survived",
      "Pclass",
      "Name",
      "Sex",
      "Age",
      "Siblings_Spouses Aboard",
      "Parents_Children Aboard",
      "Fare"
    ],
    "types": "list[category]",
    "dataset": "002_Titanic",
    "column_types": [
      "bool",
      "uint8",
      "object",
      "category",
      "float64",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Age",
      "Siblings_Spouses Aboard",
      "Sex",
      "Name",
      "Pclass",
      "Fare",
      "Survived"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "bool"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['What is your age? 👶🏻👵🏻'].mean() > 30",
    "question": "Is the average age of the respondents above 30?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "boolean",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['What is your hair color? 👩🦰👱🏽'].mode()[0] == 'black'",
    "question": "Is the most frequent hair color black?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "boolean",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Master",
    "df_func": "df['What is the maximum level of studies you have achieved? 🎓'].mode().values[0]",
    "question": "What is the most common level of studies achieved?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "category",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Brown",
    "df_func": "df['What is your eye color? 👁️'].mode().values[0]",
    "question": "What's the most frequent eye color?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "category",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Heterosexual",
    "df_func": "df['What\\'s your sexual orientation?'].value_counts().idxmax()",
    "question": "Which sexual orientation has the highest representation?",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "category",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['[Computer Science]', '[Business]', '[Enginering & Architecture]']",
    "df_func": "df['What area of knowledge is closer to you?'].value_counts().head(3).index.tolist()",
    "question": "List the top 3 most common areas of knowledge.",
    "columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "types": "list[category]",
    "dataset": "003_Love",
    "column_types": [
      "datetime64[us, UTC]",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "uint8",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Submitted at",
      "What is your age? 👶🏻👵🏻",
      "What's your nationality?",
      "What is your civil status? 💍",
      "What's your sexual orientation?",
      "Do you have children? 🍼",
      "What is the maximum level of studies you have achieved? 🎓",
      "Gross annual salary (in euros) 💸",
      "What's your height? in cm 📏",
      "What's your weight? in Kg ⚖️",
      "What is your body complexity? 🏋️",
      "What is your eye color? 👁️",
      "What is your hair color? 👩🦰👱🏽",
      "What is your skin tone?",
      "How long is your hair? 💇🏻♀️💇🏽♂️",
      "How long is your facial hair? 🧔🏻",
      "How often do you wear glasses? 👓",
      "How attractive do you consider yourself?",
      "Have you ever use an oline dating app?",
      "Where have you met your sexual partners? (In a Bar or Restaurant)",
      "Where have you met your sexual partners? (Through Friends)",
      "Where have you met your sexual partners? (Through Work or as Co-Workers)",
      "Where have you met your sexual partners? (Through Family)",
      "Where have you met your sexual partners? (in University)",
      "Where have you met your sexual partners? (in Primary or Secondary School)",
      "Where have you met your sexual partners? (Neighbors)",
      "Where have you met your sexual partners? (in Church)",
      "Where have you met your sexual partners? (Other)",
      "How many people have you kissed?",
      "How many sexual partners have you had?",
      "How many people have you considered as your boyfriend_girlfriend?",
      "How many times per month did you practice sex lately?",
      "Happiness scale",
      "What area of knowledge is closer to you?",
      "If you are in a relationship, how long have you been with your partner?"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "bool",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['trip_distance'].max()>30",
    "question": "Are there any trips with a total distance greater than 30 miles?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "boolean",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['total_amount'].gt(100).any()",
    "question": "Were there any trips that cost more than $100 in total?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "boolean",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['passenger_count'] > 6).any()",
    "question": "Is there any trip with more than 6 passengers?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "boolean",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['payment_type'].isin([1,2]).all()",
    "question": "Did all the trips use a payment type of either 1 or 2?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "boolean",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "1",
    "df_func": "df['payment_type'].mode().iloc[0]",
    "question": "Which payment type is the most common in the dataset?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "category",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "2",
    "df_func": "df['VendorID'].value_counts().idxmax()",
    "question": "Which vendor has the most trips recorded?",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "category",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "['N', 'Y']",
    "df_func": "df['store_and_fwd_flag'].value_counts().index[:2].tolist()",
    "question": "list the 2 most frequent store and forward flags.",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "list[category]",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[0, 0, 0, 0]",
    "df_func": "sorted(df['tolls_amount'], reverse=True)[:4]",
    "question": "Report the 4 highest toll amounts paid.",
    "columns": [
      "VendorID",
      "tpep_pickup_datetime",
      "tpep_dropoff_datetime",
      "passenger_count",
      "trip_distance",
      "RatecodeID",
      "store_and_fwd_flag",
      "PULocationID",
      "DOLocationID",
      "payment_type",
      "fare_amount",
      "extra",
      "mta_tax",
      "tip_amount",
      "tolls_amount",
      "improvement_surcharge",
      "total_amount",
      "congestion_surcharge",
      "Airport_fee",
      "airport_fee"
    ],
    "types": "list[number]",
    "dataset": "004_Taxi",
    "column_types": [
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "uint8",
      "float64",
      "uint8",
      "category",
      "uint16",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "store_and_fwd_flag",
      "payment_type",
      "tpep_pickup_datetime",
      "fare_amount",
      "VendorID",
      "DOLocationID",
      "tolls_amount",
      "tip_amount",
      "PULocationID",
      "Airport_fee",
      "trip_distance",
      "RatecodeID",
      "total_amount",
      "passenger_count"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64",
      "float64",
      "float64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['borough'].eq('BROOKLYN').any()",
    "question": "Are there any complaints made in Brooklyn?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "boolean",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['month_name'] == 'April').any()",
    "question": "Were there any complaints raised in April?",
    "columns": [
      "segmentation_1",
      "descriptor",
      "complaint_type",
      "created_date",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "resolution_description",
      "agency_name",
      "city",
      "location_type",
      "incident_zip",
      "incident_address",
      "street_name",
      "cross_street_1",
      "cross_street_2",
      "intersection_street_1",
      "intersection_street_2",
      "address_type",
      "landmark",
      "facility_type",
      "status",
      "due_date",
      "resolution_action_updated_date",
      "community_board",
      "x_coordinate",
      "y_coordinate",
      "park_facility_name",
      "park_borough",
      "bbl",
      "open_data_channel_type",
      "vehicle_type",
      "taxi_company_borough",
      "taxi_pickup_location",
      "bridge_highway_name",
      "bridge_highway_direction",
      "road_ramp",
      "bridge_highway_segment",
      "latitude",
      "longitude",
      "location",
      "unique_key",
      "Unnamed_0",
      "closed_date"
    ],
    "types": "boolean",
    "dataset": "005_NYC",
    "column_types": [
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "uint32",
      "uint32",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "complaint_type",
      "borough",
      "hour",
      "month_name",
      "weekday_name",
      "agency",
      "unique_key",
      "descriptor"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['neighbourhood_cleansed'].nunique() == 1",
    "question": "Are all properties in the dataset located in the same neighbourhood?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "boolean",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['reviews_per_month'].gt(5).all()",
    "question": "Are all reviews_per_month values greater than 5?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "boolean",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['room_type'].isnull().any()",
    "question": "Are there any listings without a specified room type?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "boolean",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "0",
    "df_func": "len(df[df['price'] == 0])",
    "question": "How many listings don't have a valid price?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "number",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Entire home/apt",
    "df_func": "df['room_type'].mode().values[0]",
    "question": "What is the most common room type in the listings?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "category",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[5.0, 5.0, 5.0]",
    "df_func": "df['review_scores_location'].sort_values(ascending=False).head(3).tolist()",
    "question": "What are the top 3 highest review scores for location?",
    "columns": [
      "neighbourhood_cleansed",
      "host_neighbourhood",
      "price",
      "room_type",
      "reviews_per_month",
      "property_type",
      "bedrooms",
      "host_verifications",
      "host_acceptance_rate",
      "host_identity_verified",
      "beds",
      "amenities",
      "minimum_nights",
      "last_review",
      "review_scores_rating",
      "instant_bookable",
      "calculated_host_listings_count",
      "first_review",
      "number_of_reviews",
      "accommodates",
      "listing_url",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_listings_count",
      "host_total_listings_count",
      "host_has_profile_pic",
      "neighbourhood",
      "latitude",
      "longitude",
      "bathrooms",
      "bathrooms_text",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "x",
      "y",
      "price_M0jI"
    ],
    "types": "list[number]",
    "dataset": "006_London",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "object",
      "category",
      "category",
      "float64",
      "object",
      "uint16",
      "datetime64[us, UTC]",
      "float64",
      "category",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "reviews_per_month",
      "review_scores_communication",
      "host_verifications",
      "calculated_host_listings_count_entire_homes",
      "host_neighbourhood",
      "property_type",
      "host_identity_verified",
      "bedrooms",
      "review_scores_location",
      "neighbourhood_cleansed",
      "price",
      "room_type"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Overall<gx:number>'] > df['Potential<gx:number>']).any()",
    "question": "Are there players who have a greater overall score than their potential score?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "boolean",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Right",
    "df_func": "df['Preferred Foot<gx:category>'].mode().iloc[0]",
    "question": "What is the most common preferred foot amongst players?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "category",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "SUB",
    "df_func": "df['Position<gx:category>'].mode().values[0]",
    "question": "What is the most common position of players in the dataset?",
    "columns": [
      "ID<gx:number>",
      "Name<gx:text>",
      "Age<gx:number>",
      "Photo<gx:url>",
      "Nationality<gx:category>",
      "Overall<gx:number>",
      "Potential<gx:number>",
      "Club<gx:category>",
      "Value_€<gx:currency>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "International Reputation<gx:number>",
      "Weak Foot<gx:number>",
      "Skill Moves<gx:number>",
      "Work Rate<gx:category>",
      "Position<gx:category>",
      "Joined<gx:date>",
      "Contract Valid Until<gx:date>",
      "Height_ft<gx:number>",
      "Weight_lbs<gx:number>",
      "Crossing<gx:number>",
      "Finishing<gx:number>",
      "HeadingAccuracy<gx:number>",
      "ShortPassing<gx:number>",
      "Volleys<gx:number>",
      "Dribbling<gx:number>",
      "Curve<gx:number>",
      "FKAccuracy<gx:number>",
      "LongPassing<gx:number>",
      "BallControl<gx:number>",
      "Acceleration<gx:number>",
      "SprintSpeed<gx:number>",
      "Agility<gx:number>",
      "Reactions<gx:number>",
      "Balance<gx:number>",
      "ShotPower<gx:number>",
      "Jumping<gx:number>",
      "Stamina<gx:number>",
      "Strength<gx:number>",
      "LongShots<gx:number>",
      "Aggression<gx:number>",
      "Interceptions<gx:number>",
      "Positioning<gx:number>",
      "Vision<gx:number>",
      "Penalties<gx:number>",
      "Composure<gx:number>",
      "Marking<gx:number>",
      "StandingTackle<gx:number>",
      "SlidingTackle<gx:number>",
      "GKDiving<gx:number>",
      "GKHandling<gx:number>",
      "GKKicking<gx:number>",
      "GKPositioning<gx:number>",
      "GKReflexes<gx:number>",
      "Best Position<gx:category>",
      "Best Overall Rating<gx:number>",
      "DefensiveAwareness<gx:number>",
      "General Postion<gx:category>",
      "Legend"
    ],
    "types": "category",
    "dataset": "007_Fifa",
    "column_types": [
      "uint32",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint32",
      "uint32",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "bool"
    ],
    "lite_columns": [
      "Joined<gx:date>",
      "Overall<gx:number>",
      "Age<gx:number>",
      "Position<gx:category>",
      "Wage_€<gx:currency>",
      "Preferred Foot<gx:category>",
      "Potential<gx:number>",
      "Agility<gx:number>",
      "Nationality<gx:category>",
      "Height_ft<gx:number>",
      "Value_€<gx:currency>",
      "Club<gx:category>"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['inj'].max() <= 500",
    "question": "There are no tornadoes that resulted in more than 500 injuries.",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "boolean",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['yr'].min() >= 2000",
    "question": "All tornadoes in the dataset occurred in the 21st century.",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "boolean",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['len'].max() <= 100)",
    "question": "No tornado has a length greater than 100 miles.",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "boolean",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['fat'].max() <= 100",
    "question": "There are no tornadoes that resulted in more than 100 fatalities.",
    "columns": [
      "yr",
      "mo",
      "dy",
      "date",
      "st",
      "mag",
      "inj",
      "fat",
      "slat",
      "slon",
      "elat",
      "elon",
      "len",
      "wid"
    ],
    "types": "boolean",
    "dataset": "008_Tornados",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "category",
      "int8",
      "uint16",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "date",
      "yr",
      "fat",
      "mag",
      "inj",
      "mo",
      "st",
      "len"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['PRCP'] > 5).any() == False",
    "question": "There were no days when the precipitation was greater than 5 inches.",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "boolean",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['TMIN'] > 32).all()",
    "question": "All recorded temperatures are above freezing point.",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "boolean",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['SNWD'] > 10).any() == False",
    "question": "There were no days when the snow depth was more than 10 inches.",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "boolean",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['TMAX'] < 32).any() == False",
    "question": "There were no days when the maximum temperature was below freezing point.",
    "columns": [
      "DATE",
      "PRCP",
      "SNOW",
      "SNWD",
      "TMIN",
      "TMAX"
    ],
    "types": "boolean",
    "dataset": "009_Central",
    "column_types": [
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "TMIN",
      "PRCP",
      "DATE",
      "SNWD",
      "TMAX"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Age'].mean() > 50",
    "question": "Is the age of the reviewers above 50 years on average?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "boolean",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Department Name'].nunique() == 1",
    "question": "Do all reviews come from the same department?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "boolean",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Recommended IND'].all()",
    "question": "Are all products recommended?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "boolean",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "5",
    "df_func": "df['Rating'].mode().iloc[0]",
    "question": "What is the most common rating given by reviewers?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "number",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Dresses",
    "df_func": "df['Class Name'].value_counts().idxmax()",
    "question": "Which class of clothing is most commonly reviewed?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "category",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "General",
    "df_func": "df['Division Name'].mode().iloc[0]",
    "question": "Which division is most commonly mentioned in the reviews?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "category",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['General', 'General Petite']",
    "df_func": "df['Division Name'].value_counts().index[:2].tolist()",
    "question": "Which are the 2 most reviewed categories in Division Name?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "list[category]",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[1, 0]",
    "df_func": "df['Recommended IND'].value_counts().head(2).index.tolist()",
    "question": "What are the 2 most common values for recommendation indicator?",
    "columns": [
      "Clothing ID",
      "Age",
      "Title",
      "Review Text",
      "Rating",
      "Recommended IND",
      "Positive Feedback Count",
      "Division Name",
      "Department Name",
      "Class Name"
    ],
    "types": "list[number]",
    "dataset": "010_ECommerce",
    "column_types": [
      "uint16",
      "uint8",
      "category",
      "object",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Positive Feedback Count",
      "Clothing ID",
      "Age",
      "Department Name",
      "Recommended IND",
      "Class Name",
      "Division Name",
      "Rating"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Incident Year']==2023,'Incident Number'].max() == df.loc[df['Incident Year']==2023,'Incident Number'].max() and df.loc[df['Incident Number']==df.loc[df['Incident Year']==2023,'Incident Number'].max()]['Filed Online'].values[0] == 'Yes'",
    "question": "Was the highest reported incident in the year 2023 filed online?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "boolean",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Police District'] == 'CENTRAL').any() and (df['Supervisor District'] == 5).any()",
    "question": "Do any incidents reported in Police District 'Central' fall in Supervisor District 5?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "boolean",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Larceny Theft",
    "df_func": "df['Incident Category'].mode().iloc[0]",
    "question": "What is the most common incident category?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "category",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Open or Active",
    "df_func": "df['Resolution'].mode().iloc[0]",
    "question": "What is the most common resolution for incidents reported online?",
    "columns": [
      "Incident Datetime",
      "Incident Date",
      "Incident Time",
      "Incident Year",
      "Incident Day of Week",
      "Report Datetime",
      "Row ID",
      "Incident ID",
      "Incident Number",
      "CAD Number",
      "Report Type Code",
      "Report Type Description",
      "Filed Online",
      "Incident Code",
      "Incident Category",
      "Incident Subcategory",
      "Incident Description",
      "Resolution",
      "Intersection",
      "CNN",
      "Police District",
      "Analysis Neighborhood",
      "Supervisor District",
      "Supervisor District 2012",
      "Latitude",
      "Longitude",
      "Point",
      "Neighborhoods",
      "ESNCAG - Boundary File",
      "Central Market/Tenderloin Boundary Polygon - Updated",
      "Civic Center Harm Reduction Project Boundary",
      "HSOC Zones as of 2018-06-05",
      "Invest In Neighborhoods (IIN) Areas",
      "Current Supervisor Districts",
      "Current Police Districts"
    ],
    "types": "category",
    "dataset": "011_SF",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "category",
      "object",
      "int64",
      "uint32",
      "uint32",
      "float64",
      "category",
      "category",
      "object",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Longitude",
      "Incident Category",
      "Incident Number",
      "Latitude",
      "Incident Day of Week",
      "Incident Description",
      "Resolution",
      "Police District",
      "Incident Year",
      "Filed Online",
      "Supervisor District"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['RestingBP'] > 200).any()",
    "question": "Does any patient have a resting blood pressure above 200?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "boolean",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['HeartDisease'] == 0).any()",
    "question": "Are there patients without heart disease?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "boolean",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['RestingECG'].nunique() == 1",
    "question": "Does everyone have normal resting electrocardiographic results?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "boolean",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "ASY",
    "df_func": "df['ChestPainType'].value_counts().index[0]",
    "question": "What is the most common chest pain type among patients?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "category",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "ST",
    "df_func": "df['RestingECG'].value_counts().index[-1]",
    "question": "What is the least common resting electrocardiographic result?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "category",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['ASY', 'NAP', 'ATA']",
    "df_func": "df['ChestPainType'].value_counts().index[:3].tolist()",
    "question": "What are the top 3 most common chest pain types?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "list[category]",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[0, 0, 0, 0, 0, 0]",
    "df_func": "df['Cholesterol'].nsmallest(6).tolist()",
    "question": "What are the 6 lowest cholesterol levels in the dataset?",
    "columns": [
      "Age",
      "Sex",
      "ChestPainType",
      "RestingBP",
      "Cholesterol",
      "FastingBS",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "Oldpeak",
      "ST_Slope",
      "HeartDisease"
    ],
    "types": "list[number]",
    "dataset": "012_Heart",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint8",
      "uint16",
      "uint8",
      "category",
      "uint8",
      "category",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "Cholesterol",
      "Age",
      "RestingBP",
      "ST_Slope",
      "Sex",
      "ChestPainType",
      "RestingECG",
      "MaxHR",
      "ExerciseAngina",
      "HeartDisease"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Designer'].str.contains('Werner Stengel').sum() == 0",
    "question": "Are all roller coasters in the dataset designed by 'Werner Stengel' removed?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "boolean",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Gforce_clean'].notna().all()",
    "question": "Does every roller coaster have a G-force value?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "boolean",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "0",
    "df_func": "df[df['Designer'] == 'Edwin Madeupname'].shape[0]",
    "question": "What is the total number of roller coasters designed by 'Edwin Madeupname' in the dataset?",
    "columns": [
      "coaster_name",
      "Length",
      "Speed",
      "Location",
      "Status",
      "Opening date",
      "Type",
      "Manufacturer",
      "Height restriction",
      "Model",
      "Height",
      "Inversions",
      "Lift/launch system",
      "Cost",
      "Trains",
      "Park section",
      "Duration",
      "Capacity",
      "G-force",
      "Designer",
      "Max vertical angle",
      "Drop",
      "Soft opening date",
      "Fast Lane available",
      "Replaced",
      "Track layout",
      "Fastrack available",
      "Soft opening date.1",
      "Closing date",
      "Opened",
      "Replaced by",
      "Website",
      "Flash Pass Available",
      "Must transfer from wheelchair",
      "Theme",
      "Single rider line available",
      "Restraint Style",
      "Flash Pass available",
      "Acceleration",
      "Restraints",
      "Name",
      "year_introduced",
      "latitude",
      "longitude",
      "Type_Main",
      "opening_date_clean",
      "speed1",
      "speed2",
      "speed1_value",
      "speed1_unit",
      "speed_mph",
      "height_value",
      "height_unit",
      "height_ft",
      "Inversions_clean",
      "Gforce_clean"
    ],
    "types": "number",
    "dataset": "013_Roller",
    "column_types": [
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "Status",
      "coaster_name",
      "Designer",
      "Manufacturer",
      "height_ft",
      "Gforce_clean",
      "Type",
      "year_introduced",
      "speed_mph",
      "Inversions_clean",
      "Location",
      "Opening date"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['review_scores_rating'] == 100).any()",
    "question": "Is there a rental property that has received a perfect review score?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "boolean",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "within an hour",
    "df_func": "df.loc[df['bedrooms'].idxmax()]['host_response_time']",
    "question": "What is the host response time for the property with the highest number of bedrooms?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "category",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "Entire home/apt",
    "df_func": "df.groupby('room_type')['price'].max().idxmax()",
    "question": "What type of room is the most expensive property?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "category",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "100%",
    "df_func": "df.loc[df['accommodates'].idxmax()]['host_acceptance_rate']",
    "question": "What is the acceptance rate of the host of the property that can accommodate the most number of guests?",
    "columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "types": "category",
    "dataset": "014_Airbnb",
    "column_types": [
      "int64",
      "category",
      "int64",
      "datetime64[us, UTC]",
      "category",
      "object",
      "object",
      "object",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "category",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint8",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "float64"
    ],
    "lite_columns": [
      "id",
      "listing_url",
      "scrape_id",
      "last_scraped",
      "source",
      "name",
      "description",
      "neighborhood_overview",
      "picture_url",
      "host_id",
      "host_url",
      "host_name",
      "host_since",
      "host_location",
      "host_about",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_thumbnail_url",
      "host_picture_url",
      "host_neighbourhood",
      "host_listings_count",
      "host_total_listings_count",
      "host_verifications",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "neighbourhood_cleansed",
      "neighbourhood_group_cleansed",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bathrooms",
      "bathrooms_text",
      "bedrooms",
      "beds",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "minimum_minimum_nights",
      "maximum_minimum_nights",
      "minimum_maximum_nights",
      "maximum_maximum_nights",
      "minimum_nights_avg_ntm",
      "maximum_nights_avg_ntm",
      "calendar_updated",
      "has_availability",
      "availability_30",
      "availability_60",
      "availability_90",
      "availability_365",
      "calendar_last_scraped",
      "number_of_reviews",
      "number_of_reviews_ltm",
      "number_of_reviews_l30d",
      "first_review",
      "last_review",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "license",
      "instant_bookable",
      "calculated_host_listings_count",
      "calculated_host_listings_count_entire_homes",
      "calculated_host_listings_count_private_rooms",
      "calculated_host_listings_count_shared_rooms",
      "reviews_per_month"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Nuts' in df['SUB GROUP'].values",
    "question": "Are there food items with 'Nuts' as their sub group?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "boolean",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Pinus edulis",
    "df_func": "df.loc[df['FOOD NAME'] == 'Colorado pinyon', 'SCIENTIFIC NAME'].iloc[0]",
    "question": "What is the scientific name of the food named 'Colorado pinyon'?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "category",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[1, 1]",
    "df_func": "df['GROUP'].value_counts().nsmallest(2).tolist()",
    "question": "What are the number of appearances of the 2 least common groups?",
    "columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "types": "list[number]",
    "dataset": "015_Food",
    "column_types": [
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "FOOD NAME",
      "SCIENTIFIC NAME",
      "GROUP",
      "SUB GROUP"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Large Business' in df['Occupation'].values",
    "question": "Is there a customer with 'Large Business' as their occupation?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "boolean",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'King' in df['ProductPitched'].values",
    "question": "Are there customers with 'King' as their pitched product?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "boolean",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'VP' in df['Designation'].values",
    "question": "Is there a customer with designation 'VP'?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "boolean",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Unmarried' in df['MaritalStatus'].tolist()",
    "question": "Is 'Unmarried' listed as a marital status in the dataset?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "boolean",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "4",
    "df_func": "df['MaritalStatus'].nunique()",
    "question": "How many unique marital statuses are there in the dataset?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "number",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Basic', 'Deluxe']",
    "df_func": "df['ProductPitched'].value_counts().index[:2].tolist()",
    "question": "What are the top 2 most common pitched products?",
    "columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "types": "list[category]",
    "dataset": "016_Holiday",
    "column_types": [
      "uint32",
      "uint8",
      "float64",
      "category",
      "uint8",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "category",
      "float64",
      "category",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "float64",
      "category",
      "float64"
    ],
    "lite_columns": [
      "CustomerID",
      "ProdTaken",
      "Age",
      "TypeofContact",
      "CityTier",
      "DurationOfPitch",
      "Occupation",
      "Gender",
      "NumberOfPersonVisiting",
      "NumberOfFollowups",
      "ProductPitched",
      "PreferredPropertyStar",
      "MaritalStatus",
      "NumberOfTrips",
      "Passport",
      "PitchSatisfactionScore",
      "OwnCar",
      "NumberOfChildrenVisiting",
      "Designation",
      "MonthlyIncome"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "float64",
      "object",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "int64",
      "int64",
      "int64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['weekday_name'].isin(['Saturday', 'Sunday']).any()",
    "question": "Is there any entry posted on a weekend?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "boolean",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['title_gx_text_length'] > 100).any()",
    "question": "Are there titles with more than 100 characters?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "boolean",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['title_gx_cardiff_nlp_sentiment'].min() < 0)",
    "question": "Do any entries have a negative sentiment according to the Cardiff NLP model?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "boolean",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "en",
    "df_func": "df['title_gx_lang'].value_counts().index[0]",
    "question": "What is the predominant language used in titles?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "category",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "afternoon",
    "df_func": "df['partofday'].mode().values[0]",
    "question": "On which part of the day are most entries posted?",
    "columns": [
      "clusters_3",
      "test",
      "gx_cluster",
      "Clusters II",
      "timestamp",
      "title_gx_ngrams",
      "title",
      "hour",
      "weekday_name",
      "month_name",
      "title_gx_cardiff_nlp_sentiment",
      "title_gx_hashtags",
      "url",
      "by",
      "score",
      "descendants",
      "partofday",
      "season",
      "title_gx_lang",
      "title_gx_text_length"
    ],
    "types": "category",
    "dataset": "017_Hacker",
    "column_types": [
      "object",
      "object",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "uint16",
      "float64",
      "category",
      "category",
      "category",
      "float64"
    ],
    "lite_columns": [
      "title_gx_text_length",
      "title",
      "score",
      "partofday",
      "month_name",
      "title_gx_lang",
      "weekday_name",
      "Clusters II",
      "descendants",
      "season",
      "title_gx_cardiff_nlp_sentiment"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Number of Projects'].max() > 7",
    "question": "Are there any employees with more than 7 projects?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "boolean",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Satisfaction Level'] > 0.5).all()",
    "question": "Are all satisfaction levels above 0.5?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "boolean",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "low",
    "df_func": "df['salary'].mode().iloc[0]",
    "question": "What's the most common salary level among employees?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "types": "category",
    "dataset": "018_Staff",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "Last Evaluation",
      "Department",
      "Left",
      "Years in the Company",
      "Work Accident",
      "Number of Projects",
      "Satisfaction Level",
      "salary",
      "Average Monthly Hours",
      "Promoted in the last 5 years?",
      "Date Hired"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "float64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Destroyed' in df['Aircaft_Damage_Type'].tolist()",
    "question": "Did any incident result in the total destruction of the aircraft?",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "boolean",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Ground_Casualties'].any()",
    "question": "Has there been any instance where the ground casualties were non-zero?",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "boolean",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Damaged beyond repair', 'Substantial']",
    "df_func": "df['Aircaft_Damage_Type'].value_counts().index[:2].tolist()",
    "question": "What are the top 2 most common types of aircraft damage?",
    "columns": [
      "Incident_Date",
      "Aircaft_Model",
      "Aircaft_Registration",
      "Aircaft_Operator",
      "Aircaft_Nature",
      "Incident_Category",
      "Incident_Cause(es)",
      "Incident_Location",
      "Aircaft_Damage_Type",
      "Date",
      "Time",
      "Arit",
      "Aircaft_Engines",
      "Onboard_Crew",
      "Onboard_Passengers",
      "Onboard_Total",
      "Fatalities",
      "Aircaft_First_Flight",
      "Aircraft_Phase",
      "Departure_Airport",
      "Destination_Airport",
      "Ground_Casualties",
      "Collision_Casualties"
    ],
    "types": "list[category]",
    "dataset": "019_Aircraft",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Incident_Location",
      "Fatalities",
      "Aircaft_Operator",
      "Onboard_Total",
      "Aircaft_Model",
      "Onboard_Crew",
      "Aircraft_Phase",
      "Incident_Category",
      "Aircaft_Damage_Type",
      "Incident_Cause(es)",
      "Date",
      "Ground_Casualties",
      "Onboard_Passengers"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Precio'] > 1000000).any()",
    "question": "Are there any properties with a price over 1,000,000?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "boolean",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Baños'].eq(0).any()",
    "question": "Are there properties with zero bathrooms?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "boolean",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Duración'].max() > 100",
    "question": "Has any property been listed for more than 100 days?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "boolean",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "Piso",
    "df_func": "df['Tipo'].mode().values[0]",
    "question": "What's the most common type of property listed?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "category",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['Piso', 'Chalet']",
    "df_func": "[df['Tipo'].value_counts().index[0], df['Tipo'].value_counts().index[1]]",
    "question": "What are the 2 types of properties which are listed more frequently?",
    "columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "types": "list[category]",
    "dataset": "020_Real",
    "column_types": [
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint8",
      "int8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Id",
      "Referencia",
      "Precio",
      "Tipo",
      "Anunciante",
      "Actualización",
      "Duración",
      "Superficie",
      "Superficie útil",
      "Superficie solar",
      "Habitaciones",
      "Baños",
      "Planta",
      "Antigüedad",
      "Clasificación",
      "Calle",
      "Barrio",
      "Distrito",
      "Localidad",
      "Código postal",
      "Latitud",
      "Longitud",
      "Nuevo",
      "Reformado",
      "Conservado",
      "Exterior",
      "Orientación sur",
      "Soleado",
      "Amueblado",
      "Negociar muebles",
      "Cocina equipada",
      "Cocina independiente",
      "Armarios empotrados",
      "Garaje",
      "Terraza",
      "Ascensor",
      "Aire acondicionado",
      "Trastero",
      "Puerta blindada",
      "Piscina",
      "Jardín",
      "Comedor",
      "Balcón",
      "Lavadero",
      "Chimenea",
      "Portero automático",
      "Sistema de seguridad",
      "Calefacción central",
      "Calefacción eléctrica",
      "Gas natural",
      "Gasoil",
      "Aluminio",
      "PVC",
      "Climalit",
      "Madera",
      "Parquet",
      "Gres",
      "Tarima",
      "Mármol"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['PhoneService'].all()",
    "question": "Do all customers have phone service?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "boolean",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "72",
    "df_func": "df['tenure'].max()",
    "question": "What's the longest tenure?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "number",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Electronic check",
    "df_func": "df['PaymentMethod'].mode().values[0]",
    "question": "What's the most common payment method?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "category",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Month-to-month",
    "df_func": "df['Contract'].mode().values[0]",
    "question": "What's the most common contract type?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "category",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Fiber optic', 'DSL', 'No']",
    "df_func": "df['InternetService'].value_counts().index[:3].tolist()",
    "question": "What are the top 3 most common internet services?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "list[category]",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Month-to-month', 'Two year']",
    "df_func": "df['Contract'].value_counts().index[:2].tolist()",
    "question": "What are the 2 most common types of contract?",
    "columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "types": "list[category]",
    "dataset": "021_Telco",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "customerID",
      "gender",
      "SeniorCitizen",
      "Partner",
      "Dependents",
      "tenure",
      "PhoneService",
      "MultipleLines",
      "InternetService",
      "OnlineSecurity",
      "OnlineBackup",
      "DeviceProtection",
      "TechSupport",
      "StreamingTV",
      "StreamingMovies",
      "Contract",
      "PaperlessBilling",
      "PaymentMethod",
      "MonthlyCharges",
      "TotalCharges",
      "Churn"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['review_scores_rating'].isin([100]).any()",
    "question": "Is there a listing with a review score rating of 100?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "boolean",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['host_total_listings_count'].max() > 10",
    "question": "Are there any hosts who have listed more than 10 properties?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "boolean",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "New York, New York, United States",
    "df_func": "df['host_location'].mode().values[0]",
    "question": "What is the most common host location?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "category",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "New York, New York, United States",
    "df_func": "df['host_location'].value_counts().idxmax()",
    "question": "Which location has the highest number of listings?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "category",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "Entire apartment",
    "df_func": "df['property_type'].mode().iloc[0]",
    "question": "What is the most common property type?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "category",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['New York, New York, United States', 'US']",
    "df_func": "df['host_location'].value_counts().nlargest(2).index.tolist()",
    "question": "What are the 2 unique host locations with the most listings?",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "list[category]",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "['Entire apartment', 'Private room in apartment']",
    "df_func": "df['property_type'].value_counts().head(2).index.tolist()",
    "question": "What are the 2 most common types of properties?.",
    "columns": [
      "listing_id",
      "name",
      "host_id",
      "host_since",
      "host_location",
      "host_response_time",
      "host_response_rate",
      "host_acceptance_rate",
      "host_is_superhost",
      "host_total_listings_count",
      "host_has_profile_pic",
      "host_identity_verified",
      "neighbourhood",
      "district",
      "city",
      "latitude",
      "longitude",
      "property_type",
      "room_type",
      "accommodates",
      "bedrooms",
      "amenities",
      "price",
      "minimum_nights",
      "maximum_nights",
      "review_scores_rating",
      "review_scores_accuracy",
      "review_scores_cleanliness",
      "review_scores_checkin",
      "review_scores_communication",
      "review_scores_location",
      "review_scores_value",
      "instant_bookable"
    ],
    "types": "list[category]",
    "dataset": "022_Airbnbs",
    "column_types": [
      "uint32",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "category",
      "uint8",
      "float64",
      "object",
      "uint16",
      "uint16",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "minimum_nights",
      "name",
      "host_location",
      "instant_bookable",
      "review_scores_rating",
      "host_total_listings_count",
      "property_type",
      "review_scores_location",
      "bedrooms",
      "listing_id",
      "host_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df[(df['tmin'] < 0) & (df['prec'] == 0)].shape[0] > 0",
    "question": "Was there a day when the minimum temperature was below zero and it didn't rain?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "boolean",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df[(df['sol'] > 10) & (df['tmax'] < 20)].shape[0] > 0",
    "question": "Are there records where the solar radiation exceeds 10 but the maximum temperature was below 20?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "boolean",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Summer",
    "df_func": "df.groupby('season')['sol'].mean().idxmax()",
    "question": "In which season do we find the highest average solar radiation?",
    "columns": [
      "fecha",
      "season",
      "month_name",
      "tmin",
      "tmax",
      "sol",
      "presMax",
      "presMin",
      "prec",
      "velmedia",
      "racha",
      "dir",
      "tmed",
      "horatmax",
      "horatmin",
      "horaPresMax",
      "horaPresMin",
      "horaracha",
      "weekday_name",
      "dayofyear",
      "quarter",
      "year",
      "altitud",
      "nombre",
      "provincia",
      "indicativo"
    ],
    "types": "category",
    "dataset": "023_Climate",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "category",
      "category",
      "uint16"
    ],
    "lite_columns": [
      "racha",
      "dayofyear",
      "tmin",
      "velmedia",
      "month_name",
      "sol",
      "weekday_name",
      "tmed",
      "tmax",
      "prec",
      "season",
      "fecha",
      "presMax"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['RETRINOIN_xRZI'].gt(10000).any()",
    "question": "Are there records where the RETRINOIN_xRZI exceeds 10,000?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "boolean",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df[(df['CONTROL'] == 'PRIVADO') & (df['MERCADO'] == 'NACIONAL')].shape[0] > 0",
    "question": "Do we have respondents who fall under both PRIVADO control and NACIONAL market?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "boolean",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "DE 40 A 49",
    "df_func": "df['ANOS2'].mode().values[0]",
    "question": "Which 'ANOS2' category has the most number of respondents?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "category",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "UNIÓN EUROPEA",
    "df_func": "df['MERCADO'].value_counts().idxmin()",
    "question": "Which 'MERCADO' category is the least common in the dataset?",
    "columns": [
      "clusters_2",
      "RETRINOIN_xRZI",
      "CNO1",
      "CNACE",
      "ESTU",
      "SEXO",
      "ANOS2",
      "NUTS1",
      "ESTRATO2",
      "CONTROL",
      "MERCADO",
      "REGULACION",
      "TIPOPAIS",
      "RESPONSA",
      "ANOANTI",
      "TIPOJOR",
      "TIPOCON",
      "RETRINOIN",
      "RETRINOIN_WwQk",
      "Quantiles_target",
      "_gx_link_targets_",
      "_gx_link_weights_",
      "umap_cluster",
      "x",
      "y",
      "RETRINOIN_ac1q",
      "RETRINOIN_QSbS",
      "RETRINOIN_stfU",
      "RETRINOIN_RxV1"
    ],
    "types": "category",
    "dataset": "024_Salary",
    "column_types": [
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "CNACE",
      "RETRINOIN_ac1q",
      "RETRINOIN_WwQk",
      "CONTROL",
      "SEXO",
      "x",
      "MERCADO",
      "RETRINOIN_xRZI",
      "NUTS1",
      "RETRINOIN",
      "y",
      "ANOS2",
      "umap_cluster"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'no code data science' in df['Keyword'].iloc[0]",
    "question": "Is the most visited URL related to 'no code data science'?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "boolean",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Competition'] == 'Low').any()",
    "question": "Does any URL have a competition level of 'Low'?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "boolean",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Avg. monthly searches'] > 1000).any()",
    "question": "Are there any URLs with an average monthly searches above 1000?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "boolean",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['Avg. monthly searches'].idxmax()]['URLs'] == df.loc[df['Ranking'].idxmin()]['URLs']",
    "question": "Is the URL with the lowest ranking also the one with the highest monthly searches?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "boolean",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "50",
    "df_func": "df['Avg. monthly searches'].min()",
    "question": "What is the minimum average monthly searches in the dataset?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "number",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "6",
    "df_func": "df['Keyword'].nunique()",
    "question": "How many unique keywords are present in the dataset?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "number",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Medium",
    "df_func": "df.loc[df['Ranking'].idxmin()]['Competition']",
    "question": "What is the competition level of the highest-ranked URL?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "category",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "no code data science",
    "df_func": "df.loc[df['Avg. monthly searches'].idxmax()]['Keyword']",
    "question": "What keyword has the highest average monthly searches?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "category",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "no code data science",
    "df_func": "df.loc[df['Ranking'].idxmin()]['Keyword']",
    "question": "What keyword is associated with the URL with the lowest ranking?",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "category",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[50, 50]",
    "df_func": "df.nsmallest(2, 'Avg. monthly searches')['Avg. monthly searches'].tolist()",
    "question": "Specify the bottom 2 average monthly searches for URLs with the highest rankings.",
    "columns": [
      "URLs",
      "Ranking",
      "Keyword",
      "Avg. monthly searches",
      "Competition"
    ],
    "types": "list[number]",
    "dataset": "025_Data",
    "column_types": [
      "category",
      "uint8",
      "category",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "Ranking",
      "Competition",
      "Avg. monthly searches",
      "URLs",
      "Keyword"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "10 in df['quality'].values",
    "question": "Is there any wine with a quality rating of 10?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "boolean",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['alcohol'].idxmax()]['quality'] == df['quality'].max()",
    "question": "Is the highest alcohol content wine also the one with the highest quality rating?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "boolean",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['pH'] < 2.5).any()",
    "question": "Does any wine have a pH level below 2.5?",
    "columns": [
      "fixed acidity",
      "volatile acidity",
      "citric acid",
      "residual sugar",
      "chlorides",
      "free sulfur dioxide",
      "total sulfur dioxide",
      "density",
      "pH",
      "sulphates",
      "alcohol",
      "quality"
    ],
    "types": "boolean",
    "dataset": "026_Predicting",
    "column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint8"
    ],
    "lite_columns": [
      "quality",
      "alcohol",
      "density",
      "pH",
      "volatile acidity",
      "free sulfur dioxide",
      "fixed acidity",
      "residual sugar"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Payment'] == 'Cash').any()",
    "question": "Are there any customers who made a purchase using cash?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "boolean",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "3",
    "df_func": "df['Branch'].nunique()",
    "question": "How many unique branches are there in the dataset?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "number",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "10",
    "df_func": "df['Quantity'].max()",
    "question": "What is the maximum quantity of products bought in a single purchase?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "number",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Credit card",
    "df_func": "df.loc[df['Total'].idxmax()]['Payment']",
    "question": "What is the payment method used for the purchase with the highest total cost?",
    "columns": [
      "Invoice ID",
      "Branch",
      "City",
      "Customer type",
      "Gender",
      "Product line",
      "Unit price",
      "Quantity",
      "Tax 5%",
      "Total",
      "Date",
      "Time",
      "Payment",
      "cogs",
      "gross margin percentage",
      "gross income",
      "Rating"
    ],
    "types": "category",
    "dataset": "027_Supermarket",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "uint8",
      "float64",
      "float64",
      "datetime64[us, UTC]",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "gross income",
      "Unit price",
      "Total",
      "Customer type",
      "Product line",
      "Quantity",
      "Gender",
      "Branch",
      "City",
      "Payment",
      "Rating"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['Glucose'].idxmax()]['Outcome'] == 1",
    "question": "Does the person with the highest glucose level also have diabetes?",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "boolean",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[(df['Pregnancies'] == 0) & (df['Outcome'] == 1)].shape[0] > 0)",
    "question": "Is there anyone who has zero pregnancies and is diabetic?",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "boolean",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "0",
    "df_func": "df['BloodPressure'].min()",
    "question": "What is the minimum blood pressure level recorded in the dataset?",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "number",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "[0, 0]",
    "df_func": "df.nsmallest(2, 'BMI')['Outcome'].tolist()",
    "question": "List the diabetes outcomes of the bottom 2 individuals with the lowest BMI.",
    "columns": [
      "Pregnancies",
      "Glucose",
      "BloodPressure",
      "SkinThickness",
      "Insulin",
      "BMI",
      "DiabetesPedigreeFunction",
      "Age",
      "Outcome"
    ],
    "types": "list[category]",
    "dataset": "028_Predict",
    "column_types": [
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "float64",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "BMI",
      "Age",
      "Glucose",
      "Outcome",
      "Pregnancies",
      "BloodPressure",
      "DiabetesPedigreeFunction",
      "Insulin"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "float64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "'Op-Ed' in df['material_type'].values",
    "question": "Are there any articles that have the material type 'Op-Ed'?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "boolean",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "'United States Politics and Government' in df.loc[df['headline'].str.len().idxmax()]['keywords']",
    "question": "Does the article with the longest headline contain the keyword 'United States Politics and Government'?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "boolean",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "'2021-01-05' in df['date'].values",
    "question": "Is there any article published on '2021-01-05'?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "boolean",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['keywords'].apply(len).max() > 10",
    "question": "Does any article contain more than 10 keywords?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "boolean",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "News",
    "df_func": "df.loc[df['headline'].str.len().idxmax()]['material_type']",
    "question": "What is the material type of the article with the longest headline?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "category",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "News",
    "df_func": "df.loc[df['keywords'].str.len().idxmax()]['material_type']",
    "question": "What is the material type of the article with the most number of keywords?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "category",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "News",
    "df_func": "df.loc[df['keywords'].str.len().idxmin()]['material_type']",
    "question": "What is the material type of the article with the least number of keywords?",
    "columns": [
      "headline",
      "date",
      "material_type",
      "web_url",
      "keywords"
    ],
    "types": "category",
    "dataset": "029_NYTimes",
    "column_types": [
      "object",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object"
    ],
    "lite_columns": [
      "date",
      "keywords",
      "material_type",
      "headline"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Geographies'].value_counts().index[0] == 'USA'",
    "question": "Is the 'USA' the most common entry in the 'Geographies' column?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "boolean",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['What programming language would you recommend an aspiring data scientist to learn first?'].str.contains('Python').all()",
    "question": "Do all participants recommend Python as the first programming language?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "boolean",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df[df['Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?'] == 'AWS'].shape[0] > 1000",
    "question": "Are there more than 1000 participants who hope to become familiar with AWS in the next 2 years?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "boolean",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "A laptop",
    "df_func": "df['What type of computing platform do you use most often for your data science projects?'].mode().iloc[0]",
    "question": "What's the most common computing platform used for data science projects?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "category",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "United States of America",
    "df_func": "df['In which country do you currently reside?'].value_counts().index[1]",
    "question": "Which country has the second highest number of participants?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "category",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Data Scientist",
    "df_func": "df['Select the title most similar to your current role (or most recent title if retired)'].mode().iloc[0]",
    "question": "Which title is the most common among participants?",
    "columns": [
      "Geographies",
      "Labeled Clusters",
      "General Segments",
      "Select the title most similar to your current role (or most recent title if retired)",
      "In which country do you currently reside?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?_rx_K",
      "(Average) What is the size of the company where you are employed?",
      "(Average) For how many years have you been writing code and_or programming?",
      "Which of the following natural language processing (NLP) methods do you use on a regular basis?",
      "Which of the following integrated development environments (IDE's) do you use on a regular basis?",
      "What is your current yearly compensation (approximate $USD)?",
      "Which of the following cloud computing platforms do you use on a regular basis?",
      "Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?",
      "Which of the following ML algorithms do you use on a regular basis?,Which of the following ML algorithms do you use on a regular basis?",
      "For how many years have you been writing code and_or programming?",
      "What is the size of the company where you are employed?",
      "(Average) Approximately how much money have you (or your team) spent on machine",
      "(Average) What is your current yearly compensation (approximate $USD)?",
      "Which types of specialized hardware do you use on a regular basis?",
      "(Average) Approximately how many individuals are responsible for data science wo",
      "Which of the following business intelligence tools do you use on a regular basis?",
      "Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?",
      "(Average) Approximately how many times have you used a TPU (tensor processing unit)?",
      "Do you use any of the following data storage products on a regular basis?",
      "Approximately how many individuals are responsible for data science workloads at your place of business?",
      "Of the cloud platforms that you are familiar with, which has the best developer experience (most enjoyable to use)?",
      "On which platforms have you begun or completed data science courses?",
      "Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Do you use any of the following managed machine learning products on a regular basis?",
      "Who_what are your favorite media sources that report on data science topics?",
      "In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?",
      "Do you use any tools to help manage machine learning experiments?",
      "Where do you publicly share your data analysis or machine learning applications?",
      "Do you use any of the following cloud computing products on a regular basis?",
      "In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?",
      "What is your gender?",
      "Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?",
      "Which categories of computer vision methods do you use on a regular basis?",
      "For how many years have you used machine learning methods?",
      "Which of the following machine learning frameworks do you use on a regular basis?,Which of the following machine learning frameworks do you use on a regular basis?",
      "(Average) What is your age (years)?",
      "Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?",
      "Which of the following business intelligence tools do you use most often?",
      "What is the primary tool that you use at work or school to analyze data?",
      "Does your current employer incorporate machine learning methods into their business?",
      "Approximately how many times have you used a TPU (tensor processing unit)?",
      "Which of the following hosted notebook products do you use on a regular basis?",
      "What is the highest level of formal education that you have attained or plan to attain within the next 2 years?",
      "In what industry is your current employer_contract (or your most recent employer if retired)?",
      "Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?",
      "Time from Start to finish (seconds)",
      "ID",
      "Approximately how much money have you (or your team) spent on machine learning and_or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?",
      "In the next 2 years, do you hope to become more familiar with any of these managed machine learning products?",
      "Select any activities that make up an important part of your role at work",
      "What data visualization libraries or tools do you use on a regular basis?",
      "Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?",
      "What is your age (years)?",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What programming languages do you use on a regular basis?",
      "What type of computing platform do you use most often for your data science projects?"
    ],
    "types": "category",
    "dataset": "030_Professionals",
    "column_types": [
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "object",
      "category",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "category",
      "object",
      "object",
      "category",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "category",
      "category",
      "object",
      "uint32",
      "uint16",
      "category",
      "object",
      "object",
      "object",
      "object",
      "category",
      "category",
      "object",
      "object",
      "category"
    ],
    "lite_columns": [
      "Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?",
      "What type of computing platform do you use most often for your data science projects?",
      "What is your age (years)?",
      "In which country do you currently reside?",
      "Select the title most similar to your current role (or most recent title if retired)",
      "Labeled Clusters",
      "General Segments",
      "What programming languages do you use on a regular basis?",
      "Geographies",
      "What programming language would you recommend an aspiring data scientist to learn first?",
      "What is the size of the company where you are employed?",
      "(Average) For how many years have you used machine learning methods?",
      "(Average) What is your current yearly compensation (approximate $USD)?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[df['rating'] == 5][df['country_code'] == 'GB'].shape[0] > df[df['rating'] == 5][df['country_code'] == 'US'].shape[0])",
    "question": "Are there more reviews with rating 5 from 'GB' than 'US'?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "boolean",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df[(df['Company'] == 'Wise') & (df['country_code'] == 'GB')]['rating'].mean() > 4",
    "question": "Is the average rating for 'Wise' in 'GB' above 4?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "boolean",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['rating'].eq(1).any()",
    "question": "Did any reviews receive a rating of 1?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "boolean",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "5",
    "df_func": "df['rating'].max()",
    "question": "What is the highest rating received?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "number",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Wise",
    "df_func": "df.loc[df['rating'] == 5, 'Company'].value_counts().idxmax()",
    "question": "Which company received the most 5-star reviews?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "category",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "N26",
    "df_func": "df.loc[df['rating'].idxmin()]['Company']",
    "question": "Which company received the lowest rating?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "category",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Wise', 'N26']",
    "df_func": "df['Company'].unique().tolist()",
    "question": "Which are the 2 companies represented in the dataset?",
    "columns": [
      "published_date",
      "country_code",
      "title",
      "body",
      "rating",
      "Company"
    ],
    "types": "list[category]",
    "dataset": "031_Trustpilot",
    "column_types": [
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "uint8",
      "category"
    ],
    "lite_columns": [
      "rating",
      "country_code",
      "Company"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Marital_Status'].eq('Married').any()",
    "question": "Do we have any customers who are married?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "boolean",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Graduation",
    "df_func": "df['Education'].mode().values[0]",
    "question": "What's the most common education level among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "category",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Married",
    "df_func": "df['Marital_Status'].mode().values[0]",
    "question": "What's the most common marital status among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "category",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Married', 'Together', 'Single']",
    "df_func": "df['Marital_Status'].value_counts().index[:3].tolist()",
    "question": "What are the 3 most common marital statuses among our customers?",
    "columns": [
      "ID",
      "Year_Birth",
      "Education",
      "Marital_Status",
      "Income",
      "Kidhome",
      "Teenhome",
      "Dt_Customer",
      "Recency",
      "MntWines",
      "MntFruits",
      "MntMeatProducts",
      "MntFishProducts",
      "MntSweetProducts",
      "MntGoldProds",
      "NumDealsPurchases",
      "NumWebPurchases",
      "NumCatalogPurchases",
      "NumStorePurchases",
      "NumWebVisitsMonth",
      "AcceptedCmp3",
      "AcceptedCmp4",
      "AcceptedCmp5",
      "AcceptedCmp1",
      "AcceptedCmp2",
      "Complain",
      "Z_CostContact",
      "Z_Revenue",
      "Response"
    ],
    "types": "list[category]",
    "dataset": "032_Delicatessen",
    "column_types": [
      "uint16",
      "uint16",
      "category",
      "category",
      "float64",
      "uint8",
      "uint8",
      "datetime64[us, UTC]",
      "uint8",
      "uint16",
      "uint8",
      "uint16",
      "uint16",
      "uint16",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "ID",
      "Recency",
      "NumWebPurchases",
      "Education",
      "Marital_Status",
      "Income"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Work Accident'].any()",
    "question": "Do we have any employees who suffered a work accident?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "boolean",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Average Monthly Hours'] > 100).any()",
    "question": "Is there any employee with more than 100 hours per month on average?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "boolean",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Satisfaction Level'].max() > 0.9",
    "question": "Does any employee have a satisfaction level above 0.9?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "boolean",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['No', 'Yes']",
    "df_func": "df['Work Accident'].value_counts().index[:2].tolist()",
    "question": "What are the top 2 most common Work Accident statuses among our employees?",
    "columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "types": "list[category]",
    "dataset": "033_Employee",
    "column_types": [
      "category",
      "float64",
      "category",
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "category",
      "datetime64[ns, UTC]",
      "category"
    ],
    "lite_columns": [
      "Left",
      "Satisfaction Level",
      "Work Accident",
      "Average Monthly Hours",
      "Last Evaluation",
      "Years in the Company",
      "salary",
      "Department",
      "Number of Projects",
      "Promoted in the last 5 years?",
      "Date Hired",
      "Marital_Status"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "int64",
      "float64",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[(df['Perceptions of corruption'] > 0.5) & (df['Regional indicator'] == 'Western Europe')].shape[0] > 0)",
    "question": "Are there any countries in Western Europe with a Perceptions of corruption score above 0.5?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "boolean",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Western Europe",
    "df_func": "df[(df['Ladder score']>7) & (df['Generosity']>0.2)]['Regional indicator'].value_counts().idxmax()",
    "question": "Which region has the highest number of countries with a Ladder score above 7 and a Generosity score above 0.2?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "category",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Western Europe",
    "df_func": "df.loc[df['Generosity'] > 0.2, 'Regional indicator'].value_counts().idxmax()",
    "question": "Which region accounts for the most countries with a Generosity score above 0.2?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "category",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Western Europe",
    "df_func": "df.loc[df['Perceptions of corruption'] < 0.5]['Regional indicator'].mode().values[0]",
    "question": "In which region are the majority of countries with a Perceptions of corruption score below 0.5 located?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "category",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Western Europe",
    "df_func": "df.loc[df['Social support'] > 0.7, 'Regional indicator'].mode().values[0]",
    "question": "In which region can you find the majority of countries with a Social support score above 0.7?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "category",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Western Europe']",
    "df_func": "df[(df['Ladder score'] > 7) & (df['Generosity'] > 0.2)].groupby('Regional indicator').size().sort_values(ascending=False).head(3).index.tolist()",
    "question": "Can you name the three regions that have the most countries with a Ladder score above 7 and a Generosity score above 0.2?",
    "columns": [
      "Country name",
      "Regional indicator",
      "Ladder score",
      "Standard error of ladder score",
      "upperwhisker",
      "lowerwhisker",
      "Logged GDP per capita",
      "Social support",
      "Healthy life expectancy",
      "Freedom to make life choices",
      "Generosity",
      "Perceptions of corruption",
      "Ladder score in Dystopia",
      "Explained by: Log GDP per capita",
      "Explained by: Social support",
      "Explained by: Healthy life expectancy",
      "Explained by: Freedom to make life choices",
      "Explained by: Generosity",
      "Explained by: Perceptions of corruption",
      "Dystopia + residual"
    ],
    "types": "list[category]",
    "dataset": "034_World",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Ladder score",
      "Social support",
      "Perceptions of corruption",
      "Regional indicator",
      "Generosity"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Rank'].idxmax()]['Artist'] == df.loc[df['Rank'].idxmin()]['Artist']",
    "question": "Is the artist of the song with the highest rank the same as the artist of the song with the lowest rank?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "boolean",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Rank'].idxmin()]['Artist'] == 'The Beatles' and df.loc[df['Rank'].idxmin()]['Year'] == 1965",
    "question": "Is the song with the highest rank from 1965 by the Beatles?",
    "columns": [
      "Rank",
      "Song",
      "Artist",
      "Year",
      "Lyrics",
      "Source"
    ],
    "types": "boolean",
    "dataset": "035_Billboard",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "object",
      "float64"
    ],
    "lite_columns": [
      "Artist",
      "Rank",
      "Lyrics",
      "Year",
      "Song"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Jefferson' in df['name_origin'].tolist()",
    "question": "Do we have any records originating from 'Jefferson'?",
    "columns": [
      "dest",
      "origin",
      "count",
      "name_dest",
      "name_origin",
      "lat_dest",
      "lon_dest",
      "lat_origin",
      "lon_origin"
    ],
    "types": "boolean",
    "dataset": "036_US",
    "column_types": [
      "uint32",
      "float64",
      "uint16",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "lon_origin",
      "lat_dest",
      "name_origin",
      "lon_dest",
      "name_dest",
      "count",
      "dest",
      "lat_origin"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['views'] > 1e6).any()",
    "question": "Are there talks with more than a million views?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "boolean",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['available_lang'].nunique() > 10",
    "question": "Are there talks available in more than 10 languages?",
    "columns": [
      "talk_id",
      "title",
      "speaker_1",
      "all_speakers",
      "occupations",
      "about_speakers",
      "views",
      "recorded_date",
      "published_date",
      "event",
      "native_lang",
      "available_lang",
      "comments",
      "duration",
      "topics",
      "related_talks",
      "url",
      "description",
      "transcript"
    ],
    "types": "boolean",
    "dataset": "037_Ted",
    "column_types": [
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "object",
      "uint32",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]",
      "category",
      "category",
      "object",
      "float64",
      "uint16",
      "object",
      "object",
      "category",
      "object",
      "object"
    ],
    "lite_columns": [
      "views",
      "title",
      "available_lang",
      "speaker_1",
      "duration",
      "comments",
      "event"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['smoking_status'] =='smokes')[(df['hypertension']!= 'Yes')].empty",
    "question": "Do all smokers have hypertension?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "boolean",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Private",
    "df_func": "df['work_type'].mode().values[0]",
    "question": "What is the most common work type among stroke patients?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "category",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Unknown",
    "df_func": "df.loc[df['age'].idxmin()]['smoking_status']",
    "question": "What is the smoking status of the youngest person in the dataset?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "category",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Female",
    "df_func": "df.loc[df['avg_glucose_level'].idxmin()]['gender']",
    "question": "What is the gender of the person with the lowest glucose level?",
    "columns": [
      "id",
      "gender",
      "age",
      "hypertension",
      "heart_disease",
      "ever_married",
      "work_type",
      "Residence_type",
      "avg_glucose_level",
      "bmi",
      "smoking_status",
      "stroke"
    ],
    "types": "category",
    "dataset": "038_Stroke",
    "column_types": [
      "uint32",
      "category",
      "float64",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "category",
      "uint8"
    ],
    "lite_columns": [
      "smoking_status",
      "heart_disease",
      "gender",
      "age",
      "work_type",
      "stroke",
      "bmi",
      "Residence_type",
      "ever_married",
      "avg_glucose_level",
      "hypertension"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "('affection' in df['predicted_category'].values)",
    "question": "Are there any reflections categorized as 'affection'?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "boolean",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "2",
    "df_func": "df['reflection_period'].nunique()",
    "question": "How many unique reflection periods are there?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "number",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "f",
    "df_func": "df[df['predicted_category'] == 'affection'].groupby('gender').size().idxmax()",
    "question": "Which gender has the most reflections categorized as 'affection'?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "category",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "USA",
    "df_func": "df.loc[df['age'].idxmax()]['country']",
    "question": "From which country is the oldest individual who reflected?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "category",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "single",
    "df_func": "df['marital'].value_counts().idxmax()",
    "question": "Which marital status has the most reflections on 'bonding'?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "category",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[1, 1, 1, 1]",
    "df_func": "df['num_sentence'].nsmallest(4).tolist()",
    "question": "What are the lowest 4 number of sentences?",
    "columns": [
      "wid",
      "reflection_period",
      "cleaned_hm",
      "num_sentence",
      "ground_truth_category",
      "predicted_category",
      "age",
      "country",
      "gender",
      "marital",
      "parenthood"
    ],
    "types": "list[number]",
    "dataset": "039_Happy",
    "column_types": [
      "uint16",
      "category",
      "object",
      "uint8",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "wid",
      "gender",
      "age",
      "marital",
      "predicted_category",
      "reflection_period",
      "num_sentence",
      "country"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df[df['age'] == df['age'].min()]['match'].values[0] == 1)",
    "question": "Is it true that the youngest participant has met their match?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "boolean",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['match'].eq(True) & df['samerace'].eq(True)).all()",
    "question": "Do all people who got a match have the same race as their partner?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "boolean",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[df['expected_num_matches'] > 5]['gender'] =='male').all()",
    "question": "Are all participants who expected more than 5 matches male?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "boolean",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "european/caucasian-american",
    "df_func": "df.loc[df['match'] == 1, 'race'].mode().iloc[0]",
    "question": "What is the most common race among participants who got a match?",
    "columns": [
      "has_null",
      "wave",
      "gender",
      "age",
      "age_o",
      "d_age",
      "d_d_age",
      "race",
      "race_o",
      "samerace",
      "importance_same_race",
      "importance_same_religion",
      "d_importance_same_race",
      "d_importance_same_religion",
      "field",
      "pref_o_attractive",
      "pref_o_sincere",
      "pref_o_intelligence",
      "pref_o_funny",
      "pref_o_ambitious",
      "pref_o_shared_interests",
      "d_pref_o_attractive",
      "d_pref_o_sincere",
      "d_pref_o_intelligence",
      "d_pref_o_funny",
      "d_pref_o_ambitious",
      "d_pref_o_shared_interests",
      "attractive_o",
      "sinsere_o",
      "intelligence_o",
      "funny_o",
      "ambitous_o",
      "shared_interests_o",
      "d_attractive_o",
      "d_sinsere_o",
      "d_intelligence_o",
      "d_funny_o",
      "d_ambitous_o",
      "d_shared_interests_o",
      "attractive_important",
      "sincere_important",
      "intellicence_important",
      "funny_important",
      "ambtition_important",
      "shared_interests_important",
      "d_attractive_important",
      "d_sincere_important",
      "d_intellicence_important",
      "d_funny_important",
      "d_ambtition_important",
      "d_shared_interests_important",
      "attractive",
      "sincere",
      "intelligence",
      "funny",
      "ambition",
      "d_attractive",
      "d_sincere",
      "d_intelligence",
      "d_funny",
      "d_ambition",
      "attractive_partner",
      "sincere_partner",
      "intelligence_partner",
      "funny_partner",
      "ambition_partner",
      "shared_interests_partner",
      "d_attractive_partner",
      "d_sincere_partner",
      "d_intelligence_partner",
      "d_funny_partner",
      "d_ambition_partner",
      "d_shared_interests_partner",
      "sports",
      "tvsports",
      "exercise",
      "dining",
      "museums",
      "art",
      "hiking",
      "gaming",
      "clubbing",
      "reading",
      "tv",
      "theater",
      "movies",
      "concerts",
      "music",
      "shopping",
      "yoga",
      "d_sports",
      "d_tvsports",
      "d_exercise",
      "d_dining",
      "d_museums",
      "d_art",
      "d_hiking",
      "d_gaming",
      "d_clubbing",
      "d_reading",
      "d_tv",
      "d_theater",
      "d_movies",
      "d_concerts",
      "d_music",
      "d_shopping",
      "d_yoga",
      "interests_correlate",
      "d_interests_correlate",
      "expected_happy_with_sd_people",
      "expected_num_interested_in_me",
      "expected_num_matches",
      "d_expected_happy_with_sd_people",
      "d_expected_num_interested_in_me",
      "d_expected_num_matches",
      "like",
      "guess_prob_liked",
      "d_like",
      "d_guess_prob_liked",
      "met",
      "decision",
      "decision_o",
      "match"
    ],
    "types": "category",
    "dataset": "040_Speed",
    "column_types": [
      "uint8",
      "uint8",
      "category",
      "float64",
      "float64",
      "uint8",
      "object",
      "category",
      "category",
      "uint8",
      "float64",
      "float64",
      "object",
      "object",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "object",
      "object",
      "float64",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "expected_num_matches",
      "gender",
      "age",
      "race",
      "wave",
      "samerace",
      "match"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "object",
      "int64",
      "int64",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Late Flight' in df['negativereason'].tolist()",
    "question": "Are there any tweets categorized with 'Late Flight' as the negative reason?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "boolean",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[(df['user_timezone'] == 'Eastern Time (US & Canada)') & (df['airline_sentiment'] == 'positive')].shape[0] > 0)",
    "question": "Are there any tweets from 'Eastern Time (US & Canada)' timezone with positive sentiment?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "boolean",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Eastern Time (US & Canada)",
    "df_func": "df.loc[df['airline_sentiment_confidence'].idxmax()]['user_timezone']",
    "question": "From which timezone is the tweet with the highest sentiment confidence?",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "category",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]",
    "df_func": "df['airline_sentiment_confidence'].sort_values(ascending=False).head(6).tolist()",
    "question": "List the 6 highest sentiment confidence values.",
    "columns": [
      "tweet_id",
      "airline_sentiment",
      "airline_sentiment_confidence",
      "negativereason",
      "negativereason_confidence",
      "airline",
      "airline_sentiment_gold",
      "name",
      "negativereason_gold",
      "retweet_count",
      "text",
      "tweet_coord",
      "tweet_created",
      "tweet_location",
      "user_timezone"
    ],
    "types": "list[number]",
    "dataset": "041_Airline",
    "column_types": [
      "int64",
      "category",
      "float64",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "object",
      "object",
      "datetime64[us, UTC]",
      "category",
      "category"
    ],
    "lite_columns": [
      "retweet_count",
      "negativereason",
      "user_timezone",
      "airline_sentiment_confidence",
      "tweet_id",
      "airline",
      "airline_sentiment"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df.loc[df['romantic'] == 'yes', 'age'] > 17).all()",
    "question": "Are all students who are in a romantic relationship older than 17?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "boolean",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df[df['Pstatus'] == 'T'].all()['freetime'] > 3",
    "question": "Do all students who have both parents at home (Pstatus = 'T') have more than 3 free time after school (freetime > 3)?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "boolean",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "2",
    "df_func": "df['school'].nunique()",
    "question": "How many unique schools are there in the dataset?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "number",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "other",
    "df_func": "df[df['higher'] == 'yes']['Mjob'].mode().iloc[0]",
    "question": "What is the most common mother's job among students who want to take higher education?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "category",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "M",
    "df_func": "df.loc[df['G3'].idxmax()]['sex']",
    "question": "What is the gender of the student with the highest final grade (G3)?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "category",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "GP",
    "df_func": "df.loc[df['absences'].idxmax()]['school']",
    "question": "What is the school of the student with the highest number of absences?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "category",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "GT3",
    "df_func": "df.loc[df['G3'].idxmax()]['famsize']",
    "question": "What is the family size of the student with the highest final grade (G3)?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "category",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['course', 'home', 'reputation']",
    "df_func": "df.loc[df['higher'] == 'yes','reason'].value_counts().index[:3].tolist()",
    "question": "What are the top 3 reasons for choosing a school among students who want to take higher education?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "list[category]",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['GP', 'MS']",
    "df_func": "df[df['absences'] > 10].groupby('school')['absences'].count().sort_values(ascending=False).head(4).index.tolist()",
    "question": "What are the top 4 schools among students with absences above 10?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "list[category]",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[4, 5]",
    "df_func": "df.loc[df['G3'] < 10, 'famrel'].value_counts().head(2).index.tolist()",
    "question": "What are the top 2 family relations among students with a final grade below 10?",
    "columns": [
      "school",
      "sex",
      "age",
      "address",
      "famsize",
      "Pstatus",
      "Medu",
      "Fedu",
      "Mjob",
      "Fjob",
      "reason",
      "guardian",
      "traveltime",
      "studytime",
      "failures",
      "schoolsup",
      "famsup",
      "paid",
      "activities",
      "nursery",
      "higher",
      "internet",
      "romantic",
      "famrel",
      "freetime",
      "goout",
      "Dalc",
      "Walc",
      "health",
      "absences",
      "G1",
      "G2",
      "G3"
    ],
    "types": "list[category]",
    "dataset": "042_Predict",
    "column_types": [
      "category",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "famrel",
      "sex",
      "romantic",
      "Mjob",
      "famsize",
      "age",
      "school",
      "Pstatus",
      "absences",
      "address",
      "Dalc",
      "freetime",
      "Medu",
      "G3",
      "reason",
      "higher"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df[df['default_amount'] > 250000]['Sector'].eq('FOOD').all()",
    "question": "Are all companies with a default amount greater than $250,000 in the food sector?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "boolean",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df[df['UrbanRural'] == 1]['RetainedJob'].mean() > df[df['UrbanRural'] == 0]['RetainedJob'].mean())",
    "question": "Is the average number of retained jobs higher for companies located in urban (UrbanRural=1) areas than those in rural (UrbanRural=0) areas?",
    "columns": [
      "LoanNr_ChkDgt",
      "Name",
      "Sector",
      "City",
      "State",
      "Zip",
      "Bank",
      "BankState",
      "NAICS",
      "ApprovalFY",
      "NoEmp",
      "NewExist",
      "CreateJob",
      "RetainedJob",
      "FranchiseCode",
      "UrbanRural",
      "DisbursementGross",
      "GrAppv",
      "SBA_Appv",
      "default_amount"
    ],
    "types": "boolean",
    "dataset": "043_Predict",
    "column_types": [
      "int64",
      "category",
      "category",
      "category",
      "category",
      "uint32",
      "category",
      "category",
      "uint32",
      "uint16",
      "uint16",
      "float64",
      "uint16",
      "uint16",
      "uint32",
      "uint8",
      "uint32",
      "uint32",
      "uint32",
      "uint32"
    ],
    "lite_columns": [
      "NoEmp",
      "DisbursementGross",
      "UrbanRural",
      "Sector",
      "ApprovalFY",
      "RetainedJob",
      "State",
      "FranchiseCode",
      "default_amount",
      "Bank"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df[df['country'] == 'USA']['duration'].mean() > df[df['country']!= 'USA']['duration'].mean()) and df['language'].str.contains('English').any()",
    "question": "Is the average duration of English language movies from the USA longer than those from non-USA countries?",
    "columns": [
      "imdb_title_id",
      "title",
      "original_title",
      "year",
      "date_published",
      "genre",
      "duration",
      "country",
      "language",
      "director",
      "writer",
      "production_company",
      "actors",
      "description",
      "avg_vote",
      "votes",
      "budget",
      "usa_gross_income",
      "worlwide_gross_income",
      "metascore",
      "reviews_from_users",
      "reviews_from_critics"
    ],
    "types": "boolean",
    "dataset": "044_IMDb",
    "column_types": [
      "category",
      "category",
      "category",
      "float64",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "object",
      "float64",
      "uint32",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "language",
      "genre",
      "year",
      "votes",
      "duration",
      "metascore",
      "country"
    ],
    "lite_column_types": [
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df[(df['release_year']==2020) & (df['popularity']==df['popularity'].max())].shape[0] > 0)",
    "question": "Did any song released in the year 2020 in the dataset achieve the maximum popularity?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "boolean",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['duration_ms'].idxmax()]['energy'] == df['energy'].max()",
    "question": "Does the song with the longest duration also have the highest energy?",
    "columns": [
      "id",
      "name",
      "popularity",
      "duration_ms",
      "artists",
      "id_artists",
      "danceability",
      "energy",
      "key",
      "loudness",
      "speechiness",
      "acousticness",
      "instrumentalness",
      "liveness",
      "valence",
      "tempo",
      "release_year",
      "release_month",
      "release_day"
    ],
    "types": "boolean",
    "dataset": "045_Predict",
    "column_types": [
      "uint16",
      "category",
      "uint8",
      "float64",
      "object",
      "object",
      "float64",
      "float64",
      "uint8",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "release_month",
      "name",
      "energy",
      "duration_ms",
      "release_year",
      "artists",
      "popularity"
    ],
    "lite_column_types": [
      "float64",
      "object",
      "float64",
      "float64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['ID'].idxmin()]['Age'] > 30",
    "question": "Is it true that the athlete with the lowest ID is older than 30 years?",
    "columns": [
      "ID",
      "Name",
      "Sex",
      "Age",
      "Height",
      "Weight",
      "Team",
      "NOC",
      "Games",
      "Year",
      "Season",
      "City",
      "Sport",
      "Event",
      "Medal"
    ],
    "types": "boolean",
    "dataset": "046_120",
    "column_types": [
      "uint32",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Height",
      "ID",
      "Age",
      "Team",
      "Weight",
      "Name",
      "Medal",
      "City",
      "Year",
      "Sport"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Weight'].idxmax()]['Sport'] == df['Sport'].value_counts().idxmax()",
    "question": "Does the athlete with the highest weight also participate in the sport with the most athletes?",
    "columns": [
      "ID",
      "Name",
      "Sex",
      "Age",
      "Height",
      "Weight",
      "Team",
      "NOC",
      "Games",
      "Year",
      "Season",
      "City",
      "Sport",
      "Event",
      "Medal"
    ],
    "types": "boolean",
    "dataset": "046_120",
    "column_types": [
      "uint32",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "category",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Height",
      "ID",
      "Age",
      "Team",
      "Weight",
      "Name",
      "Medal",
      "City",
      "Year",
      "Sport"
    ],
    "lite_column_types": [
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['customer_age'] < 18).any()",
    "question": "Does the dataset contain customers who are under the age of 18?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "boolean",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['total_trans_amt'] == 0).any()",
    "question": "Are there any customers with a total transaction amount of zero?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "boolean",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['credit_limit'] > 50000).any()",
    "question": "Does the dataset include customers with a credit limit exceeding $50,000?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "boolean",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df[df['attrition_flag'] == 'Attrited Customer']['months_inactive_12_mon'] > 12).any()",
    "question": "Are there any customers in the dataset who are inactive for more than 12 months?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "boolean",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "34516.0",
    "df_func": "df['credit_limit'].max()",
    "question": "What is the highest credit limit in the dataset?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "number",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "2517",
    "df_func": "df['total_revolving_bal'].max()",
    "question": "What is the largest total revolving balance in the dataset?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "number",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Graduate",
    "df_func": "df['education_level'].mode().iloc[0]",
    "question": "What is the most common level of education among the customers?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "category",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Less than $40K",
    "df_func": "df['income_category'].value_counts().index[0]",
    "question": "What is the most common income category of the customers?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "category",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "F",
    "df_func": "df['gender'].mode().values[0]",
    "question": "Which gender is most represented among the customers?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "category",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "0",
    "df_func": "df['attrition_flag'].mode().values[0]",
    "question": "What is the most common attrition flag value?",
    "columns": [
      "id",
      "attrition_flag",
      "customer_age",
      "gender",
      "education_level",
      "income_category",
      "total_relationship_count",
      "months_inactive_12_mon",
      "credit_limit",
      "total_revolving_bal",
      "total_amt_chng_q4_q1",
      "total_trans_amt",
      "total_trans_ct",
      "total_ct_chng_q4_q1",
      "avg_utilization_ratio"
    ],
    "types": "category",
    "dataset": "047_Bank",
    "column_types": [
      "uint16",
      "uint8",
      "uint8",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "float64",
      "uint16",
      "float64",
      "uint16",
      "uint8",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "customer_age",
      "attrition_flag",
      "total_trans_amt",
      "months_inactive_12_mon",
      "gender",
      "id",
      "total_revolving_bal",
      "education_level",
      "credit_limit",
      "income_category"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Location'].str.contains('New York, NY').any()",
    "question": "Are there any job positions available in 'New York, NY'?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "boolean",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Founded'] < 1900).any()",
    "question": "Are there any job listings from companies founded before 1900?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "boolean",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['python_yn'].any()",
    "question": "Are there any job listings that require Python skills?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "boolean",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Data Engineer' in df['Job Title'].values",
    "question": "Is there a job listing for a 'Data Engineer' role?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "boolean",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "CA",
    "df_func": "df['job_state'].value_counts().idxmax()",
    "question": "Which state has the most number of job listings?",
    "columns": [
      "Job Title",
      "Salary Estimate",
      "Job Description",
      "Rating",
      "Company Name",
      "Location",
      "Headquarters",
      "Size",
      "Founded",
      "Type of ownership",
      "Industry",
      "Sector",
      "Revenue",
      "Competitors",
      "hourly",
      "employer_provided",
      "min_salary",
      "max_salary",
      "avg_salary",
      "company_txt",
      "job_state",
      "same_state",
      "age",
      "python_yn",
      "R_yn",
      "spark",
      "aws",
      "excel"
    ],
    "types": "category",
    "dataset": "048_Data",
    "column_types": [
      "category",
      "object",
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "int16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint16",
      "float64",
      "category",
      "category",
      "uint8",
      "int16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "Founded",
      "Rating",
      "Sector",
      "Industry",
      "age",
      "Type of ownership",
      "Size",
      "avg_salary",
      "python_yn",
      "Location",
      "job_state",
      "Job Title"
    ],
    "lite_column_types": [
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "float64",
      "int64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['user_followers_count<gx:number>'] > df['user_following_count<gx:number>']).any()",
    "question": "Are there any authors in the dataset who have more followers than people they are following?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['replies<gx:number>'].gt(df['retweets<gx:number>']).any()",
    "question": "Is there any tweet in the dataset that has more replies<gx:number> than retweets<gx:number>?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "not df['image_links<gx:list[url]>'].isnull().all()",
    "question": "Does the dataset contain any tweets that include image links?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "1",
    "df_func": "df['author_id<gx:category>'].nunique()",
    "question": "How many unique authors are present in the dataset?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "number",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "en",
    "df_func": "df['lang<gx:category>'].value_counts().idxmax()",
    "question": "Which language is most commonly used in the tweets?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>",
    "df_func": "df['source<gx:text>'].mode().iloc[0]",
    "question": "What is the most common source of tweets?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "original",
    "df_func": "df['type<gx:category>'].value_counts().index[0]",
    "question": "Which type of tweet (e.g., original, retweet, quote) is most common in the dataset?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[3543402, 3543402, 3543402]",
    "df_func": "df['user_followers_count<gx:number>'].nlargest(3).tolist()",
    "question": "What are the highest three numbers of followers count present in the dataset?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[number]",
    "dataset": "049_Boris",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint16",
      "uint32",
      "uint16",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['author_name'].str.len().idxmax()]['type'] == 'original'",
    "question": "Does the author with the longest name post mainly original content?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "boolean",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['retweets'].min() == 0",
    "question": "Is there an author who received no retweets for any of their posts?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "boolean",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "61",
    "df_func": "df['text'].str.split().map(len).max()",
    "question": "What is the length of the longest post (based on the number of words)?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "number",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "1243",
    "df_func": "df['retweets'].sum()",
    "question": "What is the total number of retweets received by all authors in the dataset?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "number",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "es",
    "df_func": "df.loc[df['favorites'].idxmax()]['lang']",
    "question": "What is the language of the most favorited post?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "category",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "juan prin",
    "df_func": "df.loc[df['text'].str.split().str.len().idxmax()]['author_name']",
    "question": "Who is the author of the post with the most words?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "category",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "reply",
    "df_func": "df['type'].mode().values[0]",
    "question": "What type of post (original, reply, or other) is the most common in the dataset?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "category",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Lavincompae', '#NI UNA MENOS \\xa0♐\\xa0✊\\xa0🚺', 'SFC The World']",
    "df_func": "df.nlargest(3,'retweets')['author_name'].tolist()",
    "question": "Who are the authors of the top 3 most retweeted posts?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "list[category]",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Correctorada', 'El Joker', 'Xenia Viladas', 'DrJaus \\xa0🇪🇸']",
    "df_func": "df.loc[df['text'].apply(lambda x: len(x.split())).nsmallest(4).index]['author_name'].tolist()",
    "question": "Who are the authors of the 4 shortest posts (based on the number of words)?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "list[category]",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['reply', 'original']",
    "df_func": "df['type'].value_counts().head(6).index.tolist()",
    "question": "What types of posts are the 6 most common in the dataset?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "list[category]",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[0, 0, 0, 0, 3]",
    "df_func": "df.nlargest(5, 'favorites')['retweets'].tolist()",
    "question": "What are the retweet counts for the top 5 most favorited posts?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "list[number]",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[61, 60, 59]",
    "df_func": "df['text'].apply(lambda x: len(str(x).split())).nlargest(3).tolist()",
    "question": "What are the word counts of the 3 longest posts?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "list[number]",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[0, 0, 1, 0]",
    "df_func": "df.nsmallest(4, 'favorites')['retweets'].tolist()",
    "question": "What are the retweet counts of the 4 least favorited posts?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "list[number]",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[1, 1, 1, 1, 1, 1]",
    "df_func": "df['text'].str.split().map(len).sort_values().head(6).tolist()",
    "question": "What are the word counts for the 6 shortest posts?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "list[number]",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Pikachu' in df['name'].values",
    "question": "Is there a Pokémon named 'Pikachu' in the dataset?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "boolean",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['total'].gt(700).any()",
    "question": "Are there any Pokémon with a total stat greater than 700?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "boolean",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df.loc[df['generation'] == 1]['legendary'] == True).all()",
    "question": "Are all Pokémon in the first generation legendary?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "boolean",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['speed'] > 150).any()",
    "question": "Is there any Pokémon with a speed greater than 150?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "boolean",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "20",
    "df_func": "df['type1'].nunique()",
    "question": "How many unique Pokémon types are there in the 'type1' column?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "number",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "1125",
    "df_func": "df['total'].max()",
    "question": "What's the highest total stat value found in the dataset?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "number",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "160",
    "df_func": "df.loc[df['generation']==3].shape[0]",
    "question": "How many Pokémon are there in the third generation?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "number",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Poison",
    "df_func": "df.loc[df['defense'].idxmax()]['type1']",
    "question": "What is the primary type of the Pokémon with the highest defense stat?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "category",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Shuckle",
    "df_func": "df.loc[df['speed'].idxmin()]['name']",
    "question": "Which Pokémon has the lowest speed stat?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "category",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Psychic",
    "df_func": "df.loc[df['legendary'] == True]['type1'].value_counts().idxmax()",
    "question": "What primary type is the most common among legendary Pokémon?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "category",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Mega Mewtwo Y",
    "df_func": "df.loc[df['sp_attack'].idxmax()]['name']",
    "question": "Which Pokémon has the highest special attack?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "category",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Eternamax Eternatus', 'Mega Mewtwo X', 'Mega Mewtwo Y']",
    "df_func": "df.loc[df['total'].nlargest(3).index, 'name'].tolist()",
    "question": "Name the top 3 Pokémon with the highest total stats.",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "list[category]",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Shedinja', 'Diglett', 'Alolan Diglett', 'Magikarp', 'Pichu']",
    "df_func": "df.loc[df['hp'].nsmallest(5).index]['name'].tolist()",
    "question": "Which 5 Pokémon have the lowest hp stats?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "list[category]",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Water', 'Normal']",
    "df_func": "df['type1'].value_counts().index[:2].tolist()",
    "question": "Name the top 2 primary categories that have the most Pokémon.",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "list[category]",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[250, 230, 200, 160, 160]",
    "df_func": "df['sp_defense'].nlargest(5).tolist()",
    "question": "What are the top 5 special defense stats in the dataset?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "list[number]",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[20, 31]",
    "df_func": "df.loc[df['legendary'] == True].sort_values(by='defense')['defense'].head(2).tolist()",
    "question": "List the lowest 2 defense stats of legendary Pokémon.",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "list[number]",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[135, 127]",
    "df_func": "df.loc[(df['generation']==4)].sort_values(by='speed', ascending=False).head(2)['speed'].tolist()",
    "question": "What are the 2 highest speed stats of Pokémon in the fourth generation?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "list[number]",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "[175, 180, 180, 185, 190, 194]",
    "df_func": "df.loc[(df['legendary'] == False)].sort_values(by='total').head(6)['total'].tolist()",
    "question": "list the 6 lowest total stats of non-legendary Pokémon.",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "list[number]",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Extraversion'].max() > df['Agreeableness'].max()",
    "question": "Is the maximum level of Extraversion greater than the maximum level of Agreeableness?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "boolean",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Openness'].idxmax()]['Profession'] == df.loc[df['Conscientousness'].idxmax()]['Profession']",
    "question": "Is the profession with the highest Openness the same as the profession with the highest Conscientousness?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "boolean",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Emotional_Range'].idxmin()]['Profession'] == df.loc[df['Conversation'].idxmin()]['Profession']",
    "question": "Does the profession with the lowest Emotional_Range also have the lowest level of Conversation?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "boolean",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Openness to Change'].mean() > df['Hedonism'].mean()",
    "question": "Is the average level of Openness to Change higher than the average level of Hedonism?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "boolean",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "0.7826336180787501",
    "df_func": "df['Self-enhancement'].max()",
    "question": "What is the maximum value of Self-enhancement across all professions?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "number",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "1002",
    "df_func": "df[df['Emotional_Range'] > 0.5].shape[0]",
    "question": "How many professions have an Emotional_Range above 0.5?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "number",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "0.373214039767641",
    "df_func": "df.loc[df['n'].idxmax()]['Extraversion']",
    "question": "What is the average Extraversion level for the profession with the highest number of records (n)?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "number",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Policy Officer",
    "df_func": "df.loc[df['Conscientousness'].idxmax()]['Profession']",
    "question": "What profession has the highest level of Conscientiousness?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "category",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Governor",
    "df_func": "df.loc[df['Hedonism'].idxmin()]['Profession']",
    "question": "What is the profession with the lowest level of Hedonism?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "category",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Mortgage Banker",
    "df_func": "df.loc[df['Emotional_Range'].idxmax()]['Profession']",
    "question": "Which profession has the highest Emotional_Range?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "category",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Program Manager",
    "df_func": "df.loc[df['n'].idxmax()]['Profession']",
    "question": "What is the profession with the highest number of records (n)?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "category",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['Book Publisher', 'Bureau Chief', 'Publisher']",
    "df_func": "df.nlargest(3, 'Openness')['Profession'].tolist()",
    "question": "What are the top 3 professions with the highest Openness?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "list[category]",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['.Net Architect', 'Android Developer', 'Principal Engineer', 'Game Engineer']",
    "df_func": "df.nsmallest(4, 'Agreeableness')['Profession'].tolist()",
    "question": "Which are the bottom 4 professions in terms of Agreeableness?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "list[category]",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['Director of Athletics', 'Recruiting Coordinator', 'Athletic Coordinator', 'Director of Personnel', 'Skills Trainer']",
    "df_func": "df.nlargest(5, 'Conversation')['Profession'].tolist()",
    "question": "List the top 5 professions with the highest Conversation levels.",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "list[category]",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['U.S. Senator', 'Congressman']",
    "df_func": "df.loc[df['Self-enhancement'].nsmallest(2).index]['Profession'].tolist()",
    "question": "Name the bottom 2 professions in terms of Self-enhancement.",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "list[category]",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[0.7557249985959847, 0.7413189187628788, 0.7034528053640179]",
    "df_func": "df.nlargest(3, 'Openness to Change')['Openness to Change'].tolist()",
    "question": "What are the top 3 values of Openness to Change across all professions?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "list[number]",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['abstract'].str.contains('software').any()",
    "question": "Is there a patent abstract that mentions 'software'?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "boolean",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'design' in df['type'].unique()",
    "question": "Are there patents of the 'design' type?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "boolean",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "3574",
    "df_func": "df['organization'].nunique()",
    "question": "How many unique organizations have patents listed?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "number",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "14.745974597459746",
    "df_func": "df['num_claims'].mean()",
    "question": "On average, how many claims do the patents have?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "number",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "100",
    "df_func": "df['num_claims'].max()",
    "question": "What's the highest number of claims a patent has?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "number",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "8848",
    "df_func": "df[df['type'] == 'utility'].shape[0]",
    "question": "How many patents are of 'utility' type?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "number",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Massachusetts Institute of Technology",
    "df_func": "df.loc[df['num_claims'].idxmax()]['organization']",
    "question": "Which organization has the patent with the highest number of claims?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "category",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "B2",
    "df_func": "df['kind'].mode().values[0]",
    "question": "Which kind of patent is the most common?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "category",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "en",
    "df_func": "df['lang'].value_counts().idxmax()",
    "question": "In which language are the patents written?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "category",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "member, portion, body, end",
    "df_func": "df['graphext_cluster'].value_counts().index[0]",
    "question": "Which graphext cluster is the most common among the patents?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "category",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['International Business Machines Corporation', 'Samsung Electronics Co., Ltd.', 'Google Inc.']",
    "df_func": "df.groupby('organization').size().sort_values(ascending=False).head(3).index.tolist()",
    "question": "Which are the top 3 organizations with the most patents? Use alphabetical order to break any ties.",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "list[category]",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['utility', 'design']",
    "df_func": "df['type'].value_counts().index[:2].tolist()",
    "question": "List the 2 most common types of patents in the dataset.",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "list[category]",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['B2', 'S1']",
    "df_func": "df['kind'].value_counts().index[:2].tolist()",
    "question": "Which 2 kinds of patents are the most prevalent?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "list[category]",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[9479771.0, 9325365.0, 9323284.0]",
    "df_func": "df.nlargest(3, 'num_claims')['id'].tolist()",
    "question": "List the 3 patents (by ID) with the most number of claims.",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "list[number]",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['user_followers_count<gx:number>'].idxmax()]['user_verified<gx:boolean>']",
    "question": "Has the author with the highest number of followers ever been verified?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['user_favourites_count<gx:number>'].idxmax()]['author_name<gx:category>'] == df.loc[df['retweets<gx:number>'].idxmax()]['author_name<gx:category>']",
    "question": "Is the author who has the most favourites also the one with the most retweets?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "30308047",
    "df_func": "df['user_followers_count<gx:number>'].max()",
    "question": "What is the maximum number of followers an author in the dataset has?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "number",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "205169",
    "df_func": "df.loc[df['retweets<gx:number>'].idxmax()]['retweets<gx:number>']",
    "question": "How many retweets does the most retweeted tweet have?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "number",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Joe Biden",
    "df_func": "df.loc[df['user_followers_count<gx:number>'].idxmax()]['author_name<gx:category>']",
    "question": "Who is the author with the most followers?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Joe Biden",
    "df_func": "df['author_name<gx:category>'].value_counts().idxmax()",
    "question": "What is the name of the user who is most often named in the dataset?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Joe Biden",
    "df_func": "df.loc[df['retweets<gx:number>'].idxmax()]['author_name<gx:category>']",
    "question": "Who is the author of the tweet with the most retweets?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Joe Biden']",
    "df_func": "df.groupby('author_name<gx:category>')['user_followers_count<gx:number>'].sum().sort_values(ascending=False).head(3).index.tolist()",
    "question": "Who are the top 3 authors with the most followers?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[category]",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Joe Biden']",
    "df_func": "df.groupby('author_name<gx:category>').size().sort_values(ascending=False).head(4).index.tolist()",
    "question": "Who are the top 4 authors with the most favourites?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[category]",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[30308047, 30308047, 30308045]",
    "df_func": "df['user_followers_count<gx:number>'].nlargest(3).tolist()",
    "question": "What are the top 3 numbers of followers in the dataset?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[number]",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "[205169, 101314]",
    "df_func": "df['retweets<gx:number>'].nlargest(2).tolist()",
    "question": "What are the 2 highest numbers of retweets a tweet in the dataset has?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[number]",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Loan Amount'].idxmax()]['Loan Duration - Months'] == df['Loan Duration - Months'].max()",
    "question": "Is the borrower with the highest loan amount also the one with the longest loan duration?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "boolean",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Number of Existing Loans'].idxmax() == df['Loan Amount'].idxmax()",
    "question": "Does the borrower with the maximum number of existing loans also have the highest loan amount?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "boolean",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df.loc[df['Loan Duration - Months'].idxmax()]['Number of Existing Loans'] == df['Number of Existing Loans'].max())",
    "question": "Does the borrower with the longest loan duration also have the maximum number of existing loans?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "boolean",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Age'].idxmax()]['Loan Amount'] == df['Loan Amount'].max()",
    "question": "Does the oldest borrower also have the highest loan amount?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "boolean",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "18424",
    "df_func": "df['Loan Amount'].max()",
    "question": "What is the highest loan amount in the dataset?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "number",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "367",
    "df_func": "(df['Number of Existing Loans'] > 1).sum()",
    "question": "How many borrowers have more than 1 existing loan?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "number",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "72",
    "df_func": "df['Loan Duration - Months'].max()",
    "question": "What is the longest loan duration in the dataset?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "number",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "113",
    "df_func": "df[df['Age'].astype('uint8') > 50].shape[0]",
    "question": "How many borrowers are older than 50?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "number",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Radio/TV",
    "df_func": "df['Purpose of Loan'].mode().iloc[0]",
    "question": "What is the most common purpose of loans?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "category",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Skilled",
    "df_func": "df['Job'].value_counts().idxmax()",
    "question": "What is the most common job category for borrowers?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "category",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Existing Credits Paid Back Duly Till Now",
    "df_func": "df['Credit History'].mode().values[0]",
    "question": "What is the most common credit history category for borrowers?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "category",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Less than 100 DM",
    "df_func": "df['Savings Account'].mode().values[0]",
    "question": "What is the most common savings account status for borrowers?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "category",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Highly Skilled', 'Highly Skilled']",
    "df_func": "df.nlargest(2, 'Age')['Job'].tolist()",
    "question": "What are the jobs of the oldest 2 borrowers?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "list[category]",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[18424, 15945, 15857]",
    "df_func": "df['Loan Amount'].nlargest(3).tolist()",
    "question": "What are the top 3 loan amounts in the dataset?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "list[number]",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[72, 60, 60, 60]",
    "df_func": "df['Loan Duration - Months'].sort_values(ascending=False).head(4).tolist()",
    "question": "What are the top 4 loan durations in the dataset?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "list[number]",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[4, 4, 4]",
    "df_func": "df['Number of Existing Loans'].nlargest(3).tolist()",
    "question": "What are the 3 maximum numbers of existing loans among borrowers?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "list[number]",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[75, 75]",
    "df_func": "df['Age'].nlargest(2).tolist()",
    "question": "What are the ages of the top 2 oldest borrowers?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "list[number]",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Calories (kcal)'] == 0).any()",
    "question": "Are there any foods with zero calories?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "boolean",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Total Sugar (g)'] > 0).all()",
    "question": "Do all foods contain sugar?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "boolean",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Total Fat (g)'] == 0).any()",
    "question": "Are there any foods that contain no fat at all?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "boolean",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Protein (g)'].eq(0).any()",
    "question": "Are there foods that do not contain protein?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "boolean",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "0",
    "df_func": "len(df[df['Calories (kcal)'] > 500])",
    "question": "How many foods have more than 500 kcal?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "number",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "0.08465",
    "df_func": "df['Total Fat (g)'].mean()",
    "question": "What is the average amount of total fat (in grams) across all foods?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "number",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "18",
    "df_func": "len(df[df['Sodium (g)'] > 1])",
    "question": "How many foods have a sodium content of more than 1 gram?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "number",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "0.2748",
    "df_func": "df['Protein (g)'].max()",
    "question": "What's the highest amount of protein (in grams) found in a food item?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "number",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "bacon",
    "df_func": "df.loc[df['Calories (kcal)'].idxmax()]['name']",
    "question": "What food has the highest calorie content?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "category",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "honey",
    "df_func": "df.loc[df['Total Sugar (g)'].idxmax()]['name']",
    "question": "Which food contains the most sugar?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "category",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "honey",
    "df_func": "df.loc[df['Total Fat (g)'].idxmin()]['name']",
    "question": "What is the food with the least amount of total fat?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "category",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "beef",
    "df_func": "df.loc[df['Protein (g)'].idxmax()]['name']",
    "question": "Which food has the highest amount of protein?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "category",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['bacon', 'peanuts', 'chocolate bar', 'popcorn', 'cookie']",
    "df_func": "df.nlargest(5, 'Calories (kcal)')['name'].tolist()",
    "question": "List the top 5 foods with the most calories.",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "list[category]",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['chestnut', 'pancakes', 'cheese']",
    "df_func": "df.nsmallest(3, 'Total Sugar (g)')['name'].tolist()",
    "question": "Identify the top 3 foods with the least amount of sugar.",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "list[category]",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['bacon', 'peanuts', 'cheese', 'popcorn']",
    "df_func": "df.nlargest(4, 'Total Fat (g)')['name'].tolist()",
    "question": "Enumerate the 4 foods with the most total fat.",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "list[category]",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['candy', 'black tea', 'bacon', 'champagne', 'red wine', 'red apple']",
    "df_func": "df.nsmallest(6, 'Protein (g)')['name'].tolist()",
    "question": "Name the 6 foods with the least amount of protein.",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "list[category]",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[8.98, 5.67, 5.18, 5.0, 4.97]",
    "df_func": "df['Calories (kcal)'].nlargest(5).tolist()",
    "question": "List the 5 highest calorie counts found in the dataset.",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "list[number]",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[0.0, 0.0, 0.0]",
    "df_func": "df['Total Sugar (g)'].nsmallest(3).tolist()",
    "question": "What are the 3 lowest amounts of sugar found among the foods?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "list[number]",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[0.995, 0.4924, 0.3099, 0.281]",
    "df_func": "df['Total Fat (g)'].sort_values(ascending=False).head(4).tolist()",
    "question": "Enumerate the 4 highest amounts of total fat found in the foods.",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "list[number]",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[0.0, 0.0, 0.0007, 0.0007, 0.0007, 0.002]",
    "df_func": "df.nsmallest(6, 'Protein (g)')['Protein (g)'].tolist()",
    "question": "What are the top 6 lowest amounts of protein found in the dataset?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "list[number]",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['edu'] == 'Not completed Primary education').any()",
    "question": "Are there any respondents who say they didn't complete primary education?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "boolean",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['polInterest'].eq('Very interested').all()",
    "question": "Are all respondents interested in politics?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "boolean",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Vote Intention'].apply(lambda x: 'I will not vote' in x).any()",
    "question": "Did any respondent indicate that they will not vote?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "boolean",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['User self-placement on Left-Right economic values axis'].isin([10]).any()",
    "question": "Did any respondent place themselves at the extreme right of the Left-Right economic values axis?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "boolean",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "372",
    "df_func": "df.loc[df['User self- placement on Progressive-Conservative economic values axis'] == 10].shape[0]",
    "question": "How many respondents placed themselves at 10 on the Progressive-Conservative economic values axis?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "number",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "37.420120593188116",
    "df_func": "df['Age'].mean()",
    "question": "What is the average age of the respondents?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "number",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "105.0",
    "df_func": "df.loc[df['gender'] == 'I prefer not to say'].sort_values('Age', ascending=False).iloc[0]['Age']",
    "question": "What's the maximum age among the respondents who prefer not to disclose their gender?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "number",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "The party ideas are close to my own",
    "df_func": "df['voteReason'].value_counts().index[0]",
    "question": "What is the most common reason for voting given by respondents?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "category",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Ciudadanos",
    "df_func": "df['partyId'].mode().iloc[0]",
    "question": "Which is the most common party identification among respondents?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "category",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Castellano",
    "df_func": "df['lang'].value_counts().idxmax()",
    "question": "What is the most common first language among respondents?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "category",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['The party ideas are close to my own', 'The party is the most competent', 'I prefer not to say']",
    "df_func": "df['voteReason'].value_counts().head(3).index.tolist()",
    "question": "Identify the top 3 most common reasons for voting among respondents.",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "list[category]",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['Ciudadanos', 'PP', 'I prefer not to say']",
    "df_func": "df['partyId'].value_counts().head(3).index.tolist()",
    "question": "Enumerate the top 3 most common party identifications among respondents.",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "list[category]",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[38.0, 23.0, 39.0]",
    "df_func": "df['Age'].value_counts().head(3).index.tolist()",
    "question": "List the top 3 most common ages among respondents.",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "list[number]",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[5.0, 3.0, 6.0]",
    "df_func": "df['User self-placement on Left-Right economic values axis'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 most common positions on the Left-Right economic values axis?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "list[number]",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[5.0, 3.0, 4.0, 0.0]",
    "df_func": "df['User self- placement on Progressive-Conservative economic values axis'].value_counts().nlargest(4).index.tolist()",
    "question": "Enumerate the top 4 most common positions on the Progressive-Conservative economic values axis.",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "list[number]",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Are you registered to vote?'] == 'No - but I will register').any() or (df['Are you registered to vote?'] == 'No - I will not register').any()",
    "question": "Are there survey participants who are not registered to vote?",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "boolean",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[(df['Did you vote in the 2016 Presidential election? (Four years ago)'] == 'Yes') & (df['How likely are you to vote in the forthcoming US Presidential election? Early Voting Open'] == '0 (Definitely will not vote)')].shape[0] > 0",
    "question": "Are there any respondents who participated in the 2016 Presidential election (four years ago) but are not planning to do so in the upcoming election?",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "boolean",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "((df['Did you vote in the 2016 Presidential election? (Four years ago)']!= 'Yes') & (df['How likely are you to vote in the forthcoming US Presidential election? Early Voting Open']!= '0 (Definitely will not vote)')).any()",
    "question": "Do we have any respondents in the dataset who didn't participate in the 2016 Presidential election (four years ago) but intend to do so in the upcoming election?",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "boolean",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Who did you vote for in the 2016 Presidential election? (Four years ago)'].astype(str)!= df['Who are you most likely to vote for on election day?'].astype(str)).any() ",
    "question": "Do we have respondents who have shifted their voting preference from the 2016 election (four years ago) to the upcoming one?",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "boolean",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "1315",
    "df_func": "len(df[df['Are you registered to vote?'] == 'Yes'])",
    "question": "How many respondents in the survey are eligible to vote?",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "number",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "65+",
    "df_func": "df['How old are you?'].mode().iloc[0]",
    "question": "What is the most frequent age group among the respondents?",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "category",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "Some college, no degree",
    "df_func": "df['What is the highest degree or level of school you have *completed* ?'].mode().values[0]",
    "question": "What is the most commonly achieved educational level among the respondents?",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "category",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "South Atlantic",
    "df_func": "df['Division'].value_counts().sort_values(ascending=[False]).index[0]",
    "question": "Which geographical division has the greatest representation among the respondents? If there is a tie solve it by reverse alphabetical order. ",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "category",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['CA', 'TX', 'NY', 'FL', 'GA', 'PA']",
    "df_func": "df['State'].value_counts().head(6).index.tolist()",
    "question": "Identify the top 6 states with the greatest number of respondents.",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "list[category]",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['White (not Hispanic, Latino or Spanish origin)', 'Black or African American (not Hispanic, Latino or Spanish origin)']",
    "df_func": "df['Which of the following best describes your ethnic heritage?'].value_counts().head(2).index.tolist()",
    "question": "Identify the top 2 ethnic groups with the most representation among the respondents.",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "list[category]",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['65+', '55-64', '45-54', '35-44', '18-24', '25-34']",
    "df_func": "df['How old are you?'].value_counts().index[:6].tolist()",
    "question": "Enumerate the top 6 most represented age groups among the respondents.",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "list[category]",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[12.25830409560021, 11.12470053778552, 10.76484201273817, 9.469101617885023]",
    "df_func": "df['Weight'].drop_duplicates().nlargest(4).tolist()",
    "question": "Enumerate the highest 4 unique weight values in the dataset.",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "list[number]",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[10.0, 11.0]",
    "df_func": "df['likelihood'].value_counts().head(2).index.tolist()",
    "question": "Enumerate the 2 most common likelihood values among the respondents.",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "list[number]",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'Golf' in df['model'].astype(str).tolist()",
    "question": "Is there a car model named 'Golf' listed?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "boolean",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'dealer' in df.columns and df['dealer'].str.contains('Autos Raymara').any()",
    "question": "Are there cars associated with the dealer 'Autos Raymara'?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "boolean",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "'BMW' in df['version'].astype(str).values",
    "question": "Is there a car version that mentions 'BMW'?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "boolean",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['shift'].eq('Manual').any()",
    "question": "Are there cars with a 'Manual' shift?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "boolean",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "940",
    "df_func": "df['model'].nunique()",
    "question": "How many unique car models are listed?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "number",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "16.19912",
    "df_func": "df['photos'].mean()",
    "question": "On average, how many photos are provided for the cars?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "number",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "549900",
    "df_func": "df['price'].max()",
    "question": "What's the highest price a car is listed for?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "number",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "4237",
    "df_func": "df.loc[df['year'] == 2020].shape[0]",
    "question": "How many cars are from the year 2020?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "number",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Supergarage",
    "df_func": "df.loc[df['price'].idxmax()]['dealer']",
    "question": "Which dealer has the car with the highest price listed?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "category",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "VOLKSWAGEN",
    "df_func": "df['make'].mode().iloc[0]",
    "question": "Which car maker is the most common? If there is a tie then use alphabetical order.",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "category",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Diésel",
    "df_func": "df['fuel'].mode().values[0]",
    "question": "What type of fuel is the most common for the cars?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "category",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Madrid', 'Barcelona', 'Valencia']",
    "df_func": "df['province'].value_counts().sort_values(ascending=False).head(3).index.tolist()",
    "question": "Which are the 3 provinces with the most car listings? If there is a tie then use reverse alphabetical order.",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "list[category]",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Blanco', 'Gris / Plata', 'Negro']",
    "df_func": "df['color'].value_counts().head(3).index.tolist()",
    "question": "List the 3 most common car colors in the dataset.",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "list[category]",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['VOLKSWAGEN', 'BMW', 'MERCEDES-BENZ', 'AUDI', 'PEUGEOT']",
    "df_func": "df['make'].value_counts().head(5).index.tolist()",
    "question": "Which 5 car makes are the most prevalent?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "list[category]",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Gas natural (CNG)', 'Gas licuado (GLP)']",
    "df_func": "df['fuel'].value_counts().nsmallest(2).index.tolist()",
    "question": "List the 2 least common fuels used in the cars.",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "list[category]",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[2016.0, 2017.0, 2019.0, 2020.0]",
    "df_func": "df['year'].value_counts().head(4).index.tolist()",
    "question": "What are the 4 most common years of the cars?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "list[number]",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[5000000, 4000006, 3500000]",
    "df_func": "df['kms'].nlargest(3).tolist()",
    "question": "List the 3 highest mileages present.",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "list[number]",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[54, 54, 54, 54, 54]",
    "df_func": "df['photos'].nlargest(5).tolist()",
    "question": "What are the 5 highest amount of pictures associated?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "list[number]",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[800.0, 800.0, 796.0, 772.0, 720.0, 720.0]",
    "df_func": "df['power'].nlargest(6).tolist()",
    "question": "List the 6 highest power values.",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "list[number]",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df[df['period_day'] == 'night'].shape[0] > 0",
    "question": "Is there any transaction that took place during the night?",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "boolean",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['weekday_weekend'].value_counts().get('weekday', 0) == len(df['Item'].unique()))",
    "question": "Do all items have transactions recorded on weekdays?",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "boolean",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "94",
    "df_func": "df['Item'].nunique()",
    "question": "How many unique items are there in the dataset?",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "number",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "9684",
    "df_func": "df['Transaction'].max()",
    "question": "What's the highest transaction number?",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "number",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Coffee",
    "df_func": "df.loc[df['weekday_weekend'] == 'weekday']['Item'].mode().values[0]",
    "question": "On weekdays, what's the most commonly bought item?",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "category",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Coffee', 'Bread', 'Pastry']",
    "df_func": "df.loc[df['period_day'] =='morning']['Item'].value_counts().head(3).index.tolist()",
    "question": "List the top 3 items most frequently bought in the morning.",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "list[category]",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Coffee', 'Bread']",
    "df_func": "df.loc[df['period_day'] == 'afternoon'].groupby('Item')['Transaction'].count().sort_values(ascending=False).head(2).index.tolist()",
    "question": "Name the top 2 most purchased during the afternoon.",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "list[category]",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Coffee', 'Bread']",
    "df_func": "df.loc[df['weekday_weekend'] == 'weekend'].groupby('Item').size().reset_index(name='Count').sort_values(by = ['Count','Item'], ascending=[False, True]).head(2)['Item'].tolist()",
    "question": "Identify the top 2 items sold on weekends. If a tie then sort alphabetical.",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "list[category]",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Reviewer_Location'] == 'Australia')[(df['Rating'] <= 3)].empty",
    "question": "Are all the reviews from Australia positive (rating > 3)?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "boolean",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Branch'].value_counts().index[0] == 'Disneyland_HongKong'",
    "question": "Is Disneyland_HongKong the most reviewed branch?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "boolean",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Rating'] == 1).any()",
    "question": "Are there any reviews with a rating of 1?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "boolean",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Reviewer_Location'].unique().shape[0] == df[df['Rating'] == 5]['Reviewer_Location'].unique().shape[0])",
    "question": "Does every reviewer location have at least one review with a rating of 5?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "boolean",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "162",
    "df_func": "df['Reviewer_Location'].nunique()",
    "question": "How many unique reviewer locations are there?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "number",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "4.204158004158004",
    "df_func": "df.loc[df['Branch'] == 'Disneyland_HongKong', 'Rating'].mean()",
    "question": "What is the average rating for Disneyland_HongKong?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "number",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "670801367",
    "df_func": "df['Review_ID'].max()",
    "question": "What is the maximum review ID? If there is a tie then pick the highest ID.",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "number",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "786",
    "df_func": "df[df['Year_Month'].str.contains('2019')].shape[0]",
    "question": "How many reviews were made in 2019?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "number",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "United States",
    "df_func": "df['Reviewer_Location'].mode().values[0]",
    "question": "What is the most common reviewer location?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "category",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "Disneyland_Paris",
    "df_func": "df.groupby('Branch')['Rating'].mean().idxmin()",
    "question": "What is the branch with the lowest average rating?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "category",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['United States', 'United Kingdom', 'Australia']",
    "df_func": "df['Reviewer_Location'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 reviewer locations with the most reviews?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "list[category]",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Disneyland_Paris', 'Disneyland_HongKong']",
    "df_func": "df.groupby('Branch')['Rating'].mean().sort_values(ascending=True).index[:2].tolist()",
    "question": "What are the bottom 2 branches in terms of average rating?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "list[category]",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "['Turks and Caicos Islands', 'South Sudan', 'Suriname']",
    "df_func": "df.groupby('Reviewer_Location')['Rating'].mean().nsmallest(3).index.tolist()",
    "question": "What are the bottom 3 reviewer locations in terms of average rating?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "list[category]",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['retweets'] > 0).any()",
    "question": "Has the author ever been retweeted?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "boolean",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['retweets'].max() > 10000).any()",
    "question": "Are there any tweets with more than 10000 retweets?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "boolean",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['favorites'] > 50000).any()",
    "question": "Have any of the tweets been favorited more than 50000 times?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "boolean",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "1",
    "df_func": "df['author_name'].nunique()",
    "question": "How many unique authors are there?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "number",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "8774.52044683822",
    "df_func": "df['retweets'].mean()",
    "question": "What is the average number of retweets?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "number",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "589793",
    "df_func": "df['favorites'].max()",
    "question": "What is the maximum number of favorites received for a single tweet?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "number",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "2891",
    "df_func": "df.loc[df['date'].dt.year==2018].shape[0]",
    "question": "How many tweets were posted in 2018?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "number",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Donald J. Trump",
    "df_func": "df['author_name'].mode().iloc[0]",
    "question": "What is the most common author name?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "category",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Such a beautiful and important evening! The forgotten man and woman will never be forgotten again. We will all come together as never before",
    "df_func": "df.loc[df['favorites'].idxmax()]['text']",
    "question": "What is the tweet with the most favorites?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "category",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "und",
    "df_func": "df.loc[df['retweets'].idxmax()]['lang']",
    "question": "In which language is the tweet with the most retweets written?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "category",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "en",
    "df_func": "df['lang'].value_counts().idxmax()",
    "question": "What is the most common language of the tweets?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "category",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['realDonaldTrump']",
    "df_func": "df['author_handler'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 author handlers with the most tweets?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "list[category]",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Donald J. Trump']",
    "df_func": "df['author_name'].value_counts().tail(3).index.tolist()",
    "question": "What are the bottom 3 author names in terms of tweet count?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "list[category]",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[591222909626114050, 591412084895838208, 586751374286721024, 575589231160127489]",
    "df_func": "df.nsmallest(4, 'favorites')['id'].tolist()",
    "question": "What are the bottom 4 tweet IDs in terms of favorite count?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "list[number]",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[589793, 589750, 557779, 539249, 476457, 376626]",
    "df_func": "df['favorites'].nlargest(6).tolist()",
    "question": "What are the top 6 favorite counts of the tweets?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "list[number]",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "[1, 1, 2]",
    "df_func": "df.loc[df['retweets'].nsmallest(3).index]['retweets'].tolist()",
    "question": "What are the bottom 3 retweet counts of the tweets?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "list[number]",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['is_organization'].any())",
    "question": "Are there any organizations in the dataset?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "boolean",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['is_organization'] == False).any()",
    "question": "Are there any individuals (non-organizations) in the dataset?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "boolean",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "not df['pic'].isnull().any()",
    "question": "Do all entities have a picture?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "boolean",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['weight'].gt(500).any()",
    "question": "Are there any entities with a weight greater than 500?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "boolean",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "9",
    "df_func": "df['community'].nunique()",
    "question": "How many unique communities are there?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "number",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "770.5",
    "df_func": "df['weight'].max()",
    "question": "What is the maximum weight of an entity?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "number",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "651",
    "df_func": "df.loc[df['community'] == 16744206].shape[0]",
    "question": "How many entities have a community identifier of 16744206?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "number",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "Mike Bostock",
    "df_func": "df.loc[df['page_rank_norm'].idxmax()]['name']",
    "question": "Which entity has the highest page rank norm?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "category",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "https://storage.googleapis.com/pics.contexto.io/photos/paperclips/000/016/457/thumb/Saw-whet_Owl_10_normal.jpg?1517502050",
    "df_func": "df.loc[df['weight'].idxmax()]['pic']",
    "question": "What is the picture URL of the entity with the maximum weight?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "category",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "The Gibson Project",
    "df_func": "df.loc[df['y'].idxmax()]['name']",
    "question": "Which entity has the highest y-coordinate?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "category",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Lynn Cherny', 'Alberto Cairo', 'Sinan Aral']",
    "df_func": "df.loc[df['weight'].nlargest(3).index]['name'].tolist()",
    "question": "What are the top 3 entity names with the highest weights?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "list[category]",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['LIFE', 'New Options Project']",
    "df_func": "df.loc[df['page_rank_norm'].nsmallest(2).index]['name'].tolist()",
    "question": "What are the bottom 2 entities in terms of page rank norm?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "list[category]",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['Detective.io', 'The Thrust', 'Open Budgets', 'NewsFuturist']",
    "df_func": "df.loc[df['x'].nlargest(4).index]['name'].tolist()",
    "question": "What are the top 4 entities with the highest x-coordinates?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "list[category]",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "['digital PR cat', 'Ismail Onur Filiz', 'Dave Golland']",
    "df_func": "df.loc[df['y'].nsmallest(3).index]['name'].tolist()",
    "question": "What are the bottom 3 entities in terms of y-coordinates?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "list[category]",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[568, 423, 6392, 4548, 579]",
    "df_func": "df.nlargest(5, 'weight')['id'].tolist()",
    "question": "What are the top 5 entity IDs in terms of weight?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "list[number]",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[177, 240, 294, 369]",
    "df_func": "df.loc[df['page_rank_norm'].nsmallest(4).index]['id'].tolist()",
    "question": "What are the bottom 4 entity IDs in terms of page rank norm?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "list[number]",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[1.0, 0.6029751067034804, 0.5666707687637932, 0.5202348027491394, 0.5110606617858531, 0.5081183103684572]",
    "df_func": "df['page_rank_norm'].nlargest(6).tolist()",
    "question": "What are the top 6 page rank norms of the entities?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "list[number]",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "[1.0, 1.0, 1.0]",
    "df_func": "df['weight'].nsmallest(3).tolist()",
    "question": "What are the bottom 3 weights of the entities?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "list[number]",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['feathers'] == True).any()",
    "question": "Are there any animals with feathers in the dataset?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "boolean",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['venomous'].any()",
    "question": "Are there any venomous animals in the dataset?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "boolean",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['breathes'] == True).all()",
    "question": "Do all animals breathe?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "boolean",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['domestic'].astype('bool')).any()",
    "question": "Are there any domesticated animals in the dataset?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "boolean",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "7",
    "df_func": "df['class_type'].nunique()",
    "question": "How many unique types of animals are there?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "number",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "2.8415841584158414",
    "df_func": "df['legs'].astype(int).mean()",
    "question": "What is the average number of legs?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "number",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "8",
    "df_func": "df['legs'].max()",
    "question": "What is the maximum number of legs an animal has?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "number",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "27",
    "df_func": "df.loc[df['legs'].astype('uint8') == 2].shape[0]",
    "question": "How many animals are there with 2 legs?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "number",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "1",
    "df_func": "df['class_type'].mode().values[0]",
    "question": "What is the most common class type?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "category",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "octopus",
    "df_func": "df.loc[df['legs'] == 8]['animal_name'].iloc[0]",
    "question": "What is the name of the first animal with 8 legs?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "category",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "7",
    "df_func": "df.loc[df['legs'].idxmax()]['class_type']",
    "question": "What is the class type of the animals with the most legs?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "category",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "frog",
    "df_func": "df.loc[df['venomous'] == True].iloc[0]['animal_name']",
    "question": "What is the name of the first animal in the dataset that is venomous?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "category",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['bass', 'carp']",
    "df_func": "df.loc[df['legs'] == df['legs'].min()].sort_values('animal_name').head(2)['animal_name'].tolist()",
    "question": "What are the bottom 2 animal names in terms of the number of legs? If there are more than two with the lowest number go with alphabetical order",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "list[category]",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[1, 2, 4, 7]",
    "df_func": "df['class_type'].value_counts().head(4).index.tolist()",
    "question": "What are the most common 4 class types with the most animals?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "list[category]",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[5, 3, 6]",
    "df_func": "df['class_type'].value_counts().nsmallest(3).index.tolist()",
    "question": "What are the least common 3 class types with the least animals?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "list[category]",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[1, 6, 2, 7, 5]",
    "df_func": "df.groupby('class_type')['legs'].sum().sort_values(ascending = False).head(5).index.tolist()",
    "question": "What are the most common 5 class types with the most combined total legs?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "list[number]",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[4, 3, 5, 7]",
    "df_func": "df.groupby('class_type')['legs'].sum().sort_values().head(4).index.tolist()",
    "question": "What are the bottom 4 class types with the least combined total legs?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "list[number]",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[4, 2, 0, 6]",
    "df_func": "df['legs'].value_counts().head(4).index.tolist()",
    "question": "What are the most common 4 numbers of legs that animals have?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "list[number]",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Quantity'] > 0).all()",
    "question": "Are all the quantities greater than 0?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "boolean",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['UnitPrice'] > 0).all()",
    "question": "Are all the unit prices greater than 0?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "boolean",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "pd.isnull(df['CustomerID']).any()",
    "question": "Are there any missing customer IDs?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "boolean",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Country'].str.contains('United Kingdom').any()",
    "question": "Are there any transactions from the United Kingdom?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "boolean",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "4070",
    "df_func": "df['StockCode'].nunique()",
    "question": "How many unique stock codes are there?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "number",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "4.611113626088513",
    "df_func": "df['UnitPrice'].mean()",
    "question": "What is the average unit price?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "number",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "80995",
    "df_func": "df['Quantity'].max()",
    "question": "What is the maximum quantity ordered in a single transaction?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "number",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "495478",
    "df_func": "df[df['Country'] == 'United Kingdom'].shape[0]",
    "question": "How many transactions were made in the United Kingdom?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "number",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "United Kingdom",
    "df_func": "df['Country'].value_counts().idxmax()",
    "question": "Which country made the most transactions?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "category",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Manual",
    "df_func": "df.loc[df['UnitPrice'].idxmax()]['Description']",
    "question": "What is the description of the item with the highest unit price?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "category",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "PAPER CRAFT , LITTLE BIRDIE",
    "df_func": "df.loc[df['Quantity'].idxmax()]['Description']",
    "question": "What is the description of the item with the highest quantity ordered?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "category",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "United Kingdom",
    "df_func": "df.loc[df['CustomerID'].idxmin()]['Country']",
    "question": "Which country does the customer with the lowest ID come from?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "category",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['PAPER CRAFT , LITTLE BIRDIE', 'MEDIUM CERAMIC TOP STORAGE JAR', 'ASSTD DESIGN 3D PAPER STICKERS']",
    "df_func": "df.nlargest(3, 'Quantity')['Description'].tolist()",
    "question": "What are the descriptions of the 3 items with the highest quantities ordered?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "list[category]",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['United Kingdom', 'Germany']",
    "df_func": "df['Country'].value_counts().head(2).index.tolist()",
    "question": "Which 2 countries made the most transactions?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "list[category]",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[1, 2, 12, 6]",
    "df_func": "df['Quantity'].value_counts().head(4).index.tolist()",
    "question": "What are the four most commonly ordered quantities?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "list[number]",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[2369, 2200]",
    "df_func": "df['Description'].value_counts().head(2).tolist()",
    "question": "What are the times the two most common descriptions are repeated?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "list[number]",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['author_name'] == df.groupby('author_name')['favorites'].sum().idxmax()]['lang'].value_counts().index[0] == 'es'",
    "question": "Is the most favorited author mainly communicating in Spanish?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "boolean",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['retweets'].min() == 0",
    "question": "Is there an author who received no retweets for any of their posts?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "boolean",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "es",
    "df_func": "df.loc[df['favorites'].idxmax()]['lang']",
    "question": "What is the language of the most favorited post?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "category",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "reply",
    "df_func": "df['type'].value_counts().idxmax()",
    "question": "What type of post (original, reply, or other) is the most common in the dataset?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "category",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['es', 'es', 'es', 'es', 'es']",
    "df_func": "df.nsmallest(5, 'favorites')['lang'].tolist()",
    "question": "What are the languages of the 5 least favorited posts?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "list[category]",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['reply', 'original']",
    "df_func": "df['type'].value_counts().head(6).index.tolist()",
    "question": "What types of posts are the 6 most common in the dataset?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "type",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "rp_user_id",
      "rp_user_name",
      "location",
      "tweet_link",
      "search"
    ],
    "types": "list[category]",
    "dataset": "050_ING",
    "column_types": [
      "int64",
      "int64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint8",
      "uint8",
      "object",
      "category",
      "object",
      "category",
      "float64",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "links",
      "author_name",
      "text",
      "lang",
      "retweets",
      "type",
      "mention_ids"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['generation'].eq(1)).all() and (df['legendary'].eq(True)).all()",
    "question": "Are all Pokémon in the first generation legendary?",
    "columns": [
      "number",
      "name",
      "type1",
      "type2",
      "total",
      "hp",
      "attack",
      "defense",
      "sp_attack",
      "sp_defense",
      "speed",
      "generation",
      "legendary"
    ],
    "types": "boolean",
    "dataset": "051_Pokemon",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "uint16",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "bool"
    ],
    "lite_columns": [
      "hp",
      "attack",
      "name",
      "sp_attack",
      "type1",
      "defense",
      "sp_defense",
      "legendary",
      "total",
      "speed",
      "type2",
      "generation"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "int64",
      "object",
      "int64",
      "int64",
      "bool",
      "int64",
      "int64",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Extraversion'].max() > df['Agreeableness'].max()",
    "question": "Is the maximum level of Extraversion greater than the maximum level of Agreeableness?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "boolean",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Openness'].idxmax()]['Profession'] == df.loc[df['Conscientousness'].idxmax()]['Profession']",
    "question": "Is the profession with the highest Openness the same as the profession with the highest Conscientousness?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "boolean",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Emotional_Range'].idxmin()]['Profession'] == df.loc[df['Conversation'].idxmin()]['Profession']",
    "question": "Does the profession with the lowest Emotional_Range also have the lowest level of Conversation?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "boolean",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Openness to Change'].mean() > df['Hedonism'].mean()",
    "question": "Is the average level of Openness to Change higher than the average level of Hedonism?",
    "columns": [
      "Profession",
      "Openness",
      "Conscientousness",
      "Extraversion",
      "Agreeableness",
      "Emotional_Range",
      "Conversation",
      "Openness to Change",
      "Hedonism",
      "Self-enhancement",
      "Self-transcendence",
      "n"
    ],
    "types": "boolean",
    "dataset": "052_Professional",
    "column_types": [
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "uint16"
    ],
    "lite_columns": [
      "Emotional_Range",
      "Conscientousness",
      "Self-transcendence",
      "Openness to Change",
      "Self-enhancement",
      "n",
      "Hedonism",
      "Profession",
      "Agreeableness",
      "Conversation",
      "Extraversion",
      "Openness"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'design' in df['type'].tolist()",
    "question": "Are there patents of the 'design' type?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "boolean",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "B2",
    "df_func": "df['kind'].mode().values[0]",
    "question": "Which kind of patent is the most common?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "category",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "en",
    "df_func": "df['lang'].value_counts().index[0]",
    "question": "In which language are the patents written?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "category",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['utility', 'design']",
    "df_func": "df['type'].value_counts().head(2).index.tolist()",
    "question": "List the 2 most common types of patents in the dataset.",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "list[category]",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['B2', 'S1']",
    "df_func": "df['kind'].value_counts().head(2).index.tolist()",
    "question": "Which 2 kinds of patents are the most prevalent?",
    "columns": [
      "num_claims",
      "organization",
      "kind",
      "type",
      "graphext_cluster",
      "date",
      "abstract",
      "title",
      "lang",
      "abstract_gx_ADJ",
      "grp_title",
      "abstract_gx_products",
      "abstract_gx_organizations",
      "abstract_gx_NOUN",
      "abstract_gx_ngrams",
      "id",
      "target",
      "weight",
      "x",
      "y"
    ],
    "types": "list[category]",
    "dataset": "053_Patents",
    "column_types": [
      "uint8",
      "category",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "object",
      "object",
      "category",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "kind",
      "num_claims",
      "title",
      "date",
      "lang",
      "id",
      "abstract",
      "type",
      "target",
      "graphext_cluster",
      "organization"
    ],
    "lite_column_types": [
      "object",
      "int64",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['user_followers_count<gx:number>'].idxmax()]['user_verified<gx:boolean>']",
    "question": "Has the author with the highest number of followers ever been verified?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['user_favourites_count<gx:number>'].idxmax()]['author_id<gx:category>'] == df.loc[df['retweets<gx:number>'].idxmax()]['author_id<gx:category>']",
    "question": "Is the author who has the most favourites also the one with the most retweets?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['mention_names<gx:list[category]>'].explode().value_counts().idxmax() == df.loc[df['retweets<gx:number>'].idxmax()]['mention_names<gx:list[category]>'][0]",
    "question": "Is the most mentioned user also the most retweeted mentioned user?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['retweets<gx:number>'].idxmax()]['author_id<gx:category>'] == df.loc[df['replies<gx:number>'].idxmax()]['author_id<gx:category>']",
    "question": "Does the author with the most retweets also have the most replies?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "boolean",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Joe Biden",
    "df_func": "df.loc[df['user_followers_count<gx:number>'].idxmax()]['author_name<gx:category>']",
    "question": "Who is the author with the most followers?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Joe Biden",
    "df_func": "df['author_name<gx:category>'].value_counts().idxmax()",
    "question": "What is the name of the user who is most often named in the dataset?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "Joe Biden",
    "df_func": "df.loc[df['retweets<gx:number>'].idxmax()]['author_name<gx:category>']",
    "question": "Who is the author of the tweet with the most retweets?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "category",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Joe Biden']",
    "df_func": "df['author_name<gx:category>'].value_counts().head(3).index.tolist()",
    "question": "Who are the top 3 authors with the most followers?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[category]",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "['Joe Biden']",
    "df_func": "df.groupby('author_name<gx:category>').agg({'user_favourites_count<gx:number>':'sum'}).sort_values('user_favourites_count<gx:number>', ascending = False).head(4).index.tolist()",
    "question": "Who are the top 4 authors with the most favourites?",
    "columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "types": "list[category]",
    "dataset": "054_Joe",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "category",
      "uint8",
      "uint32",
      "uint8",
      "uint16",
      "uint16",
      "bool",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "uint16",
      "uint16",
      "object",
      "category",
      "object",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "id<gx:category>",
      "author_id<gx:category>",
      "author_name<gx:category>",
      "author_handler<gx:category>",
      "author_avatar<gx:url>",
      "user_created_at<gx:date>",
      "user_description<gx:text>",
      "user_favourites_count<gx:number>",
      "user_followers_count<gx:number>",
      "user_following_count<gx:number>",
      "user_listed_count<gx:number>",
      "user_tweets_count<gx:number>",
      "user_verified<gx:boolean>",
      "user_location<gx:text>",
      "lang<gx:category>",
      "type<gx:category>",
      "text<gx:text>",
      "date<gx:date>",
      "mention_ids<gx:list[category]>",
      "mention_names<gx:list[category]>",
      "retweets<gx:number>",
      "favorites<gx:number>",
      "replies<gx:number>",
      "quotes<gx:number>",
      "links<gx:list[url]>",
      "links_first<gx:url>",
      "image_links<gx:list[url]>",
      "image_links_first<gx:url>",
      "rp_user_id<gx:category>",
      "rp_user_name<gx:category>",
      "location<gx:text>",
      "tweet_link<gx:url>",
      "source<gx:text>",
      "search<gx:category>"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "bool",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "int64",
      "int64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64",
      "object",
      "object",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Loan Amount'].idxmax() == df['Loan Duration - Months'].idxmax()",
    "question": "Is the borrower with the highest loan amount also the one with the longest loan duration?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "boolean",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Loan Duration - Months'].idxmax()]['Number of Existing Loans'] == df['Number of Existing Loans'].max()",
    "question": "Does the borrower with the longest loan duration also have the maximum number of existing loans?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "boolean",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.loc[df['Age'].idxmax()]['Loan Amount'] == df['Loan Amount'].max()",
    "question": "Does the oldest borrower also have the highest loan amount?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "boolean",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Radio/TV",
    "df_func": "df['Purpose of Loan'].mode().iloc[0]",
    "question": "What is the most common purpose of loans?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "category",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Skilled",
    "df_func": "df['Job'].value_counts().index[0]",
    "question": "What is the most common job category for borrowers?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "category",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Existing Credits Paid Back Duly Till Now",
    "df_func": "df['Credit History'].mode().values[0]",
    "question": "What is the most common credit history category for borrowers?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "category",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Less than 100 DM",
    "df_func": "df['Savings Account'].mode().values[0]",
    "question": "What is the most common savings account status for borrowers?",
    "columns": [
      "Loan Duration - Months",
      "Credit History",
      "Purpose of Loan",
      "Loan Amount",
      "Savings Account",
      "Length of Current Employment",
      "Installment Rate as % of Income",
      "Guarantors",
      "Length of Current Property Residence",
      "Age",
      "Housing",
      "Number of Existing Loans",
      "Job",
      "Number of Dependants",
      "Foreign Worker",
      "Risk",
      "Sex",
      "Status"
    ],
    "types": "category",
    "dataset": "055_German",
    "column_types": [
      "uint8",
      "category",
      "category",
      "uint16",
      "category",
      "category",
      "uint8",
      "category",
      "uint8",
      "uint8",
      "category",
      "uint8",
      "category",
      "uint8",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Loan Amount",
      "Credit History",
      "Loan Duration - Months",
      "Age",
      "Savings Account",
      "Job",
      "Number of Existing Loans",
      "Purpose of Loan"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Calories (kcal)'].eq(0).any()",
    "question": "Are there any foods with zero calories?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "boolean",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Total Sugar (g)'] > 0).all()",
    "question": "Do all foods contain sugar?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "boolean",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "0",
    "df_func": "df.loc[df['Calories (kcal)'] > 500].shape[0]",
    "question": "How many foods have more than 500 kcal?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "number",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[0.0, 0.0, 0.0]",
    "df_func": "df.loc[df['Total Sugar (g)'].nsmallest(3).index, 'Total Sugar (g)'].tolist()",
    "question": "What are the 3 lowest amounts of sugar found among the foods?",
    "columns": [
      "name",
      "emoji",
      "Calories (kcal)",
      "Carbohydrates (g)",
      "Total Sugar (g)",
      "Protein (g)",
      "Total Fat (g)",
      "Saturated Fat (g)",
      "Monounsaturated Fat (g)",
      "Polyunsaturated Fat (g)",
      "Total Fiber (g)",
      "Cholesterol (mg)",
      "Vitamin B6 (mg)",
      "Vitamin A (IU)",
      "Vitamin B12 (ug)",
      "Vitamin C (mg)",
      "Vitamin D (IU)",
      "Vitamin E (IU)",
      "Vitamin K (ug)",
      "Thiamin (mg)",
      "Riboflavin (mg)",
      "Niacin (mg)",
      "Folate (ug)",
      "Pantothenic Acid (mg)",
      "Choline (mg)",
      "Calcium (g)",
      "Copper (mg)",
      "Iron (mg)",
      "Magnesium (mg)",
      "Manganese (mg)",
      "Phosphorus (g)",
      "Potassium (g)",
      "Selenium (ug)",
      "Sodium (g)",
      "Zinc (mg)"
    ],
    "types": "list[number]",
    "dataset": "056_Emoji",
    "column_types": [
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64"
    ],
    "lite_columns": [
      "Calories (kcal)",
      "Total Fat (g)",
      "name",
      "Sodium (g)",
      "Protein (g)",
      "Total Sugar (g)"
    ],
    "lite_column_types": [
      "float64",
      "float64",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['polInterest'].isin(['Very interested', 'Quite interested']).all()",
    "question": "Are all respondents interested in politics?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "boolean",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "[Ciudadanos]",
    "df_func": "df['Vote Intention'].mode().values[0]",
    "question": "Which is the most common vote intention among respondents?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "category",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "The party ideas are close to my own",
    "df_func": "df['voteReason'].value_counts().idxmax()",
    "question": "What is the most common reason for voting given by respondents?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "category",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Ciudadanos",
    "df_func": "df['partyId'].mode().iloc[0]",
    "question": "Which is the most common party identification among respondents?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "category",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "Castellano",
    "df_func": "df['lang'].value_counts().index[0]",
    "question": "What is the most common first language among respondents?",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "category",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "['The party ideas are close to my own', 'The party is the most competent', 'I prefer not to say']",
    "df_func": "df['voteReason'].value_counts().head(3).index.tolist()",
    "question": "Identify the top 3 most common reasons for voting among respondents.",
    "columns": [
      "Vote Intention",
      "Age",
      "const",
      "edu",
      "gender",
      "lang",
      "partyId",
      "polInterest",
      "prevVote",
      "prevVoteCat",
      "prov",
      "Austerity politics are needed in order to overcome the crisis",
      "The growth of Islam is a threat to the security of Spain",
      "The church must pay the IBI",
      "The fact that gay couples can adopt children is positive for society",
      "Women should choose freely on issues of abortion",
      "The immigration detention centres (CIES) should be closed",
      "Schools segregated by sex should also be subsidized by the state",
      "Spain must tighten its immigration policy",
      "Bullfights in Spain should be banned",
      "The 'gag law' is necessary to avoid social unrest",
      "In order to fight organized crime, restrictions on civil rights and liberties must be accepted",
      "Efficiency in the delivery of public services will be improved with private sector participation",
      "Negotiations with ETA weaken the state",
      "The political party that receives the most votes should govern",
      "Decentralizati on in Spain is inadequate and should continue to expand",
      "Linguistic policy in the autonomous regions discriminates against Spanish language",
      "The central government should control the spending of regional governments to limit their indebtedness",
      "The possibility of a referendum on self- determination of any Autonomous Community must be recognized by the Constitution",
      "The 1978 Constitution is the appropriate framework for our society",
      "Navarra and the Basque Country should retain their tax system",
      "Catalonia must be recognized as a nation",
      "The government should take a tougher line against the persecution of opposition leaders in Venezuela",
      "The number of public sector workers should be increased",
      "The European Union must do more to support the Greek economy",
      "It should be more difficult for companies to lay off workers",
      "Bailing out banks is needed in order to restore economic stability",
      "Increasing university fees is necessary for the sustainability of the university system",
      "The government should subsidize clean energy in order to encourage its use",
      "The subject of religion should be part of the curriculum",
      "The decriminalizati on of soft drugs for personal use is a positive measure",
      "User self-placement on Left-Right economic values axis",
      "User self- placement on Progressive-Conservative economic values axis",
      "Constitutional organisation of the country (More Descentralization)",
      "voteReason"
    ],
    "types": "list[category]",
    "dataset": "057_Spain",
    "column_types": [
      "object",
      "float64",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "partyId",
      "Vote Intention",
      "User self- placement on Progressive-Conservative economic values axis",
      "polInterest",
      "Age",
      "gender",
      "lang",
      "edu",
      "voteReason",
      "Constitutional organisation of the country (More Descentralization)",
      "It should be more difficult for companies to lay off workers",
      "User self-placement on Left-Right economic values axis"
    ],
    "lite_column_types": [
      "object",
      "object",
      "float64",
      "object",
      "float64",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['Are you registered to vote?'].str.contains('No').any()",
    "question": "Are there survey participants who are not registered to vote?",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "boolean",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "len(df[(df['Who are you most likely to vote for on election day?']!= df['Who did you vote for in the 2016 Presidential election? (Four years ago)']) & (df['Did you vote in the 2016 Presidential election? (Four years ago)'] == 'Yes') & (df['How likely are you to vote in the forthcoming US Presidential election? Early Voting Open']!= 'I do not plan on voting.')]) > 0",
    "question": "Do we have respondents who have shifted their voting preference from the 2016 election (four years ago) to the upcoming one?",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "boolean",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "South Atlantic",
    "df_func": "df['Division'].mode().iloc[-1]",
    "question": "Which geographical division has the greatest representation among the respondents? If there is a tie solve it by reverse alphabetical order. ",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "category",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "['White (not Hispanic, Latino or Spanish origin)', 'Black or African American (not Hispanic, Latino or Spanish origin)']",
    "df_func": "df['Which of the following best describes your ethnic heritage?'].value_counts().head(2).index.tolist()",
    "question": "Identify the top 2 ethnic groups with the most representation among the respondents.",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "list[category]",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "[10.0, 11.0]",
    "df_func": "df['likelihood'].value_counts().head(2).index.tolist()",
    "question": "Enumerate the 2 most common likelihood values among the respondents.",
    "columns": [
      "id",
      "Weight",
      "NCHS Urban/rural",
      "Division",
      "Wave",
      "Start time",
      "County FIPS",
      "How old are you?",
      "Are you",
      "Would you say you follow what's going on in government and public affairs",
      "Are you registered to vote?",
      "Are you registered to vote? Not open to vote",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "Headline vote share (intention and already voted combined)",
      "Who did you vote for?",
      "Who are you most likely to vote for on election day?",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "Which of the following best describes your ethnic heritage?",
      "What is the highest degree or level of school you have *completed* ?",
      "Which of the following best describes your current employment status?",
      "What was your yearly household income at the end of last year (before tax)?",
      "If you had to choose a candidate today, who would you vote for?",
      "Again, for statistical purposes only, what is your age?",
      "State",
      "Region",
      "To what extent do you agree or disagree that the election will be fair, and you will trust the result?",
      "How confident are you in the security and effectiveness of mail-in ballots when voting for president?",
      "In the event of being declared the loser, should {answer:Candidate} accept or challenge the result?",
      "If you have any concerns about the US election, what are they? - Contracting Covid-19 at a polling station",
      "If you have any concerns about the US election, what are they? - Mail-in or in-person voter fraud",
      "If you have any concerns about the US election, what are they? - Polling place reduction and changes",
      "If you have any concerns about the US election, what are they? - Long wait times at polling place",
      "If you have any concerns about the US election, what are they? - Voter intimidation at polling place",
      "If you have any concerns about the US election, what are they? - Foreign interference/influence on the election",
      "If you have any concerns about the US election, what are they? - The losing candidate not accepting the result",
      "If you have any concerns about the US election, what are they? - Fake news/ disinformation",
      "If you have any concerns about the US election, what are they? - Other",
      "If you have any concerns about the US election, what are they? - I don’t have any specific concerns about the election",
      "Which of these best describes the kind of work you do?",
      "likelihood",
      "NCHS Urban/rural (long form)",
      "Local time",
      "race_ethnicity_grouped",
      "education_grouped_by_gender",
      "weight_by_2016_vote",
      "vote_choice",
      "age_by_gender",
      "region_x_gender",
      "simple_2016_vote",
      "likely_voter",
      "likely_decided_voter"
    ],
    "types": "list[number]",
    "dataset": "058_US",
    "column_types": [
      "uint16",
      "float64",
      "uint8",
      "category",
      "category",
      "datetime64[us, UTC]",
      "uint16",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "float64",
      "category",
      "datetime64[us, UTC]",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "Are you registered to vote?",
      "Which of the following best describes your ethnic heritage?",
      "Who are you most likely to vote for on election day?",
      "Division",
      "Did you vote in the 2016 Presidential election? (Four years ago)",
      "Weight",
      "How likely are you to vote in the forthcoming US Presidential election? Early Voting Open",
      "State",
      "County FIPS",
      "Who did you vote for in the 2016 Presidential election? (Four years ago)",
      "What is the highest degree or level of school you have *completed* ?",
      "NCHS Urban/rural",
      "likelihood",
      "Which of these best describes the kind of work you do?",
      "How old are you?"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "float64",
      "object",
      "object",
      "int64",
      "object",
      "object",
      "int64",
      "float64",
      "object",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df.loc[df['shift'] == 'Manual'].shape[0] > 0",
    "question": "Are there cars with a 'Manual' shift?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "boolean",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "Diésel",
    "df_func": "df['fuel'].value_counts().idxmax()",
    "question": "What type of fuel is the most common for the cars?",
    "columns": [
      "url",
      "company",
      "make",
      "model",
      "version",
      "price",
      "price_financed",
      "fuel",
      "year",
      "kms",
      "power",
      "doors",
      "shift",
      "color",
      "photos",
      "is_professional",
      "dealer",
      "province",
      "country",
      "publish_date",
      "insert_date"
    ],
    "types": "category",
    "dataset": "059_Second",
    "column_types": [
      "category",
      "category",
      "category",
      "category",
      "object",
      "uint32",
      "float64",
      "category",
      "float64",
      "uint32",
      "float64",
      "uint8",
      "category",
      "category",
      "uint8",
      "bool",
      "category",
      "category",
      "category",
      "datetime64[us, UTC]",
      "datetime64[us, UTC]"
    ],
    "lite_columns": [
      "fuel",
      "color",
      "shift",
      "make",
      "model",
      "price",
      "year",
      "kms",
      "power",
      "province",
      "dealer",
      "photos",
      "version"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "int64",
      "float64",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['weekday_weekend'].eq('weekday').all()",
    "question": "Do all items have transactions recorded on weekdays?",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "boolean",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "not df[(df['period_day'] == 'evening') & (df['weekday_weekend'] == 'weekend')].empty",
    "question": "Are there any transactions recorded in the evening on weekends?",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "boolean",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "['Coffee', 'Bread']",
    "df_func": "df.loc[(df['period_day'] == 'afternoon')].groupby('Item')['Transaction'].sum().sort_values(ascending = False).head(2).index.tolist()",
    "question": "Name the top 2 most purchased during the afternoon.",
    "columns": [
      "Transaction",
      "Item",
      "date_time",
      "period_day",
      "weekday_weekend"
    ],
    "types": "list[category]",
    "dataset": "060_Bakery",
    "column_types": [
      "uint16",
      "category",
      "category",
      "category",
      "category"
    ],
    "lite_columns": [
      "date_time",
      "Item",
      "period_day",
      "Transaction",
      "weekday_weekend"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['Branch'].value_counts().index[0] == 'Disneyland_HongKong'",
    "question": "Is Disneyland_HongKong the most reviewed branch?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "boolean",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['Rating'] == 1).any()",
    "question": "Are there any reviews with a rating of 1?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "boolean",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "False",
    "df_func": "df.groupby('Reviewer_Location')['Rating'].apply(lambda x: (x==5).any()).all()",
    "question": "Does every reviewer location have at least one review with a rating of 5?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "boolean",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "United States",
    "df_func": "df['Reviewer_Location'].mode().values[0]",
    "question": "What is the most common reviewer location?",
    "columns": [
      "Review_ID",
      "Rating",
      "Year_Month",
      "Reviewer_Location",
      "Review_Text",
      "Branch"
    ],
    "types": "category",
    "dataset": "061_Disneyland",
    "column_types": [
      "uint32",
      "uint8",
      "category",
      "category",
      "object",
      "category"
    ],
    "lite_columns": [
      "Rating",
      "Reviewer_Location",
      "Year_Month",
      "Branch",
      "Review_ID"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "int64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['retweets'].max() > 0",
    "question": "Has the author ever been retweeted?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "boolean",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['retweets'] > 10000).any()",
    "question": "Are there any tweets with more than 10000 retweets?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "boolean",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['favorites'] > 50000).any()",
    "question": "Have any of the tweets been favorited more than 50000 times?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "boolean",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "1",
    "df_func": "df['author_name'].nunique()",
    "question": "How many unique authors are there?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "number",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "Donald J. Trump",
    "df_func": "df['author_name'].value_counts().idxmax()",
    "question": "What is the most common author name?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "category",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "en",
    "df_func": "df['lang'].mode().iloc[0]",
    "question": "What is the most common language of the tweets?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "category",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['realDonaldTrump']",
    "df_func": "df['author_handler'].value_counts().head(3).index.tolist()",
    "question": "What are the top 3 author handlers with the most tweets?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "list[category]",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "['Donald J. Trump']",
    "df_func": "df.groupby('author_name').size().sort_values(ascending=True).head(3).index.tolist()",
    "question": "What are the bottom 3 author names in terms of tweet count?",
    "columns": [
      "id",
      "author_id",
      "author_name",
      "author_handler",
      "author_avatar",
      "lang",
      "text",
      "date",
      "mention_ids",
      "mention_names",
      "retweets",
      "favorites",
      "links",
      "links_first",
      "image_links",
      "image_links_first",
      "tweet_link",
      "rp_user_id",
      "rp_user_name",
      "location"
    ],
    "types": "list[category]",
    "dataset": "062_Trump",
    "column_types": [
      "int64",
      "uint32",
      "category",
      "category",
      "category",
      "category",
      "object",
      "datetime64[us, UTC]",
      "object",
      "object",
      "uint32",
      "uint32",
      "object",
      "category",
      "object",
      "category",
      "category",
      "float64",
      "category",
      "category"
    ],
    "lite_columns": [
      "favorites",
      "text",
      "author_name",
      "date",
      "lang",
      "id",
      "retweets",
      "author_handler",
      "mention_names",
      "rp_user_id"
    ],
    "lite_column_types": [
      "int64",
      "object",
      "object",
      "object",
      "object",
      "int64",
      "int64",
      "object",
      "object",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['is_organization'].any() == False",
    "question": "Are there any individuals (non-organizations) in the dataset?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "boolean",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['pic'].notnull().all()",
    "question": "Do all entities have a picture?",
    "columns": [
      "id",
      "name",
      "pic",
      "is_organization",
      "community",
      "page_rank_norm",
      "weight",
      "x",
      "y",
      "twitter_profile_id",
      "gx_link_target",
      "gx_link_weight",
      "gx_link_reciprocal",
      "gx_link_should"
    ],
    "types": "boolean",
    "dataset": "063_Influencers",
    "column_types": [
      "uint32",
      "category",
      "category",
      "bool",
      "uint32",
      "float64",
      "float64",
      "float64",
      "float64",
      "int64",
      "object",
      "object",
      "object",
      "object"
    ],
    "lite_columns": [
      "name",
      "weight",
      "x",
      "is_organization",
      "community",
      "id",
      "page_rank_norm",
      "y",
      "pic"
    ],
    "lite_column_types": [
      "object",
      "float64",
      "float64",
      "bool",
      "int64",
      "int64",
      "float64",
      "float64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "True if (df['feathers'] == 1).any() else False",
    "question": "Are there any animals with feathers in the dataset?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "boolean",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['venomous'].any()",
    "question": "Are there any venomous animals in the dataset?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "boolean",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "df['breathes'].eq(1).all()",
    "question": "Do all animals breathe?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "boolean",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "True",
    "df_func": "(df['domestic'] == 1).any()",
    "question": "Are there any domesticated animals in the dataset?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "boolean",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "1",
    "df_func": "df['class_type'].mode().iloc[0]",
    "question": "What is the most common class type?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "category",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "[4, 2, 0, 6]",
    "df_func": "df['legs'].value_counts().head(4).index.tolist()",
    "question": "What are the most common 4 numbers of legs that animals have?",
    "columns": [
      "animal_name",
      "hair",
      "feathers",
      "eggs",
      "milk",
      "airborne",
      "aquatic",
      "predator",
      "toothed",
      "backbone",
      "breathes",
      "venomous",
      "fins",
      "legs",
      "tail",
      "domestic",
      "catsize",
      "class_type"
    ],
    "types": "list[number]",
    "dataset": "064_Clustering",
    "column_types": [
      "category",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8",
      "uint8"
    ],
    "lite_columns": [
      "legs",
      "domestic",
      "breathes",
      "class_type",
      "venomous",
      "feathers",
      "animal_name"
    ],
    "lite_column_types": [
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "int64",
      "object"
    ]
  },
  {
    "answer": "False",
    "df_func": "(df['Quantity'] > 0).all()",
    "question": "Are all the quantities greater than 0?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "boolean",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "df['CustomerID'].isnull().any()",
    "question": "Are there any missing customer IDs?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "boolean",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "True",
    "df_func": "'United Kingdom' in df['Country'].values",
    "question": "Are there any transactions from the United Kingdom?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "boolean",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  },
  {
    "answer": "United Kingdom",
    "df_func": "df['Country'].value_counts().idxmax()",
    "question": "Which country made the most transactions?",
    "columns": [
      "InvoiceNo",
      "StockCode",
      "Description",
      "Quantity",
      "InvoiceDate",
      "UnitPrice",
      "CustomerID",
      "Country"
    ],
    "types": "category",
    "dataset": "065_RFM",
    "column_types": [
      "float64",
      "category",
      "category",
      "int32",
      "category",
      "float64",
      "float64",
      "category"
    ],
    "lite_columns": [
      "InvoiceNo",
      "Country",
      "StockCode",
      "Description",
      "Quantity",
      "CustomerID",
      "UnitPrice"
    ],
    "lite_column_types": [
      "object",
      "object",
      "object",
      "object",
      "int64",
      "float64",
      "float64"
    ]
  }
]